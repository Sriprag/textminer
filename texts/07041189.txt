IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 20, NO. 2, MARCH 2016

717

A Novel Approach to Multiple Sequence Alignment
Using Multiobjective Evolutionary Algorithm
Based on Decomposition
Huazheng Zhu, Zhongshi He∗ , and Yuanyuan Jia

Abstract—Multiple sequence alignment (MSA) is a fundamental and key step for implementing other tasks in bioinformatics,
such as phylogenetic analyses, identification of conserved motifs
and domains, structure prediction, etc. Despite the fact that there
are many methods to implement MSA, biologically perfect alignment approaches are not found hitherto. This paper proposes a
novel idea to perform MSA, where MSA is treated as a multiobjective optimization problem. A famous multiobjective evolutionary algorithm framework based on decomposition is applied
for solving MSA, named MOMSA. In the MOMSA algorithm, we
develop a new population initialization method and a novel mutation operator. We compare the performance of MOMSA with
several alignment methods based on evolutionary algorithms, including VDGA, GAPAM, and IMSA, and also with state-of-the-art
progressive alignment approaches, such as MSAprobs, Probalign,
MAFFT, Procons, Clustal omega, T-Coffee, Kalign2, MUSCLE,
FSA, Dialign, PRANK, and CLUSTALW. These alignment algorithms are tested on benchmark datasets BAliBASE 2.0 and BAliBASE 3.0. Experimental results show that MOMSA can obtain
the significantly better alignments than VDGA, GAPAM on the
most of test cases by statistical analyses, produce better alignments
than IMSA in terms of TC scores, and also indicate that MOMSA
is comparable with the leading progressive alignment approaches
in terms of quality of alignments.
Index Terms—Multiobjective evolutionary algorithm framework based on decomposition (MOEA/D), multiobjective optimization, multiple sequence alignment (MSA).

I. INTRODUCTION
ULTIPLE sequence alignment (MSA) is the first and one
of the most important steps in bioinformatics because it
has a variety of uses, such as phylogenetic analyses, identification of conserved motifs and domains, structure prediction,
etc. [1]. Researchers have demonstrated that the secondary or
tertiary structure prediction accuracy of RNA and proteins is
improved accordingly with the increase of sequence alignment
accuracy [2]. Therefore, developing biologically perfect alignment approaches is a promising research field.

M

Manuscript received July 4, 2014; revised December 21, 2014 and February 4, 2015; accepted February 9, 2015. Date of publication February
12, 2015; date of current version March 3, 2016. This work was supported in part by the China Science and Technology Project of Ministry of Transport under Grant 2011318740240 and by the Chongqing
graduate education reformation research project under the No. yjg133005.
Corresponding author: Zhongshi He (zshe@cqu.edu.cn)
The authors are with the College of Computer Science, Chongqing
University, Chongqing 400044 China (e-mail: huazhengzhu@cqu.edu.cn;
yyjia@cqu.edu.cn).
Color versions of one or more of the figures in this paper are available online
at http://ieeexplore.ieee.org.
Digital Object Identifier 10.1109/JBHI.2015.2403397

Fig. 1.

Illustration of MSA.

MSA is mainly focused on discovering biological relations
among different sequences, including nucleotide or amino acid,
to investigate their underlying main characteristics or functions.
In other words, if there are more similarities among the aligned
sequences, they may have more biological relationships. We
can also predict the functions or characteristics for the aligned
sequences. In general, MSA can be formulated mathematically
in the following.
Given a 
set of N strings S = {S1 , S2 , . . . , SN } over the alphabet set , which consists of four nucleotides or 20 amino
acids, respectively, we need to find an alignment S  such that the
number of the aligned symbol is as much as possible by deleting
or inserting gaps, as illustrated in Fig. 1. The found alignment
S  is subject to the following constraints [3].
1) Si = Si , for all i = 1, 2, . . . , N , if all gaps are removed
from Si .

|, where |Si | denotes the length
2) |S1 | = |S2 | = · · · = |SN

of Si .
 
3) 
The alignment score Score(S  ) = i j sim(Si , Sj ) −



i g(Si ) is maximized, where sim(Si , Sj ) denotes the


evaluation of similarity between Si and Sj , and g(Si ) is
penalty function of gaps in Si .
From the above definition of MSA, it can be seen that MSA
is actually viewed as a single-objective optimization problem.
Additionally, it is worth noting that MSA is proved to be a NPcomplete problem [4]. MSA has been paid a lot of attention
from many researchers since Needleman and Wunsch proposed
first dynamic programming for pairwise sequence alignment in
1970s [5]. So far, many approaches to MSA have been developed, which fall into three broad categories: exact, progressive,
and iterative.
Dynamic programming technique is an exact algorithm,
which can obtain the mathematically perfect alignments. However, as mentioned above, computation complexity is too high
to reach for more than three sequences in reality [4]. In order to overcome this drawback, progressive alignment method

2168-2194 © 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See http://www.ieee.org/publications standards/publications/rights/index.html for more information.

718

IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 20, NO. 2, MARCH 2016

is proposed by Feng and Doolittle. They utilized the Needleman and Wunsch pairwise alignment algorithm iteratively to
achieve the simultaneous alignment of multiple sequences [6].
This approach has the great advantage of speed and simplicity
combined with reasonable sensitivity. Therefore, it is applied
widely for routine applications.
One of most known progressive alignment programs is
CLUSTALW, which uses the weighting method, positionspecific gap penalties and weight matrix to increase its robust
and sensitivity [7]. The authors of PRANK proposed a progressive alignment algorithm with the phylogeny-aware gap placement method, because traditional alignment methods lead to
excessive penalization of single insertion events [8]. However,
the progressive alignment methods are essentially heuristic, and
follow the rule of “once a gap, always a gap,” which may lead
to the main disadvantage that once a mistake is made in the
initial alignment, it will be impossible to be modified. In order
to overcome the limitations of the progressive algorithms, mixture of iterative and progressive algorithms is recommended by
researchers, for instance, MUSCLE is a representative hybrid
algorithm [9], [10].
One alternative algorithm is based on a Hidden Markov Model
(HMM) [11]–[13] or fast Fourier transform [14]. Alignment algorithms based on HMM are popular with researchers currently.
Another efficient MSA program is Kalign, which is based on the
Wu-Manber string match algorithm [15]. Kalign2 is the newest
version that is a fast and accurate aligner [16].
As the definition of MSA mentioned above, MSA can be
considered as an optimization problem. Therefore, stochastic
optimization algorithms for MSA are natural and promising alternatives, which belong to the iterative alignment algorithms.
Almost all stochastic optimization methods have been used for
MSA, such as simulated annealing [17], genetic algorithms [18],
particle swarm optimization [19], and ant colony optimization
[20], [21], etc. Furthermore, it should be pointed out that genetic algorithms are most widely used, like SAGA [18], MSAGA [22], RBT-GA [3], GAPAM [23], and VDGA [24], perhaps
because genetic algorithms essentially stem from Darwin’s principles of natural selection. These approaches iteratively improve
the quality of MSA until the alignment cannot be better by designing the alignment updating method. This strategy can overcome the drawback of progressive alignment that the error you
make in the initial alignment cannot be changed later, but it is
computationally expensive and does not guarantee the optimal
alignment can be reached each time.
From the above literature review, existing alignment algorithms treat MSA as a single-objective optimization problem.
For example, procedure VDGA uses some mechanisms iteratively to make the sequences aligned as much as possible. In
VDGA, a weighted sum of pairs (WSPs) scoring function is
used to measure the quality of the sequence alignment. The
alignment with the best WSPs is the objective of VDGA. However, the objectives of MSA are to maximize the number of
matching base pairs among the sequences and minimize the gap
score by inserting or deleting gaps. Therefore, MSA is actually
a biobjective optimization problem. In this paper, a novel approach to MSA using a multiobjective optimization algorithm

based on decomposition (MOEA/D) is proposed, which is called
a multiobjective optimization algorithm for multiple sequence
alignment (MOMSA), where a new population initialization
method and a novel mutation operator are developed.
The rest of this paper is structured as follows. MSA problem modeling is given in Section II. Section III presents a
MOMSA method. Experiment results and analysis are provided
in the Section IV, and then in the Section V, the conclusions are
made.
II. MSA PROBLEM MODELING
MSA is a complicated problem, especially, the choice of an
objective function is very important for finding a mathematically
optimal alignment. Over the recent years, several new objective
functions were proposed, such as WSPs, Coffee, T-Coffee, and
3-D-Coffee, etc. [7], [25]–[27]. Coffee score reflects the level of
consistency between a MSA and a library containing pairwise
alignments of the same sequences. It can increase the accuracy
of MSA, but the computation time goes up sharply [25]. WSPs
is simple and easy to use for evaluating an alignment, so it is
widely used by researchers. As we will use WSPs as a metric,
its specific procedure is introduced in detail.
A. Weighted Sum of Pairs
WSPs is widely applied for evaluating an alignment [7], [23],
[24], which can be formulated in the following:
score(S) =

L


Sl

(1)

l=1

Sl =

N
−1


N


wij cost(Ai , Aj )

(2)

i=1 j =i+1

where
cost(Ai , Aj )
⎧
0,
⎪
⎪
⎪
⎪
−gapopen,
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎨
= −gapextend,
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪ Blosum(Ai , Aj )
⎩
or PAM (Ai , Aj )

if Ai = Aj = ‘-’
if (Ai = ‘-’ and Aj = ‘-’) or
(Ai = ‘-’ and Aj = ‘-’) and
it is a gap opening
if (Ai = ‘-’ and Aj = ‘-’) or
(Ai = ‘-’ and Aj = ‘-’) and
it is a gap extension
if Ai = ‘-’ and Aj = ‘-’

(3)

score(S) denotes the score of sequence alignment, S . L is the
length of the aligned sequences, S . Sl is the cost of the lth
column of the aligned sequences, S . N is the number of the
aligned sequences S. wij is the weight of sequence i and j,
which is calculated according to the distances among the unaligned sequences, cost(Ai , Aj ) is the alignment score between
two residues Ai and Aj , gapopen and gapextend are the penalty
cost of a gap opening and a gap extension, respectively. Fig. 2 illustrates the gap opening and the gap extension. In CLUSTALW,
the initial default gapopen, gapextend are 10 and 0.2, respectively, which are adjusted dynamically in the alignment process

ZHU et al.: NOVEL APPROACH TO MULTIPLE SEQUENCE ALIGNMENT USING MULTIOBJECTIVE EVOLUTIONARY ALGORITHM

Fig. 2.

719

Illustrations of the gap opening and the gap extension.
Fig. 3.

[7]. Blosum(Ai , Aj ) and PAM(Ai , Aj ) are the score of matched
residues Ai , Aj according to the blocks substitution matrix (Blosum) [28] and percent accepted mutation (PAM) matrix [29],
respectively.
WSPs scoring function has suggested that MSA problem can
be addressed as a single-objective optimization problem. However, as mentioned by authors of CLUSTALW, the choice of
alignment parameters is one of major problems in sequence
alignment, such as gapopen, gapextend, and wij . Although
a detailed study on these parameters is proposed, parameter
choice problem is still worth researching.

Substitution cost and gap cost of two alignments.

Pareto optimal alignments, which provide the decision makers
to choose. If an alignment algorithm by optimizing a single
objective is used, just only one of them can be obtained. That
means some good alignments are omitted. It can be seen that
multiobjective optimization concept can help us to find more
meaningful alignments and better understand the relationships
among these biological sequences.
III. MOMSA: THE PROPOSED METHOD
A. Motivations

B. Our New Proposed Model of MSA
Generally speaking, the simultaneous alignment of many nucleotide or amino acid sequences is to make these sequences
aligned as possible as we can. In other words, we need to maximize the number of matching base pairs among the sequences
and minimize the score of gap penalty by inserting or deleting gaps. Therefore, it is obvious that MSA can be regarded
as a biobjective optimization problem. In this paper, MSA is
formulated mathematically as follows:
minimize F (S) = (f1 (S), f2 (S))T
f1 (S) = scoregap(S)
f2 (S) = −SP(S)
S ∈ Ω

(4)

where
scoregap(S) = x∗ gapopen + y ∗ gapextend
SP(S) =

L

l=1

S l , Sl =

N
−1


N


cost(Ai , Aj )

(5)
(6)

i=1 j =i+1

where the specific formula of cost(Ai , Aj ) can be seen in (3),
Ω is the sequences alignment space, x is the number of the gap
opening, y is the number of the gap extension, scoregap(S) is
the score of gap penalty, SP(S) denotes the sum of score of
the matched pairs in the sequence alignment S. For instance,
in Fig. 3, there are two alignments S a , S b . The first objective
function value scoregap(S a ) and scoregap(S b ) are 40.2 and 50,
respectively, if gapopen is set to 10 and gapextend is 0.2. The
second objective function value SP(S a ) and SP(S b ) are 200.4
and 255, respectively, if we choose PAM250 as the substitution
matrix. Obviously, the alignments S a , S b are incomparable if
the two objectives are considered. In other words, S a , S b are

There are two drawbacks when MSA is viewed as optimizing
the single-objective problem, for instance WSPs. First, WSPs
scoring function has several parameters to select, however, it is
not a trivial but complicated task. Because these parameters are
related with the number of sequences, the length of sequences,
and the similarity of the unaligned sequences, they will vary
with the difference of the selected sequences. Secondly, even if
the parameters of WSPs are given properly, the biologically
optimal alignment may not be obtained [30], [31]. In [30],
the authors found that there exists two different alignments
may have same value of objective function, and the biological optimum may not be the mathematically optimal alignment.
Based on the second drawback, a hybrid immune inspired MSA
procedure (IMSA) has been proposed, which have the merit
producing several optimal or suboptimal alignments [32]. However, because the parameters of objective function are not determined, multiple alignment process may have some probability
of misleading by the unsuitable objective function parameters.
Therefore, Multiobjective optimization algorithm for multiple
sequence alignment is developed in this paper. To explain the
motivation further, there is a simple instance to illustrate as
follows:
maximize F = (f1 ,f2 )T
f1 (x) = x
f2 (x) = 10 − x
x ≥ 0.

(7)

Equation (7) is a biobjective optimization problem. If the maximization of function F is considered as a single-objective function to be optimized, then the weight should be used for balancing the two objectives. It is assumed that two choices of weight
vectors are as follows.

720

IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 20, NO. 2, MARCH 2016

1) If the weight vector W = (0.5, 0.5), then F = 0.5∗ (f1 +
f2 ) = 0.5∗ (x + 10 − x) = 5.
2) If the weight vector W = (0.1, 0.9), then F = 0.1∗ f1 +
0.9∗ f2 = 0.1∗ x + 0.9∗ (10 − x) = 9 − 0.8∗ x. Therefore,
the maximum of F is 9.
From the assumption above, the choice of weight W is highly
related with the single-objective function value. Therefore, it
shows the importance of correct selection of parameters when
you view (7) as a single function optimization problem. If situation 1 happened, then the maximum of F should be 5. When
you are confronted with this problem, you may select the weight
vector like situation 2, and if you use IMSA, which can obtain
optimal and suboptimal value, so you may get the maximum 5.
In other words, you may reach the right answer but if the situation is like situation 2 in real, then maximum of F should be 9.
Therefore, while you choose the weight vector like situation 1,
it is impossible to arrive the real maximum 9, even if you use
an excellent optimization algorithm, because the maximum is
at most 5 when we choose the weight = (0.5, 0.5). Therefore,
IMSA has still some difficulties when the parameters are not
selected correctly.
While (7) is solved by a multiobjective optimization algorithm, it does not need to select these parameters, such as
weight W . Therefore, there are no difficulties from the choice
of parameters. This is major motivation of MOMSA, which
uses a recent proposed multiobjective optimization framework
MOEA/D [33].
B. MOEA/D Framework

Fig. 4.

Process of population initialization.

where z ∗ = (z1 , z2 , . . . zm )T is a reference point, which can be
computed by the formula
zi∗ = min{fi (s)|s ∈ Ω}, i = 1, 2, ..., m

(9)

λ = (λj1 , λjm , . . . , λjm )T
lem, i.e., λji ≥ 0, for all
j

is a weight vector of the jth subprob
j
i= 1, . . . ,m, and m
i=1 λi = 1, m is
the number of objectives. More precisely, in this paper, m is 2.
Let NP be the number of decomposed subproblems, then the
weight vector λj is (j/NP , 1 − j/NP ). It is noted that the ideal
point z ∗ is not calculated by (9), but is defined as minimum
in the whole current population since searching the exact ideal
point consumes large computational resources.

MOEA/D framework was proposed by Zhang and Li in 2007.
The idea of MOEA/D is that it uses the weighting method to C. MOMSA Approach
convert a multiobjective optimization problem into a number
of scalar optimization problems. MOEA/D is selected as the Algorithm 1 MOMSA approach
algorithm framework because it has the following merits.
Input:
1) It does not have the nondominate sorting procedure, so it
NP : the number of the subproblems considered in
is simpler than nondecomposition MOEAs, such as NSMOMSA, i.e., the size of the population
GAII. It is more efficient than other algorithms.
Nn ei : the number of the weight vectors in the
2) It can obtain the uniform solutions without complicate
neighborhood for each weight vector λj ,
methods, like the crowding distance method.
j = 1, 2 . . . , Np
3) Traditional a single-objective optimization algorithm can
Tm ax : the maximum number of iteration
be directly applied for multiobjective optimization probOutput:
lems.
S ∗ : the best sequence alignment in the final population
The specific algorithm can be seen in the literature [33]. In
MOEA/D, the authors introduced three methods to decompose
the multiobjective optimization problem into a number of scalar Step 1 Initialization
Step 1.1 Randomly generate an initial population P0 of size
optimization problems. They are, respectively, a weighted sum
NP , the specific procedure is seen in Fig. 4.
approach, a Tchebycheff approach, and a penalty-based boundStep 1.2 Generate NP weight vectors λj , j = 1, 2, . . . , NP ,
ary intersection (PBI) approach. In this paper, the Tchebycheff
where λj = (λj1 , λj2 , . . . , λjm ), m is the number of
approach is adopted because it is simple and does not need the
objectives.
additional penalty factor as the PBI approach. In the TchebyStep 1.3 Compute the Euclidean distances dij between each
cheff approach, the scalar optimization subproblem j can be
two weight vectors, and then based on the Euformulated in the following:
clidean distances matrix d, select Nn ei closest
te
j
∗
j
∗
individuals to form their neighborhoods’ set Bi
minimize g (s|λ , z ) = max {λi |fi (s) − zi |} (8)
1≤i≤m
for each individual Si , i = 1, 2, . . . , NP , Bi =
s.t. s ∈ Ω
{Si1 , Si2 , . . . , SiN n ei }, Nn ei denotes the size of Bi .

ZHU et al.: NOVEL APPROACH TO MULTIPLE SEQUENCE ALIGNMENT USING MULTIOBJECTIVE EVOLUTIONARY ALGORITHM

Step 1.4 For each individual Si , compute objective
function value f1 (Si ), f2 (Si ), i = 1, 2, . . . , NP .
Let F 1 = (f1 (S1 ), f1 (S2 ), . . . , f1 (SN p )), F 2 =
(f2 (S1 ), f2 (S2 ), . . . , f2 (SN p )), set reference point
Z = (min(F1), min(F2)), where function min means
that getting the minimum.
Step 1.5 t = 1.
Step 2 Evolution
For i = 1, 2, . . . , NP ,
Step 2.1 Reproduction: First, randomly select two individuals from the neighborhood set Bi of Si , and then
implement the operation of single point crossover
or multiple points crossover at a defined probability
on the two selected individuals to generate a new
individual Si , and then mutate Si . Subsequently, Si
is obtained by the operations of vertical decomposition with guide tree (VDGT) for the individual
Si , i.e., Si = VDGT(Si ). If Si dominates Si , then
Si = Si . Finally, add Si to the Population Pt .
Step 2.2 Updating the reference point Z: For each r =
1, 2, . . . , m, if Zr > fr (Si ), then Zr = fr (Si ). m
is the number of objectives.
Step 2.3 Updating the neighboring solutions of Si : For
each neighborhood Sik of Si , k = 1, 2, . . . , Nn ei ,
k
k
k
if g(Si |λS i , Z) < g(Sk |λS i , Z), Sk = Si . λS i is
the weight vector of Sik .
Endfor
Step 3 Stopping criterion: If t > Tm ax , then stop and output
the best individual S ∗ evaluated by a criterion, which
is determined by decision maker in the final population
Pt , otherwise the counter t = t + 1, and go to step 2.
The framework of MOMSA can be seen in algorithm 1. The
steps of our proposed method are broadly population initialization, population evolution, and the stopping criteria. For explaining comprehensively the specific procedure, these steps will be
described in details below.
1) Population Initialization: To produce the initial population P0 with Np candidate alignments, several approaches have
been presented by researchers. In SAGA, a random initialization method is used, which choose a random offset for all the
sequences, and then move them to the right, and finally, make
these sequences of the same length by padding with null signs.
In MSA-GA, it first uses the Needleman–Wunsch algorithm to
align globally these pairwise sequences, and then insert random
gaps to make the length of all sequences same. In IMSA, the
candidate alignments are mostly created by the CLUSTALW algorithm, and the remaining candidate alignments are produced
by random initialization as the initialization method in SAGA.
In GAPAM and VDGA, their initial generations are also based
on the tree-based method, but they do not use the random offset. GAPAM first generates two alignments by performing the
CLUSTALW algorithm with two different distances calculating
method, and then two mechanisms are implemented to generate
many different trees. The first mechanism is randomly selected
sequences make a new subtree, and the nonselected sequences
develop another new subtree. Finally, they are merged together

Fig. 5.

721

Example of a single point crossover.

to form a new tree. The second one is that select two sequences
and then exchange their positions to produce a new tree. Even
though it is a good population initialization method, it is time
consuming too. In this paper, a new and simple population initialization method is presented as shown in the Fig. 4, which
is inspired by a gap-insertion operation in SAGA. The specific
procedure of population initialization is described below.
First, we generate an alignment S by a tree-based method,
such as CLUSTALW, etc. and then, the sequences of alignment
S are divided randomly into two groups, in which we randomly
select a position and insert a user-defined number Nins of gaps
in the same columns, respectively. Finally, the two groups of
sequences are composed as a complete alignment.
2) Genetic Operators:
a) Crossover operators: In SAGA, there are 22 operators
introduced for searching the best alignment. The effect of these
operators for performance of SAGA is investigated, and the observed experimental results shows that the crossover operators
that are composed of single point crossover and multiple points
crossover seem to be not helpful for SAGA’s success because
they are very disruptive, especially at the junction point [34].
However, the crossover operators are good at maintaining diversity of population, which is vital for evolutionary algorithm.
Therefore, these two crossover operators are used in the proposed MOMSA algorithm. Single point crossover is illustrated
in Fig. 5 [23]. Initially, two individuals (parent a, b) is chosen
with probability from the whole population or its set of neighbors, one of which is then divided vertically at a random column
into two parts (a1, a2), and another one of which is cut to two
pieces (b1, b2), in which each piece should contain the same
number of residues or bases as the counterpart of first individuals (parent a). At last, these pieces are merged to two new
individuals, in which a fitter individual would survive. Likewise,
multiple points crossover operator needs two parent individuals,
and then divides vertically them at two random positions. It is
noted that when dividing another parent individual according to
the first one, the point is that the number of residues contained
in each part is the same as the counterpart of the first individual,
which is illustrated in Fig. 6 [23].
b) Mutation operators: In VDGA and GAPAM algorithm, the authors employed the mutation operator to keep
the diversity of population abundant and to improve their

722

Fig. 6.

IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 20, NO. 2, MARCH 2016

Example of multiple points crossover.

convergence. The mutation operator is that shuffling the two
selected sequences in the guide tree, and then generating a
new guide tree to find a new better MSA. By experimental
observation, we found that the mutation is too computational
expensive, and usually cannot find the better alignment. That
is why GAPAM’s developer found that any best solution did
not be achieved when only implementing mutation operation.
Therefore, the mutation operation is not employed in the proposed MOMSA algorithm. Here, we propose a new mutation
operation that is simple and efficient. The proposed mutation
operation’s motive is that some local optimal solutions need to
change a little in order to find a better solution (i.e., a better
alignment). Fig. 7 illustrates our proposed mutation operator,
which randomly choose a piece in the candidate alignment, and
then remove all the gaps in the piece. Subsequently, a tree-based
method is used to align the piece. Finally, the new piece replaces
the counterpart of the candidate alignment.
3) Vertical Division Operator: In the VDGA, the vertical
division strategy can make the sequences increasingly aligned,
the idea of which is to divide the longer sequences into smaller
parts, align them, respectively, and then combine them to generate a complete sequences alignment. This paper adopts the
vertical division technique as a local search operator to improve
the performance of the MOMSA algorithm. Fig. 8 illustrates
this operator how to work. A candidate MSA is first decomposed randomly to three parts, and then a tree-based method is
applied to align the three parts of sequences separately to form
three smaller alignments. Finally, we merge the three alignments
into a new whole alignment as shown in Fig. 8(e) [24].
4) Stop Condition: In MOMSA, the maximal iterations
Tm ax is applied for stopping this procedure. Based on experimental observations, MOMSA algorithm is set to terminate
when the iterations is 100, because the nondominated solutions
are not almost changed, and we also have tested MOMSA algorithm for up to 200 iterations, but the solutions we obtained did
not significantly changed.

Fig. 7. Example of mutation operator. (a) Candidate MSA. (b) Select randomly a piece in the MSA. (c) Remove all gaps in the piece. (d) Generate a new
alignment for the piece by a tree-based method. (e) New MSA by merging.

5) Criterions for the Decision Maker: At the last stage of
the MOMSA algorithm, a set of nondominated solutions will
be obtained, among which the decision maker selects a solution according to their preferences in reality. In this paper, we
use WSPs, which is used widely for evaluating solutions and
whose formula can be seen in Section II-A, to measure these
nondominated solutions and choose a best one (i.e., a MSA).
IV. EXPERIMENTAL STUDY
In this section, first, we compare MOMSA with the recently
proposed MSA algorithms based on evolutionary algorithms,
including VDGA, GAPAM, IMSA, to demonstrate its superiority. After that we evaluate the performance of the proposed
MOMSA with many popular aligners. In this paper, MOMSA
is coded in MATLAB and implemented on the personal computer with four Intel Core i5 3.1-GHz processors with 3072-MB
RAM under WIN7 platform.
A. Datasets
BAliBASE (benchmark alignment database), which is a wellknown benchmark alignments dataset for evaluating MSA programs, was developed by manually aligning based on those
known 3-D structures of proteins. In this paper, we choose
BAliBASE 2.0 and 3.0 to test our proposed MOMSA algorithm. There are five reference sets of unaligned sequences with
different characters that contain the length and the identity
among the unaligned sequences in the original BAliBASE.

ZHU et al.: NOVEL APPROACH TO MULTIPLE SEQUENCE ALIGNMENT USING MULTIOBJECTIVE EVOLUTIONARY ALGORITHM

723

maximum length of the unaligned sequences. In the tree-based
alignment approach, we use PAM250 as the score matrix, which
is same as GAPAM. The parameter gapopen and gapextend are
10 and 0.2, respectively.

C. Experimental Results and Analysis

Fig. 8. Example of vertical division. (a) Candidate MSA. (b) Decompose
the MSA. (c) Remove all gaps. (d) Generate new alignments by a tree-based
method. (e) New MSA.

Based on it, BAliBASE 2.0 is developed by correcting some
reference alignments. Besides that three new alignments references sets are added for identifying the strength and weakness
of alignment algorithms [35]. BAliBASE 3.0 is the latest version of the MSA benchmark, which has been widely used by
many researchers [36]. In BAliBASE 3.0, there are 6255 sequences and 218 test cases. They are divided to five test sets.
The two measures of accuracy of our test alignments are introduced in BAliBASE. The one is the sum of pairs (SP) score,
the fraction of aligned residue pairs in the reference alignment
that are correctly found in the tested alignment, and the other
one is the total column (TC) score, the fraction of aligned
columns that are correctly found. The source code of calculating both measures can be downloaded from http://bips.ustrasbg.fr/en/Products/Databases/BAliBASE.
B. Parameters Setting
In the proposed MOMSA algorithm, population size NP is
set to 100 as in the MOEA/D. That is because we observed that
the obtained solutions with the population size 100 are better
than that with 50, but almost same to that with 200, by a number
of experiments. The number of the weight vectors Nn ei is 10.
The maximum number of iteration Tm ax is 100.
We adopt two kinds of crossover operation: single crossover
and multiple points crossover, and use a new proposed mutation
operator. The probabilities of each operator are set to 0.5, 0.5,
and 1, respectively. A new population initialization method is
developed, in which a random number of gaps will be inserted
into a seed alignment. In this paper, we set the number Nins
of gaps inserted to 5, if the maximum length of the unaligned
sequences is less than 100. If not, Nins is set to 1/20 of the

1) Comparison of MOMSA With VDGA, GAPAM: In order
to judge the performance of our proposed MOMSA algorithm,
we compare it with VDGA and GAPAM, which is recently proposed MSA algorithms. For comparing the solutions obtained
by each algorithm conveniently, we have selected test data according to the GAPAM’s. The authors chose 56 test cases in
BAliBASE 2.0, which contains 18 test cases from [1], 23 test
cases from [2], 11 test cases from [3], and two test cases from [4]
and [5], respectively. As mentioned in Section III-A5, in this paper, we adopt WSPs as the measure to select the best alignment
from the obtained nondominated solutions. The corresponding
SP is recorded. We denote the MOMSA algorithm with the best
WSPs by MOMSA-W. MOMSA-W is performed for five times
and the median of their results are recorded. Table I shows the
results of MOMSA-W, VDGA, and GAPAM.
For analyzing effectively the results showed in Table I, we
have performed a nonparametric test, Wilcoxon signed rank test
by the software SPSS, which can judge the difference between
the paired algorithms. In other words, Wilcoxon signed rank test
can decide which algorithm is better. It is noted that Bonferroni
correction is also used for Wilcoxon signed rank test to decrease
the global type I error. We assume that there is no significant
difference every two algorithms as a null hypothesis. Confidence
level is set to 95%. Hence, if the asymptotic significance P
< 0.05/4, we reject the null hypothesis, else retain the null
hypothesis. Table II shows the statistic results of Table I. From
Table II, it can be seen that the MOMSA algorithm with the
best WSPs (MOMSA-W) is significantly better than GAPAM
and VDGA (P 0.05/4), because the asymptotic significance
P are equal to 6.2e–6 and 8.4e–6, respectively. In Fig. 9, the
overall performances of several algorithms are showed. It can
be observed that MOMSA-W is obviously better than GAPAM
and VDGA in the average accuracy. From the above analysis,
it can be safely concluded that the MOMSA-W algorithm is
significantly better than GAPAM and VDGA in terms of SP.
2) Comparison of MOMSA With IMSA: IMSA was recently proposed for MSA, which is an immune inspired algorithm. IMSA has the ability to generate more than a single
suboptimal alignment for each MSA. The authors of IMSA
have reported comparable results with many alignment algorithms. The MOMSA algorithm has similar ability to generate
more than one alignment, while implementing it one time. For
evaluating both algorithms, we use all the test cases on BAliBASE 2.0 and 3.0 to test MOMSA-W. Tables III and IV show,
respectively, average SP and TC scores obtained by the two
algorithms on every group of test cases on BAliBASE 2.0 and
3.0. The values of SP and TC about IMSA come from data
reported in [32]. From Table III, we can see that MOMSA-W
significantly outperforms IMSA in terms of both SP and TC

724

IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 20, NO. 2, MARCH 2016

TABLE I
RESULTS OF MOMSA, VDGA, GAPAM ON THE SELECTED TEST CASES
name

SNa

avgSLb

GAPAM (SP)

VDGA (SP)

MOMSA-W (SP)

1idy
1tvxA
1uky
kinase
1ped
2myr
1ycc
3cyr
1ad2
1ldg
1fieA
1sesA
1krn
2fxb
1amk
1ar5A
1gpb
1taq

50
4
4
5
3
4
4
4
4
4
4
5
5
5
5
4
5
5

58
69
220
276
374
474
116
109
213
675
442
63
82
63
258
203
828
928

0.5650
0.3160
0.4020
0.4870
0.4980
0.3170
0.8450
0.9110
0.9560
0.9630
0.9630
0.9820
0.9600
0.9700
0.9980
0.9740
0.9830
0.9450

0.5730
0.2670
0.4490
0.5450
0.4820
0.3590
0.7550
0.8210
0.9410
0.9060
0.9300
0.9620
0.9600
0.9780
0.9840
0.9380
0.9840
0.9590

0.2154
0.0526
0.5148
0.8496
0.7389
0.4372
0.9345
0.8154
0.9562
0.9886
0.9820
0.9583
1.0000
0.9357
0.9947
0.9604
0.9862
0.9477

1aboA
1idy
1csy
1r69
1tvxA
1tgxA
1ubi
1wit
2trx
1sbp
1havA
1uky
2hsdA
2pia
3grs
kinase
1ajsA
1cpt
1lvl
1pamA
1ped
2myr
4enl

15
19
19
20
16
19
15
20
18
16
26
23
20
16
15
18
18
15
23
18
18
17
17

80
60
99
76
69
71
60
106
94
262
242
225
255
294
237
287
389
434
473
511
388
482
440

0.7960
0.9890
0.7640
0.9650
0.9200
0.8780
0.7670
0.8510
0.9860
0.7650
0.8790
0.8080
0.7960
0.8280
0.7460
0.7990
0.8990
0.8750
0.7810
0.8600
0.9120
0.8220
0.8960

0.6910
0.9920
0.8850
0.8340
0.9740
0.8780
0.7780
0.8150
0.9860
0.7720
0.8460
0.8910
0.8290
0.8500
0.7510
0.8880
0.9050
0.8120
0.8190
0.8630
0.9470
0.8300
0.8890

0.8398
0.9743
0.8536
0.9450
0.9365
0.9522
0.9211
0.9203
0.9863
0.8808
0.8969
0.9404
0.9192
0.9733
0.8492
0.9397
0.9015
0.8862
0.9462
0.9581
0.9717
0.9659
0.9151

ref3

1idy
1r69
1ubi
1wit
1uky
kinase
1ajsA
1pamA
1ped
yr
4enl

27
23
22
19
24
23
28
19
21
21
19

60
78
97
102
220
287
396
511
388
482
427

0.6010
0.7090
0.3860
0.7580
0.4680
0.8280
0.3110
0.8350
0.8130
0.5130
0.8000

0.5990
0.7330
0.4140
0.8730
0.4810
0.8900
0.4530
0.7880
0.8930
0.6510
0.8660

0.4600
0.8784
0.6606
0.8895
0.6393
0.8912
0.5422
0.9236
0.9131
0.7278
0.8158

ref4

1dynA
kinase2

6
18

848
468

0.0330
0.3840

0.0330
0.5420

0.8000
1.0000

ref5

2cba
s51

8
15

328
301

0.8520
0.8350

0.8350
0.7430

0.9875
0.9814

ref1

ref2

mean ± SD
a.

0.7633 ± 0.2213 0.7734 ± 0.2067

0.8509 ± 0.1943

SN: Sequence Number. b avgSL: average Sequence Length.

scores. Table IV also shows the same conclusion in terms of TC
metric.
However, Table IV shows IMSA produces better alignments
in terms of SP metric except in the fourth test dataset BB4 of
BAliBASE 3.0. Perhaps, the reason is that in IMSA, the objec-

TABLE II
STATISTICS TEST OF TABLE I WITH A WILCOXON SIGNED RANK TEST

Negative Ranks
Positive Ranks
Tiesb
Z
Asymp. Sig. (2-tailed)
Test decision (Null Hypothesis)
a

MOMSA-W–GAPAM

MOMSA-W–VDGA

10
46
0
−4.519a
6.2e–6
reject

12
44
0
−4.454a
8.4e–6
reject

Based on negative ranks. b It means they are equivalent.

Fig. 9. Overall performance of MOMSA and the other algorithms on selected
datasets.

tive function is the WSPs with affine gap penalties. According to
[37], there exists a bias that the alignment algorithms could tend
to have higher agreement with BAliBASE alignments due to the
use of substitution matrices or gap penalty functions. Therefore,
IMSA tends to obtain the alignments with higher SP scores. It
also shows that efforts should be made on improving the accuracy of alignments in terms of SP. Another interesting thing we
can observe from Tables III and IV is that the performance is
quite different for MOMSA-W and IMSA when testing them
with different subsets. That is because BAliBASE benchmarks
provide different types of alignment problems with different
characters. The test data BB11 that the similarity among the
sequences is less than 20% is a challenge for MOMSA-W and
IMSA.
3) Comparison of MOMSA With the State-of-the-Art Alignment Algorithms: In order to further evaluate the performance
of the proposed MOMSA, we report the comparison among
MOMSA and some of the widely used alignment algorithms,
such as MSAprobs [38], Probalign [39], MAFFT [14], Procons
[12], Clustal omega [13], T-Coffee [26], Kalign [16], MUSCLE
[10], FSA [11], Dialign [40], PRANK [8], and CLUSTALW
[7]. Table V shows the average TC scores of these algorithms
on six subsets of BAliBASE 3.0. The data used in Table V is
drawn from [13], except the data about MOMSA-W. The proposed MOMSA is the eighth best aligner, which is better than
MUSCLE, FSA, Dialign, PRANK, and CLUSTALW in terms
of the average TC scores. The top aligner is MSAprobs, which
achieves the highest SP and TC scores on almost all the subsets
of BAliBASE 3.0. The fastest method is Kalign2, the slowest
one is PRANK. MOMSA is the second slowest aligner, which

ZHU et al.: NOVEL APPROACH TO MULTIPLE SEQUENCE ALIGNMENT USING MULTIOBJECTIVE EVOLUTIONARY ALGORITHM

725

TABLE III
ALIGNMENT ACCURACIES OF MOMSA-W AND IMSA ON THE BALIBASE 2.0
ref1(82)
Alignment algorithms
MOMSA-W
IMSA
a

ref2(23)

ref3(12)

ref4(12)

ref5(12)

Total(141)

SP

TC

SP

TC

SP

TC

SP

TC

SP

TC

SP

TC

0.844
0.834

0.771
0.653

0.925
0.921

0.557
0.413

0.766
0.786

0.488
0.362

0.871
0.730

0.617
0.319

0.936
0.730

0.802
0.319

0.861± 0.181a
0.821± 0.09

0.702± 0.305
0.463± 0.069

For these two algorithms, we report mean and standard deviation.

TABLE IV
ALIGNMENT ACCURACIES OF MOMSA-W AND IMSA ON THE BALIBASE 3.0
BB11(38)
Alignment algorithms
MOMSA-W
IMSA

BB12(44)

BB2(41)

BB3(30)

BB4(49)

BB5(16)

Total(218)

SP

TC

SP

TC

SP

TC

SP

TC

SP

TC

SP

TC

SP

TC

0.496
0.5638

0.379
0.3397

0.848
0.866

0.814
0.7119

0.784
0.869

0.362
0.3335

0.694
0.7565

0.371
0.3245

0.763
0.753

0.534
0.3899

0.683
0.7628

0.418
0.3823

0.722±0.183
–

0.500±0.309
–

“–” means the data is not provided in [32].

TABLE V
AVERAGE TC SCORES OF SEVERAL ALGORITHMS ON BALIBASE 3.0
Alignment algorithms
MSAprobs
Probalign
MAFFT(auto)
Procons
Clustal omega
T-Coffee
Kalign
MOMSA-W
MUSCLE
MAFFT(default)
FSA
Dialign
PRANK
CLUSTALW

Average Score(218)

BB11 (38)

BB12 (44)

BB2 (41)

BB3 (30)

BB4 (49)

BB5 (16)

Total time(s)

0.607
0.589
0.588
0.558
0.554
0.551
0.501
0.500
0.475
0.458
0.419
0.415
0.376
0.374

0.441
0.453
0.439
0.417
0.358
0.41
0.365
0.379
0.318
0.318
0.258
0.27
0.265
0.223

0.865
0.862
0.831
0.855
0.789
0.848
0.79
0.814
0.804
0.749
0.818
0.696
0.68
0.712

0.464
0.439
0.45
0.406
0.45
0.402
0.36
0.362
0.35
0.316
0.187
0.292
0.257
0.22

0.607
0.566
0.581
0.544
0.575
0.491
0.476
0.371
0.409
0.425
0.259
0.312
0.321
0.272

0.622
0.603
0.605
0.532
0.579
0.545
0.504
0.534
0.45
0.48
0.474
0.441
0.36
0.396

0.608
0.549
0.591
0.573
0.533
0.587
0.435
0.418
0.46
0.496
0.398
0.425
0.356
0.308

12382
10095.2
1475.4
13086.3
539.91
81041.5
21.88
110289
789.57
68.24
53648.1
3977.44
128355
766.47

takes about 110 000 s. It shows that efforts should be made
on improving the accuracy of alignments and reducing the running time for the proposed MOMSA. It should be noted that
the parameters of the popular alignment methods have been
optimized. In other words, MSA practitioners should carefully
select the proper parameters when using these aligners, but the
proposed MOMSA does not need to consider it, because the
default parameters of MOMSA are used.
4) Scalability of the Computational Cost and Quality of
Alignments: For investigating the scalability of the proposed
MOMSA in terms of computational cost and quality of alignments with the sequence number, we need a benchmark that
has large alignments w.r.t the number of sequences. However,
the BAliBASE benchmarks we used do not qualify. HomFam
dataset is created by Sievers et al. which has large alignments
[41]. Therefore, we select HomFam falimies instead of using
the previous benchmarks. We select a large family retroviral
proteinase (RVP) in HomFam as our test data. The maximum
length of the protein family RVP is 124. To test the scalability
of the computational cost with the sequences length increases,

Fig. 10. Running time of MOMSA as successively more nonreference sequences are added.

we copy the protein family RVP to expand it. We test MOMSA
for five times. Fig. 10 shows the mean running time as the
sequences are added. Fig. 11 plots the changes of TC scores
with the increase of the number of sequences for MOMSA,
Kalign, FFT, and Clustal omega. Fig. 12 shows mean running

726

IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 20, NO. 2, MARCH 2016

Fig. 11. TC scores obtained by MOMSA, Kalign, FFT, and Clustal omega as
successively more nonreference sequences are added.

tiobjective optimization problem, we use MOEA/D framework
as our optimizer, and a new population initialization and a novel
mutation operator are developed. We have compared our proposed MOMSA algorithm with GAPAM, VDGA, and IMSA,
which are based on evolutionary algorithms, on the widely used
datasets BAliBASE 2.0 and 3.0. It experimentally shows that
the proposed MOMSA achieves better alignments than VDGA
and GAPAM. MOMSA produces better alignments than IMSA
in terms of TC scores, but worse in terms of SP score. Finally,
we also compare MOMSA with the state-of-the-art aligners on
BAliBASE 3.0. MOMSA provides comparable alignments in
terms of TC scores, which is the eighth best one among 15
aligners. It should be noted that our proposed MOMSA can
produce more than a single alignment for each MSA to provide
more than one choice for MSA practitioners. However, the running time of MOMSA is a little long. Therefore, how to reduce
the running time of the MOMSA algorithm is our future work
and it is under way currently.

ACKNOWLEDGMENT
The authors would like to thanks the anonymous reviewers,
for their useful comments.

Fig. 12. Running time of MOMSA as the length of the unaligned sequences
increases.

time as the sequences length increases. In Figs. 10 and 11, “0”
means the base alignment, which has no added nonreference
sequences. From Fig. 10, it can be seen that when the number
of the added sequences is less than 200, the implementing time
of MOMSA increases slowly. Fig. 11 indicates that the alignment accuracy of MOMSA falls very slowly as more randomly
selected nonreference sequences are added, and when the number of the added sequences is more than 200, MOMSA is the
second best aligners. Fig. 12 reveals that the implementing time
increases linearly with the increase of the sequences length.
Overall, MOMSA shows good scalability of the computational
cost and quality of alignments with the number and length of
the unaligned sequences.
V. CONCLUSION
How to construct a model of MSA is of vital importance for
finding a biological correct alignment. Traditionally, MSA problem is formulated as a single-objective optimization problem,
such as GAPAM, VDGA, IMSA, etc., but it leads to two drawbacks: first, it is complicated to choose the parameters of fitness
function; second, there exists some alignments with same fitness
function value, but these algorithms only find one of them. For
avoiding the limits by a single-objective modeling approach,
this paper proposed a MOMSA algorithm that views MSA as a
multiobjective optimization problem to find a set of nondominated solutions for the decision maker, and then obtain further
a good alignment by a metric, such as WSPs. To solve the mul-

REFERENCES
[1] C. Notredame, “Recent progress in multiple sequence alignment: A survey,” Pharmacogenomics, vol. 3, no. 1, pp. 131–144, Jan. 2002.
[2] D. Przybylski and B. Rost, “Alignments grow, secondary structure prediction improves,” Proteins Struct. Funct. Genet., vol. 46, no. 2, pp. 197–205,
Feb. 1, 2002.
[3] J. Taheri and A. Zomaya, “RBT-GA: A novel metaheuristic for solving
the multiple sequence alignment problem,” BMC Genomics, vol. 10 (S1),
p. S10, 2009.
[4] W. Lusheng and J. Tao, “On the complexity of multiple sequence alignment,” J. Comput. Biol., vol. 1, no. 4, pp. 337–348, 1994.
[5] S. B. Needlema and C. D. Wunsch, “A general method applicable to search
for similarities in amino acid sequence of 2 proteins,” J. Mol. Biol., vol.
48, no. 3, pp. 443–453, 1970.
[6] D. F. Feng and R. F. Doolittle, “Progressive sequence alignment as a
prerequisite to correct phylogenetic trees,” J. Mol. Evol., vol. 25, no. 4,
pp. 351–360, 1987.
[7] J. D. Thompson, D. G. Higgins, and T. J. Gibson, “CLUSTAL-W: Improving the sensitivity of progressive multiple sequence alignment through
sequence weighting, position-specific gap penalties and weight matrix
choice,” Nucleic Acids Res., vol. 22, no. 22, pp. 4673–4680, Nov. 11,
1994.
[8] A. Loytynoja and N. Goldman, “webPRANK: A phylogeny-aware multiple sequence aligner with interactive alignment browser,” BMC Bioinformat., vol. 11, p. 579, 2010.
[9] R. C. Edgar, “MUSCLE: A multiple sequence alignment method with
reduced time and space complexity,” BMC Bioinformat., vol. 5, p. 113,
Aug. 19, 2004.
[10] R. C. Edgar, “MUSCLE: Multiple sequence alignment with high accuracy
and high throughput,” Nucleic Acids Res., vol. 32, no. 5, pp. 1792–1797,
Mar. 2004.
[11] R. K. Bradley, A. Roberts, M. Smoot et al., “Fast statistical alignment,”
PLoS Comput. Biol., vol. 5, no. 5, p. e1000392, 2009.
[12] C. B. Do, M. S. P. Mahabhashyam, M. Brudno and S. Batzoglou, “ProbCons: Probabilistic consistency-based multiple sequence alignment,”
Genome Res., vol. 15, no. 2, pp. 330–340, Feb. 2005.
[13] F. Sievers, A. Wilm, D. Dineen, T. J. Gibson, K. Karplus, W. Li, R.
Lopez, H. Mcwilliam, M. Remmert, J. Soding, J. D. Thompson, and D. G.
Higgins “Fast, scalable generation of high-quality protein multiple sequence alignments using clustal omega,” Mol. Syst. Biol., vol. 7, p. 539,
Oct. 2011.

ZHU et al.: NOVEL APPROACH TO MULTIPLE SEQUENCE ALIGNMENT USING MULTIOBJECTIVE EVOLUTIONARY ALGORITHM

[14] K. Katoh and D. M. Standley, “MAFFT: Multiple sequence alignment
software version 7: Improvements in performance and usability,” Mol.
Bio. Evol., vol. 30, no. 4, pp. 772–780, Apr. 2013.
[15] T. Lassmann and E. L. L. Sonnhammer, “Kalign—An accurate and
fast multiple sequence alignment algorithm,” BMC Bioinformat., vol. 6,
p. 298, Dec. 12, 2005.
[16] T. Lassmann, O. Frings, and E. L. L. Sonnhammer, “Kalign2: Highperformance multiple alignment of protein and nucleotide sequences allowing external features,” Nucleic Acids Res., vol. 37, no. 3, pp. 858–865,
Feb. 2009.
[17] J. Kim, S. Pramanik, and M. J. Chung, “Multiple sequence alignment using simulated annealing,” Comput. Appl. Biosci., vol. 10, no. 4,
pp. 419–426, Jul. 1994.
[18] C. Notredame and D. G. Higgins, “SAGA: Sequence alignment by genetic
algorithm,” Nucleic Acids Res., vol. 24, no. 8, pp. 1515–1524, Apr. 15,
1996.
[19] J. Sun, X. Wu, W. Fang, Y. Ding, H. Long, and W. Xu, “Multiple sequence alignment using the hidden Markov model trained by an improved
quantum-behaved particle swarm optimization,” Inf. Sci., vol. 182, no. 1,
pp. 93–114, 2012.
[20] W. Chen, B. Liao, W. Zhu, and X. Xiang, “Multiple sequence alignment
algorithm based on a dispersion graph and ant colony algorithm,” J. Comput. Chem., vol. 30, no. 13, pp. 2031–2038, Oct. 2009.
[21] Z. J. Lee, S.-F. Su, C.-C. Chuang, and K. H. Liu, “Genetic algorithm with
ant colony optimization (GA-ACO) for multiple sequence alignment,”
Appl. Soft Comput., vol. 8, no. 1, pp. 55–78, Jan. 2008.
[22] C. Gondro and B. P. Kinghorn, “A simple genetic algorithm for multiple
sequence alignment,” Genetic. Mol. Res., vol. 6, no. 4, pp. 964–982, 2007.
[23] F. Naznin, R. Sarker, and D. Essam, “Progressive alignment method using
genetic algorithm for multiple sequence alignment,” IEEE Trans. Evol.
Comput., vol. 16, no. 5, pp. 615–631, Oct. 2012.
[24] F. Naznin, R. Sarker, and D. Essam, “Vertical decomposition with genetic
algorithm for multiple sequence alignment,” BMC Bioinformat., vol. 12,
p. 353, 2011.
[25] C. Notredame, L. Holm, and D. G. Higgins, “COFFEE: An objective function for multiple sequence alignments,” Bioinformatics, vol. 14,
no. 5, pp. 407–422, 1998.
[26] C. Notredame, D. G. Higgins, and J. Heringa, “T-coffee: A novel method
for fast and accurate multiple sequence alignment,” J. Mol. Bio., vol. 302,
no. 1, pp. 205–217, Sep. 8, 2000.
[27] O. O’Sullivan, K. Suhre, C. Abergel, D.G. Higgins, and C. Notredame,
“3DCoffee: Combining protein sequences and structures within multiple
sequence alignments,” J. Mol. Bio., vol. 340, no. 2, pp. 385–395, Jul. 2,
2004.
[28] S. Henikoff and J. G. Henikoff, “Amino-acid substitution matrices from
protein blocks,” in Proc. Nat. Acad. Sci. United States Amer., vol. 89,
no. 22, pp. 10915–10919, Nov. 15, 1992.

727

[29] M. O. Dayhoff, “A model of evolutionary change in proteins,” Atlas Protein Sequence, vol. 5, pp. 345–352, 1978.
[30] J. J. Shu, K. Y. Yong, and W. K. Chan, “An improved scoring matrix for
multiple sequence alignment,” Math. Problems Eng., vol. 2012, pp. 1–9.
[31] K. D. Nguyen and P. Yi, “An improved scoring method for protein residue
conservation and multiple sequence alignment,” IEEE Trans. NanoBiosci.,
vol. 10, no. 4, pp. 275–285, Dec. 2011.
[32] V. Cutello, G. Nicosia, M. Pavone, and L. Prizzi, “Protein multiple sequence alignment by hybrid bio-inspired algorithms,” Nucleic Acids Res.,
vol. 39, no. 6, pp. 1980–1992, Mar. 2011.
[33] Q. Zhang and H. Li, “MOEA/D: A multiobjective evolutionary algorithm
based on decomposition,” IEEE Trans. Evol. Comput., vol. 11, no. 6,
pp. 712–731, Dec. 2007.
[34] R. Thomsen and W. Boomsma, “Multiple sequence alignment using
SAGA: Investigating the effects of operator scheduling, population seeding, and crossover operators applications of evolutionary computing,”
Lecture Notes in Computer Science, G. Raidl, S. Cagnoni, J. Branke et al.
Eds. Berlin, Germany: Springer, 2004, pp. 113–122.
[35] A. Bahr, J. D. Thompson, J. C. Thierry, and O. Poch, “BAliBASE (benchmark alignment dataBASE): Enhancements for repeats, transmembrane
sequences and circular permutations,” Nucleic Acids Res., vol. 29, no. 1,
pp. 323–326, Jan. 2001.
[36] J. D. Thompson, P. Koehl, R. Ripp, and O. Poch, “BAliBASE 3.0: Latest
developments of the multiple sequence alignment benchmark,” ProteinsStruct. Funct. Bioinformat., vol. 61, no. 1, pp. 127–136, Oct. 2005.
[37] R. C. Edgar, “Quality measures for protein alignment benchmarks,” Nucleic Acids Res., vol. 38, no. 7, pp. 2145–2153, Apr. 2010.
[38] Y. Liu, B. Schmidt, and D. L. Maskell, “MSAProbs: Multiple sequence
alignment based on pair hidden Markov models and partition function
posterior probabilities,” Bioinformatics, vol. 26, no. 16, pp. 1958–1964,
Aug. 15, 2010.
[39] U. Roshan and D. R. Livesay, “Probalign: Multiple sequence alignment
using partition function posterior probabilities,” Bioinformatics, vol. 22,
no. 22, pp. 2715–2721, Nov. 15, 2006.
[40] B. Morgenstern, K. Frech, A. Dress, and T. Werner, “DIALIGN: Finding local similarities by multiple sequence alignment,” Bioinformatics,
vol. 14, no. 3, pp. 290–294, 1998.
[41] F. Sievers, D. Dineen, A. Wilm, and D.G. Higgins, “Making automated
multiple alignments of very large numbers of protein sequences,” Bioinformatics, vol. 29, no. 8, pp. 989–995, Apr. 15, 2013.

Authors’ photographs and biographies not available at the time of publication.

