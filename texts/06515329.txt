46

IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 18, NO. 1, JANUARY 2014

Novel Cloud and SOA-Based Framework for
E-Health Monitoring Using Wireless Biosensors
Abdelghani Benharref and Mohamed Adel Serhani

Abstract—Various and independent studies are showing that an
exponential increase of chronic diseases (CDs) is exhausting governmental and private healthcare systems to an extent that some
countries allocate half of their budget to healthcare systems. To
benefit from the IT development, e-health monitoring and prevention approaches revealed to be among top promising solutions. In
fact, well-implemented monitoring and prevention schemes have
reported a decent reduction of CDs risk and have narrowed their
effects, on both patients’ health conditions and on government
budget spent on healthcare. In this paper, we propose a framework
to collect patients’ data in real time, perform appropriate nonintrusive monitoring, and propose medical and/or life style engagements, whenever needed and appropriate. The framework, which
relies on service-oriented architecture (SOA) and the Cloud, allows a seamless integration of different technologies, applications,
and services. It also integrates mobile technologies to smoothly collect and communicate vital data from a patient’s wearable biosensors while considering the mobile devices’ limited capabilities and
power drainage in addition to intermittent network disconnections.
Then, data are stored in the Cloud and made available via SOA
to allow easy access by physicians, paramedics, or any other authorized entity. A case study has been developed to evaluate the
usability of the framework, and the preliminary results that have
been analyzed are showing very promising results.
Index Terms—E-health, body sensor network, chronic disease
(CD) risk prevention, nonintrusive monitoring.

I. INTRODUCTION
HERE is an alarming and growing number of people with
chronic diseases (CDs) in many countries all over the
world. For example, according to the statistics from the UAE
Ministry of health published in 2010 [1], over 25% of deaths
in the country are caused by cardiovascular diseases. Risk factors that cause these diseases are multiple and include, but not
limited to, cholesterol, diabetes, high blood pressure, physical
inactivity, smoking, overweight, and obesity.
To address the rising incidence of CDs and their associated complications, well-designed monitoring and prevention
approaches can help elucidating the main reasons of CDs and
reducing the risk of their occurrence. These approaches, benefiting from the tremendous advances in healthcare services,

T

Manuscript received December 8, 2012; revised March 8, 2013; accepted May
1, 2013. Date of publication May 13, 2013; date of current version December
31, 2013.
A. Benharref is with the University of Wollongong in Dubai, Dubai 20183,
UAE (e-mail: abdelgha@uow.edu.au).
M. A. Serhani is with the United Arab Emirates University, Al-Ain 15551,
UAE (e-mail: serhanim@uaeu.ac.ae).
Color versions of one or more of the figures in this paper are available online
at http://ieeexplore.ieee.org.
Digital Object Identifier 10.1109/JBHI.2013.2262659

are helping in revolving many of the earlier mortal diseases
into CDs. This has led to an increasing demand for long-term
continuous care, especially for elderly. Consequently, this has
triggered growing costs for both the society and caretakers to
an extent that, at the end, may lead to potential undersupply of
healthcare services.
Following this trend, western healthcare authorities and industries are undergoing fundamental changes. They are shifting
from hospital-centric services to a more ubiquitous and ambulatory system (with homecare, day-care clinics, remote healthcare); whereby, the treatment of CDs is actively involving patients as well as their surrounding environment. The emergence
of Internet-based e-health services for instance, allows patients
and healthcare professionals to have easy access to important
health information anytime, anywhere, and in efficient ways.
In CDs, continuous monitoring of subjects is a very important
element in detecting diseases’ symptoms as soon as they occur.
Therefore, it can mitigate the impact and the consequences that
these diseases may cause. Geo-localization tracking is also an
essential mechanism in locating subjects while they are away
mainly when emergency actions are to be taken (e.g., hospitalization).
This paper presents a novel electronic healthcare system,
called Service Oriented and Cloud-Based e-health System
(SOCBeS), for tracking, monitoring and prevention of CDs
and reducing their impact. The system relies on the established
standardized concepts of service-oriented architecture (SOA)
and cloud environment. On one hand, SOA has been proven to
be an adequate solution for integrating heterogeneous systems
and technologies, allowing application-to-application communication on the Internet, reducing cost of integration, and
making data and services available to different stakeholders.
On the other hand, using cloud infrastructures, platforms, and
services maximizes data and system availability and reliability
while reducing infrastructure costs. Healthcare organization
adopting Cloud-based solution will be very beneficial in terms
of massive patient’s data storage, processing and management.
It will allow these organizations to provide cost effective,
faster, reliable, available and scalable services. SOCBeS will
allow continuous (semi) automatic data gathering, on-the-fly
monitoring, and taking proactive measures to identify risk
factors and prevent the subject from unfortunate severe heath
consequences. Being developed around the Cloud and SOA
open technologies, the system can be easily integrated with
other healthcare systems, which allows high interoperability
and dynamic integration between heterogeneous systems, low
cost, and high scalability in managing growing number and
size of patient’s data and services.

2168-2194 © 2013 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See http://www.ieee.org/publications standards/publications/rights/index.html for more information.

BENHARREF AND SERHANI: NOVEL CLOUD AND SOA-BASED FRAMEWORK FOR E-HEALTH MONITORING USING WIRELESS BIOSENSORS

47

Monitoring patients in SOCBeS serves three purposes:
1) early detection of CDs; 2) follow up patients who are confirmed to have CDs; and 3) prevent and coach patients that
are prone to have some sort of CDs. All these cases involve
the usage of sensing technologies along with communication
infrastructure to sense and collect important physiopathology
measures of a subject under observation. It addresses topics such
as collecting sensory information, refining sensory information,
and making intelligent decisions made available through the
SOCBeS services. Discrepancies between measured data and
normal thresholds trigger immediate analysis and assessment of
the subject’s data by physicians to find out whether the subject
has, or not, a CD and if additional measures are to be taken.
Remaining sections of the paper are organized as follows: the
next section presents a problem formulation of e-health systems
for monitoring and tracking CDs. Section III presents the state of
the art and discusses their strengths and limitations and positions
the main innovative contributions of our proposed framework.
Section IV identifies the fundamental requirements that a continuous automatic monitoring solution should satisfy. Section V
presents and discusses SOCBeS architecture. In Section VI, a
prototype and proof of concept is presented and results are discussed. Finally, Section VII concludes the paper and highlights
ongoing and future works.

sensors even though they are contained within the same device.
Each sensor is represented by a couple Si , HPi , where Si
represents the sensor’s ID and HPi defines the health parameter
that the sensor can measure. A health parameter is defined by
a quadruple HPi , min, n, max where HPi is the parameter
ID, min is the minimum value tolerated, n is the normal value
as measured on a disease-free person, and max is the maximum
tolerated value. For parameters without min (or max) value, the
quadruple will be noted HPi , ∞, n, max (or HPi , min, n,
∞).
From a patient’s point of view, a patient under monitoring
(PUM) is represented by a tuple VS (Sj , HPj ), Mi , Di , where
VS is a vector of |VS | sensors measuring |VS | parameters, with
|VS | being the cardinality of VS , Mi is the application connected
to those sensors, and Di is the assigned doctor (physician).
From a hospital point of view, a hospital has n physicians and
nurses handling m patients under monitoring {Vh (P U Mi )/0
< i ≤ m}. Each physician or nurse pj is responsible of Vpj
patients {Vpj (P U Mi )/ 0 < i < k and Vpj ⊂ Vp and V p =
U (Vpj (1< j ≤m ) ))}. If we denote health measurements of all parameters of a subject i during a monitoring period from time
ts to time te by HMits→te , we then need to find the soonest
and smallest HMi that detects risks R (CDs or minimizes their
impacts on subject i). HMi has to satisfy the following property.
If HMi ts→te detects a CD or a risk with patient i, then

II. PROBLEM FORMULATION

HMits→tb /HMits→tb → R and tb < te

CDs monitoring process starts by initializing monitoring activities such as what to monitor, when to monitor, and threshold
values. Initialization can be started by the patient, physician,
nurse, or associated mobile application. If initialization is successful, the system enters a repetitive loop that will only terminate when the monitoring period expires or if the patient is
hospitalized. Inside that loop, each measured value is compared
to the normal thresholds range: if within range, the system waits
for sometime before resuming monitoring. If out of range, there
are three different actions:
1) If the discrepancy between measured value and thresholds is high to an extent that the subject needs hospitalization, the subject should be geolocalized, then the position
will be sent to paramedics so that ambulances can reach
him/her as quickly as possible.
2) If the discrepancy is high but the subject can get herself/himself to a physician, they will be instructed and
guided to do so.
3) In the case where the discrepancy is low and can be levitated just by following an appropriate lifestyle, customized
lifestyle’s advices are sent to the subject.
In the three cases, monitoring activities keep going until the
end of desired monitoring period or hospitalization of the patient.
In the following subsections, we present a formulation of
the health-monitoring problem based on state of the art mobile
technologies including sensors, mobile applications, SOA, and
Cloud. A sensor usually measures a single health parameter.
If a sophisticated sensor can measure two (or more) different
parameters, it will be considered as two (or more) separate

where HMjts→tb → R means HMits→tb detects R.
The aforementioned property should be read as: there is no
tb < te such that HMits→tb → R. That is, there is no sequence
of measurements performed between ts and tb (i.e., before te)
inclusively that detects the CD or its risks for patient i. To detect
R, measurements have to be taken from ts until te, beyond tb.
For all m subjects (i.e., for a hospital), we need to find HM
that is defined as follows:
HM = {U {HMi }, 0 < i < m}.

(1)

(2)

The process of monitoring and tracking m patients with CDs
can be formally specified as in Fig. 1.
III. RELATED WORK
Nowadays, several e-health centers have emerged and many
initiatives have been launched in USA, Canada, U.K., EU, as
well as in many developing countries in order to improve healthcare services and optimize medical resources. At the core of all
these initiatives is the investment in modern ICT infrastructures
to connect hospitals, clinics and healthcare organizations, patients, and professionals so that the exchange of medical data
can be possible, accurate, and reliable. This has also been made
possible due to tremendous development in wearable body sensors capable of reading various health parameters directly from
patients’ body with acceptable levels of accuracy [2].
The increasing demand for e-health services has led to many
research efforts [3]. Few, yet immature, architectures have
been proposed for e-health or other healthcare related systems’
purposes. Some of them are used in special areas, such as

48

Fig. 1.

IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 18, NO. 1, JANUARY 2014

CDs tracking and monitoring process.

trauma [4], cardiology [5], and neurosurgery, pathology treatment. Some are used with special purposes, such as emergency
and patient monitoring [6]. With the advances in wireless and
mobile technologies, there are also few wireless-based e-health
systems (i.e., m-Health system) developed in [7]. The common
feature of these systems is that they only provide limited or special services to end users. They are not transparent to involved
parties, difficult to integrate with existing healthcare systems,
and do not cater varying monitoring parameters.
Related works can be classified into two categories: solutions
and architectures that emerged from healthcare industry and
those that have been developed within academia. In the rest
of this section, we describe the main characteristics of these
solutions, conduct a thorough comparison based on relevant
criteria of importance to e-health architectures, and finally, we
highlight how a comprehensive e-health based on wireless body
sensor network (WBSN) should be designed and implemented
while highlighting the main challenges that are involved in its
design and development.
Under the umbrella of industrial solutions, many governmental initiatives led to the development of large-scale, e-healthbased systems to help mainly elderly and people with CD to
be continuously monitored from home. Most of these solutions
however, were developed to enable vital signs measurements,
processing, and real-time decision support (e.g., increase a medication dose) [8]–[11].

From academia, several research works and initiatives have
studied the issue and challenges of building somehow comprehensive e-health solutions. These solutions differ in many aspects: 1) the solution used to tackle integration issues; 2) the heterogeneity of different systems; and 3) the type of middleware,
framework, or architecture used to build the integrated e-health
system. They mostly used WBSN to collect real-time patient’s
vital signs, generate health status feedbacks, and send alert in
case of severe health threatening situation. Indifferently, these
solutions consider some key challenges related for instance, to
the capabilities of sensing platform being used, network and
communication interruption, power consumption, preservation
of biosensors, mobility management, data processing, and management.
For research solutions that tackle the integration and the heterogeneity issue in e-health systems, we classify solutions based
on the implementation standard on which they rely for instance
common object request broker architecture (CORBA) [12], [13],
SOA [14], [15], and Health Level Seven (HL7) [16] used as the
underlying integration infrastructure. CORBA [17] has been
known as not flexible solution to allow the integration of nonCORBA systems, and HL7 [16] also is renowned as message
exchange standard that does not provide a complete integration
solution at lower layers of different subsystems. SOA has been
proven to be an appropriate solution that allows varying organizations leverage their shared services to automate multiple
business processes and reinforce overall interoperability [18].
Hsieh et al. [19] proposed a distributed framework of a Webbased telemedicine system which addresses two types of servers
namely Web servers and data servers. This framework is based
on CORBA technology and a distributed database fragmented on
different sites. Unfortunately, the system is not flexible to allow
the integration of non-CORBA systems; therefore, it requires an
intermediary middleware to handle the heterogeneity between
different heath systems as well as a huge development effort to
adapt the system to the integrated system requirements.
Omar and Taleb-Bendiab [20] proposed a multilayer SOAbased e-health services architecture. It consists of six main components responsible for defining interactions among different
layers. Unfortunately, the system has not been developed; it
states an architectural design without detailing the implementation and its complex challenges. Kart et al. [15] described a
distributed e-healthcare system that uses SOA as a mean of designing, implementing, and managing healthcare services. The
system includes a clinic module, a pharmacy module, and patient’s interfaces, which are implemented as Web services. Various devices can interact with these modules, including desktop
and server computers, personal digital assistants, smartphones,
and even electronic medical devices, such as blood pressure
monitors.
Yang et al. [21] investigated how healthcare entities, using
SOA, can leverage their common services to automate multiple
business processes and strengthen the complete interoperability.
Kart et al. [15] designed and developed a SOA-based platform
for home-care delivery to patient with CDs. This paper shares
some of the goals with our project with regards to monitoring
patients with CDs. However, it differs in many aspect related

BENHARREF AND SERHANI: NOVEL CLOUD AND SOA-BASED FRAMEWORK FOR E-HEALTH MONITORING USING WIRELESS BIOSENSORS

to data dissemination through Cloud environment, power conservation, performance consideration, and value-added services,
including prevention service (e.g., lifestyle adjustment, diet program).
Both categories of e-health-based WBSN architectures that
emerged from industry and academia described earlier exhibit
some combinations of the following weaknesses:
1) Less transparent to different healthcare stakeholders.
2) Difficult to configure, deploy, and integrate with other
healthcare systems.
3) Lack clear separation between the data and the business
logic implementation.
4) Less flexible to handle the heterogeneity of different
healthcare systems.
5) Demand huge development effort to adapt the system to
the integrated system requirements.
6) Unable to fully integrate different biosensors for different vital signs and from different vendors in one solution/architecture.
7) Resilient to mobile technologies integration because of
the limited processing capabilities of the mobile devices
(make use of REST WS).
8) Slightly make use of varying Cloud services [Software
as a Service (SaaS), Infrastructure as a Service (IaaS),
and Platform as a Service (PaaS)] to benefit from storage,
and processing capabilities of the Cloud infrastructure and
services.
A reliable and self-configurable architecture for efficient
health monitoring architecture based on WBSN must address
the challenges mentioned earlier. Therefore, it should support
data collection, perform noninvasive monitoring, and propose
medical and/or lifestyle adjustment whenever needed.
The following are some of the fundamental benefits our proposed architecture is developed to offer, which are lacking in
related works presented earlier:
1) Allow noninvasive sensing that does not burden the subject
under monitoring and makes him/her feel that nothing is
taking place at his/her private environment.
2) Easy to integrate with any other healthcare system and
easy to augment with new services as it is fully based on
Web services.
3) Follow the logic of decomposition-based layers to separate between core business logic, the detail of the implementation, the underlying sensing platform, and the upper
application layer services.
4) Rely on the usage of Cloud services while guarantying
high Quality of Service (QoS), data privacy and security,
and management.
5) Integrate different sensing technologies by means of creating interfaces that allow the adoption of different protocols
including for instance Bluetooth, 3rd generation (3G), and
Wi-Fi.
6) Use mobile device for sensing and data gathering while
optimizing (minimizing) device power consumption and
the limited processing capabilities by using RESTful Web
services for the business logic and the Cloud for data
storage and processing.

49

7) Allow data synchronization among different storage
repositories and Cloud data centers.
8) Provide some value-added services that include for example automated preventive plan, monitoring services, and
QoS guarantee.

IV. USER AND ARCHITECTURAL REQUIREMENTS
Collecting and sharing private health information have many
sensitive requirements. These requirements can be classified
under two interrelated categories: 1) user requirements and
2) architectural requirements.
A. User Requirements
From a user point of view, collecting and sharing health information should satisfy at least the following properties:
1) Nonintrusive sensors: Traditional gathering of health information requires very intrusive approaches that are
mainly centered on samples (e.g., blood sample and urine
sample) that are taken directly from the subject’s body.
However, some users might highly prefer to use nonintrusive ways.
2) Context aware: The collected health data as well as the
frequency at which these data are collected should be
clever enough to consider various contexts (e.g., type of
vital monitored signs, the situation of the subject to be
monitored).
3) Data accuracy: As all kind of measurements includes error
margins, health/body information measurement should be
very accurate as a slightly small variation might lead to
fatal health issues. Readings’ errors margins have to be
controlled.
4) Availability: The platform is used by different actors who
have different access rights and requirements (time, location), and thus, should be available to all users anytime
and anywhere.
5) Performance: The platform should offer satisfying performance to end users. Response time in all operations should
be as low as possible.
6) Data privacy: Health data privacy of all actors especially
users under monitoring should be protected. The platform
should provide proven mechanisms to protect privacy.
7) Confidentiality: Any information collected or transiting
by the platform should be confidential.

B. Architectural Requirements
User requirements discussed in previous section have
straightforward implications on architectural requirements.
However, the later includes in addition, extra requirements related to the underlying architecture that are completely transparent to end users. Architectural requirements include:
1) Sensor-based: Nonintrusive, transparent measurement and
congregation of health information requires efficient
use of state-of-the-art body sensors capable of reading

50

IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 18, NO. 1, JANUARY 2014

Fig. 2.

2)

3)

4)
5)
6)

7)
8)

SOA and Cloud-enabled architecture for smart noninvasive health monitoring.

appropriate parameters at high precision (e.g., temperature, blood sugar, and blood pressure).
Wireless connectivity: In order to be available anywhere
and to all users in addition to be nonintrusive, the platform
should consist of wireless components as much as possible
mainly those components that interact directly with users
under monitoring.
Cloud-based: In a completely wireless environment where
subjects under monitoring are located all around, availability is an important factor; therefore, distribution of data
and business logic over multiple sites (data centers) is
required.
Responsiveness: The platform should be designed in such
a way that response times are always very low.
Security: Health data should be protected all over the path
from measurement to storing and sharing.
Support for heterogeneity/platform-independent: Different users are using different health systems and should
be able to integrate seamlessly the platform within their
various systems.
Scalability: The architecture should be scalable to support
an increasing and high number of actors and applications.
Robustness: Ability to work in extreme conditions and to
quickly and safely recovers in case of failure.
V. “SOCBES” FRAMEWORK

A. Description
In this section, we describe the key constituents of our framework along with a summary of communications and interactions among them to accomplish the main functionalities of

the framework, namely, e-health data sensing, filtering, storage,
monitoring, and visualization.
The framework is composed of a set of modules each of
which exhibits a set of functionalities and services. Fig. 2 illustrates the framework structure and the main components of each
module. These modules include: Noninvasive sensing module,
SOA and integration submodule, the Cloud environment module, and e-health services and applications module. The valueadded feature of our proposed framework is the full integration
of diversity of technologies and solutions at all levels—from
low-level infrastructure to high-level services and applications.
This will allow smart nonintrusive monitoring of subjects’ vital
signs while maintaining a high level of performance relying on
Cloud value-added services, efficient data gathering and management based on sophisticated sensors and gateways, smooth
integration and interoperability between different technologies
using SOA.
The rest of this section describes each of these modules along
with their main components’ roles and responsibilities within
the framework.
1) Noninvasive Sensing Module: This module is divided into
two layers:
1) Nonintrusive sensing devices (e.g., sensors, mobile devices): These are used to sense one or more health parameters (e.g., blood pressure, blood sugar, body temperature,
and oxygen saturation) without disturbing the patient’s
normal life as such not being aware that sensing activities is taking place. It also includes gateways that serve
in collecting data from sensors, process (e.g., filter), and
store these data on the Cloud data centers. Many sensing
technologies are available nowadays and used to retrieve

BENHARREF AND SERHANI: NOVEL CLOUD AND SOA-BASED FRAMEWORK FOR E-HEALTH MONITORING USING WIRELESS BIOSENSORS

vital information, and then relay these to the nearest device capable (e.g., gateways) to process these health data.
These intermediate relays generally provide an interface
to access and retrieve these data.
2) Communication protocols: These include a wide range of
protocols that are used to transport monitored health data
from sensing devices into the storage module namely the
Cloud data center or the monitoring repositories that might
reside at the SOA and integration module.
2) Cloud Environment Module: This module provides the
underlying infrastructure and platform that host e-health data
and applications. This includes connectivity management, device management, e-health data processing, runtime engine, and
other Cloud based services that support monitoring activities
and their related processes. In fact, Cloud environment offers
the three common categories of services that are IaaS, PaaS, and
SaaS. The IaaS incorporates the physical infrastructure including for instance servers, networks, databases, and block storage. However, the PaaS incorporates other type of entities such
as operating systems, Database Management System (DBMS),
runtime engines, and many other tools. The SaaS represents the
pillar of our framework as it integrates different components that
are used to allow a full integration of heterogeneous healthcare
systems with the monitoring framework. Moreover, it provides
the necessary interfaces to enable an easy access and manipulation of heath data. The Enterprise Service Bus (ESB) is the
main component of this submodule that allows interoperation
and exchange of data among different subsystems.
In addition, to the aforementioned components, the SaaS is
linked with local monitoring repositories in which sensed data
are stored and managed. These repositories are an intermediary
storage environment that implement synchronization mechanisms to synchronize data stored with those stored on Cloud
data center when required (e.g., at each data collection or update).
3) E-Health Services and Applications Module: It consists
of a set of applications and services that are used for the collection, processing, and visualization of monitored health data.
Type of services might include report generation, pattern extraction, data mining tools, data visualization applications, hospital
information systems, mobile applications, and social health.
In addition, to the framework’s modules mentioned earlier,
two silos in the framework of Fig. 2 characterize some key
important aspects of our proposed framework. These include:
QoS-Service Level Agreement (QoS-SLA) and management,
and the Security/Privacy. These knowledge areas are involved
at all levels/modules of the framework involving all the four previously described framework modules. QoS-SLA and management area involves: 1) management processes from the lowest
level modules of the framework (e.g., device management) to
the highest level modules of the framework (e.g., visualization
services), and 2) service-level agreement to guarantee a high
level of QoS and detect any violation of these QoS parameters.
Security and privacy area exhibits a very important aspect of
the framework that should be maintained at every single entity of the proposed solution. Protecting data gathering, storage,
communication, and manipulation by applications and services

51

is very crucial as it deals with private, very sensitive patients’
health data.
B. Monitoring Processes and Main Involved Entities
In this section, we illustrate the main processes and operations
of smart health monitoring. The monitoring life cycle involves
a set of roles and components that include the WBSN built on
the monitored subject (e.g., a patient), a data collection and
processing that includes the data collection and processing that
involves an IaaS module and/or monitoring repositories, SaaS
module, and varying end user applications. The following are
the operations executed within the monitoring process.
1) The WBSN is used to integrate different biosensors that
sense couple of vital signs including blood pressure, blood
sugar, heart rate, and temperature.
2) Different communication protocols can be used to transmit the collected data to different storage and processing
locations. These protocols are based on the sensors used
and the protocols they support (e.g., Bluetooth, Wi-Fi, 3G,
and infrared).
3) Data can be transported and processed using a Cloud IaaS
in which abundant storage and processing services and
resources are available. It can eventually be sent to monitoring repositories (e.g., Databases). Data synchronization
might be needed to keep track of all updates in both locations.
Couples of Web services constitute the SaaS to integrate couple of interfaces that are developed to hide the implementation
detail of the monitoring. These Web services implement business logic to deal with data collection, processing, and clean up
(e.g., filters).
End user applications can be a mobile application, a web portal, a Hospital Information System (HIS), a surveillance center, social networks, or any application that can make use of
monitored data for different purposes, such as decision-making,
mining, and pattern recognition. These applications invoke related Web services to get customized data, generate reports and
statistics, visualize these data, alert physicians in emergency and
severe situations, share statistics and socialize to distribute information about disease awareness and prevention, and eventually,
use data mining schemes for better health diseases management
and intervention.
C. Adaptive Monitoring Scheme
In this paper, health monitoring refers to the process of automatically and semiautomatically collecting patients’ appropriate
health information. The information to collect and frequency at
which it is collected depend on many issues such as the purpose
of monitoring, the patient’s health condition, and the desired
collection pattern. The collected data have to be communicated
on the fly to the backend system. However, if there is no possible
connection, data have to be saved on the mobile application and
then communicated when a connection becomes available. In
some serious circumstances, the system can explicitly ask the
patient to re-initiate the connection. Data collection patterns can
follow one or a combination of the following patterns:

52

IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 18, NO. 1, JANUARY 2014

Fig. 3.

Test bed configuration.

1) Continuous: This type of monitoring offers the highest
level of granularity of collected health data. It consists
of a set of sensors continuously gathering relevant data.
This heavy monitoring pattern is usually used in intensive monitoring situations as, for instance, severe disease
monitoring.
2) On-demand: In this pattern, monitoring is initiated following a request from a controller. A controller is any entity authorized to trigger monitoring and includes: patient,
doctor on duty, and assigned nurse. This pattern is usually considered when available readings are insufficient or
unexpected and more detailed results are needed.
3) Periodic/regular: In this case, monitoring is performed at
regular patterns or intervals. This is usually an automated
and preplanned activity that starts and ends at predefined
dates and times. These are defined by the controller and
can be changed at any time. Periodic monitoring is used
in normal monitoring of patients with known stable conditions and nonhealth-threatening situations.
VI. IMPLEMENTATION AND EXPERIMENTATION RESULTS
To prove the applicability of our framework in real situations,
we have implemented its main components and conducted some
monitoring scenarios. In this set of experimentations, we studied the monitoring of two diabetic patients (e.g., blood sugar).
These patients are equipped with sensors and mobile applications for one patient, the application is developed and deployed
on an iPhone mobile and, for the second patient, the application
is developed and deployed on an Android-based mobile. Both
users are being tracked by a physician using a portal-based
application.
A. Experimentation Test Bed
The test bed in this phase of experimentation is depicted in
Fig. 3 and consists of the following components:
1) Server #1: Core 2 Duo desktop; this server is running the
SOA platform in addition to database. Due to its simplicity,
efficiency, and open source, we are using Glassfish [22] as
the main Web Service container. For similar reasons, we
are using MySQL [23] as our database system.

2) Server #2: High-end, third-generation, i7-based desktop;
this server is mainly running the portal platform and container. This consists of two heavily tested and widely used
containers: Tomcat [24] and Liferay [25]. Moreover, this
server is running apache web server [26] and twiki wiki
server [27]. The Web site and wiki site offer plenty of
information required to use the framework, extend the
framework, or integrate new components into the framework.
3) Microsoft Azure slice: This is cloud storage where health
data are synchronized with the local data on the MySQL
database. Web services can read and write data to and from
the MySQL database or from the Azure
4) Physician view: This consists of a MacBook Pro with
Internet browser (Safari) connected to the portal platform
and able to display various information and portlets. In
this set of experimentation, and through the portal, the
physician is able to monitor patients’ information and to
send them appropriate advices or direct them to appropriate sources of medication or lifestyle activities.
5) iPhone 4: This iPhone is connected to the iBGStar sensor
(blood-sugar-based sensor) and running the iBGStar application [28]. Patients use the sensor’s strips to get their
blood sugar readings. The blood sugar readings are then
entered into our mobile applications.
6) iPhone 4S: It is running the iOS version of the monitoring
application. A more detailed description of the mobile
application is provided in Section VI-A1).
7) Samsung Note (Client Application): this Android-based
smartphone is running the android version of the monitoring application.
To facilitate information exchange and messages parsing,
communications between mobile applications and servers are
all encoded in JavaScript Object Notation (JSON) [29]. JSON
is a lightweight encoding scheme that is now widely preferred
over XML for message exchange on the Internet. Moreover,
communication between mobile applications and the Web services platform (i.e., server #1) are based on Representational
State Transfer (REST). REST [30] has been preferred over Simple Object Application Protocol (SOAP) [31] for communication due to its simplicity and lower overhead compared to
SOAP [32].
1) Mobile App Overview: This application exhibits four
graphical interfaces’ views two of which are depicted in Fig. 4:
the first screenshot is from the iOS application, while the second is from the Android application. Both the applications are
developed while keeping in mind the User eXperience (UX) on
iOS and Android so that users of both platforms benefit from
the ease of use and look and feel that are used too.
We have experienced the solution with couple of users under
monitoring. These experiences revealed that all monitored subjects were not disturbed while being monitored; sometime they
are not even aware that monitoring activities are taking place as
long as they are wearing the sensors. However, there was a need
for a quick introduction and training at the first use of the sensing kit and the mobile application (how to wear the sensing kit
(belt, sensors); how to initiate/stop monitoring, how to navigate

BENHARREF AND SERHANI: NOVEL CLOUD AND SOA-BASED FRAMEWORK FOR E-HEALTH MONITORING USING WIRELESS BIOSENSORS

53

TABLE I
SOME WEB SERVICES OPERATIONS.

Fig. 4.

iOS and Android monitoring screenshots.

through the mobile application to read the monitoring results,
advices, and graphs).
1) My Data: This view shows series of three types of blood
sugar readings: a) readings taken early morning while
fasting; b) readings taken 2 h after meals; and c) readings
taken before going to bed, late evenings. Readings show
up in the view as soon as they are available. Readings’
sources and delay between readings can be configured in
the settings view.
2) Chart: This view dynamically plots a chart of the three
types of readings’ values displayed in the My Data view.
Whenever a new reading is available, it is then plotted.
Three thresholds of relevance to blood sugar are represented by horizontal grids: 100, 200, and 300 mg/dL.
3) Advices: This view shows the latest advices based on recent readings. The physician suggests new advices, which
are then pushed through the backend servers to this mobile
application view. The patient can also explicitly request
latest advices by pressing the icon on top-right of the view.
4) Settings: This view is used to customize data collection
and synchronization between different data sources including the cloud. It consists of a key to start/stop readings
and has two subviews: a) for reading configuration and
b) for data synchronization. Readings can come from three
different sources: sensor to acquire new readings, backend
database, or local repository to review previous readings.
Although time between two consecutive readings is solely
relevant when getting readings from sensors, it can also
be used to illustrate the evolution of previous readings. If
the patient would like to see the whole plot at once, this
value should be then set to zero.
In the data synchronization sub view, the user can instruct
the mobile application to send new readings as soon as they
are available (real-time option). The user can also overwrite the
remote readings database with data from the mobile app (sync
to backend option), can overwrite local data by readings stored
in the backend (sync from backend option), and can also merge
local data with remote data. In the later case, resulting remote
data are coherent with local data with no duplicates.

2) Web Services: End-user mobile apps and the portal make
use of different services offered by the monitoring framework
using a set of Web services deployed on server #1. Table I summarizes the deployed Web services’ operations. The input and
output parameter “Reading” of some of these operations is a
new user-defined type that consists of a value of type float, a
string that describes the type of readings, and a date that indicates when (date and time) the reading was taken. The notation
{Readings} denotes a JSON set of readings.
B. Monitoring Overhead
Although components of the monitoring framework can be
located anywhere on the Internet, in our experimentations, they
are grouped into four groups; each group is located in a single
local area network (LAN). The first group consists of the mobile infrastructure and includes sensors and mobile applications.
The second group consists of server #1 third group consists of
server #2, and the MS Azure cloud is group four. All groups are
connected as follows: groups #2, #3, and #4 are usually connected through wired networks; group #1 is connected to group
#2 through wireless technology (Wi-Fi, 3G, Bluetooth, etc.).
The network overhead due to communication between groups
#2, 3, and #4 can be ignored since exchanged messages are
usually small and network bandwidth in and between nowadays
LANs is very high. However, the network overhead introduced
by communication between groups 1 and 2 has to be considered. We quantitatively and qualitatively discuss the network
overhead introduced by continuous monitoring in the following
sections.
When the mobile application is configured to send new readings as soon as they are available to the backend server (option
real-time enabled via the My Settings view), the number of
messages sent everyday is the same as the number of daily readings. Our experimentation showed that the size of an hyper text
transfer protocol (HTTP) message carrying a REST message
containing one reading encoded in JSON is around 560 B. Even

54

IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 18, NO. 1, JANUARY 2014

Fig. 5.

Monitoring network overhead.

over a slow network (e.g., 3G), this amount of data does not
represent a substantial overhead, as most diabetic patients are
likely to take few daily readings (on an average, three per day).
When synchronizing data to and from the backend database
(last three options in the My Settings view), the overhead is
quite high. In fact, a patient might have readings for months
or even years and synchronizing back and forth will induce a
considerable amount of data. Fig. 5 shows the volume of data
exchanged between the mobile application and Web Services to
synchronize a various numbers of readings. This figure shows
that the load is linearly proportional to the number of readings.
This is due to the HTTP/REST overhead, which is almost the
same for one or many readings. The monitoring overhead, at the
HTTP level, for any number of readings can be then estimated
using the following formula:
Overheadn = Overheadreq + n (Overhead1 − Overheadreq )
where
Overheadn overhead to synchronize n readings;
Overheadreq overhead generated by a single synchronization
request (excluding the response);
n number of readings to synchronize;
Overhead1 overhead to synchronize one reading (including
request and response).
Our experimentations showed that Overheadreq is around
320 B and Overhead1 is around 880 B. So, the monitoring
network overhead equation mentioned earlier can be rewritten
in bytes as follows:
Overheadn = 320 + n ∗ 560.
Although the overhead equation is linear, the network overhead might look very high for an excessive number of readings.
However, we do not expect users to synchronize data very frequently; and even when they do, the mobile application and
backend Web services will only send new data, the data that
have not been sent synchronized previously.
C. Discussion
In this set of experimentations, we have executed many scenarios in which different readings for a couple of patients being
monitored by a physician are involved. Normal and abnormal

blood sugar readings have been used to check the responsiveness of the framework and the prompt correctness of interactions between its components. For the moment, we are basing
decisions on simple comparisons between reading values and
standard thresholds for different parameters. Our experimentation showed that as soon as an abnormal reading is observed, the
physician is notified on the fly, through the portal, and requested
to take appropriate actions. When the physician proposes new
advices (e.g., lifestyles or requests patient to perform activities) based on last readings or ongoing treatment, the mobile
application instantly prompts the patient to check physician’s
instructions, which are going to be presented in the My Advices
view.
From a monitoring overhead point of view, our results reported that the network overhead generated by monitoring activities is somehow low even if data on mobile applications and
the backend system are kept coherent. In fact, when synchronizing data, only new and small pieces of data are sent back and
forth except in the exceptional case where the mobile application is willing to wipe out all its data and starts fresh with data
stored in the backend database or the Cloud. This might incur
some charges when on 3G/4GLTE network but does not have
that much impact when connected through a Wi-Fi connection.
From a security perspective, data accuracy and privacy are
key issues in health environment, and without these, no solution
will get any real success. For the actual version of the platform
and applications, we are using HTTPS, the same protocol that
is being used by banking institutions for data confidentiality
during communications. On the backend server, we are mainly
enforcing Access Control Lists. However, on the mobile side, it
is up to the user to secure his/her mobile and/or data.
In terms of scalability, it is practically not feasible to experiment our prototype at this stage with a high number of real and
live patients. However, to ensure that our architecture scales
with varying and high number of patients, we implemented a
patients’ simulator that imitates traffic between the backend
system and mobile applications.
Up to now, we have been able to collect around 200 health
records from neighboring hospitals. We are looking for more
data but most of the time we are faced with security issues
mainly with patients’ privacy. To have a relatively high number
of patients, the patients’ simulator is using the same record many
times, up to ten times. The simulator is instructed in such a way
that the virtual number of patients is randomly variable, from
few up to 2000.
Using the patients’ simulator, we haven’t seen any noticeable degradation of the performance of the architecture or any
unexpected high traffic. All traffic follows the same formulas
presented earlier. It is to be noted that our experiments are using
local area networks. However, we do not expect that getting
patients on 3G/4th generation, long term evolution (4GLTE)
networks is going to put that much burden on the architecture
thanks to the same reasons discussed earlier.
On the same scalability aspect and to evaluate the architecture with sensors that generate a significant amount of data, we
integrated an advanced sensor, Bioharness 3 [33], which collects data on electro cardiogram (ECG), blood pressure, and

BENHARREF AND SERHANI: NOVEL CLOUD AND SOA-BASED FRAMEWORK FOR E-HEALTH MONITORING USING WIRELESS BIOSENSORS

temperature. Initial integration showed that there are no issues
except for a little increase in network overhead, which was logically expected. A data purge policy is being designed in mobile
applications to limit the size of data resulting from ECG monitoring to keep just data of an added value.
VII. CONCLUSION
CDs are affecting lives of millions of people all around the
world and are becoming the primary causes of mortality. The
number is so high to an extent where countries are allocating good percentage of their budgets to patients with such disease. Especially, when they need to be permanently hospitalized,
which adds a huge burden on health systems, patients, and their
families.
Transforming CDs’ patients into outpatients is a great relief
for health systems, patients, and their relatives. However, outpatients do not benefit from the same level of monitoring inpatients
have. This might increase the risk of unexpected health deterioration. These risks would be drastically reduced if outpatients
can make use of thorough and continuous monitoring out of
hospitals.
In this paper, we presented a novel framework for outpatients’
CDs monitoring using wireless body sensors and based on the
SOA and the Cloud environments. Each patient in this framework is assigned a set of sensors, depending on his/her CD(s),
and an appropriate mobile application. Sensors get readings
of various health parameters of the patients and automatically
communicate these to the mobile application. The mobile application performs an initial processing during which it decides
if there is a need to communicate some information to and from
the backend system. The later communicates with the mobile
application and various healthcare personnel (e.g., physician,
nurse, and nutritionist) to keep personnel updated with patients’
vital health data and pushes any advices the personnel might
have for the patient. These advices might range from proposing
a lifestyle change to an invitation to urgently consult a physician.
A prototype implementing some components of this framework
has been developed and promising results have been shown.
In fact, the framework has been able to detect all anomalies
and communicate appropriate messages and data to different
stakeholders. These activities are performed while minimizing
the network overhead generated by communications of sensors,
mobile applications, and backend systems.
As ongoing and future works, we are developing remaining
components of the framework and integrating more sensors. We
are also working on the implementation of key knowledge area
related to data security, and QoS-SLA guarantee.
REFERENCES
[1] BIM. Business intelligence Middle East. (2010). [Online]. Available:
http://www.bi-me.com/main.php?id = 46797&t = 1&c = 35&cg = 4&
mset=
[2] A. Pantelopoulos and N. G. Bourbakis, “A survey on wearable sensorbased systems for health monitoring and prognosis,” IEEE Trans. Syst.,
Man, Cybern. C, Appl. Rev., vol. 40, pp. 1–12, Jan. 2010.
[3] G. Kaur and N. Gupta, “E-health: A new perspective on global health,” J.
Evol. Technol., vol. 15, pp. 23–35, 2006.

55

[4] Y. Chu and A. Ganz, “A mobile teletrauma system using 3G networks,”
IEEE Trans. Inf. Technol. Biomed., vol. 8, pp. 456–462, Dec. 2004.
[5] J. Fayn, C. Ghedira, D. Telisson, H. Atoui, J. Placide, L. SimonChautemps, P. Chevalier, and P. Rubel, “Towards new integrated information and communication infrastructures in e-health. Examples from
cardiology,” in Proc. Comput. Cardiol., 2003, pp. 113–116.
[6] E. Jovanov, “Wireless technology and system integration in body area
networks for m-health applications,” in Proc. 27th Annual Int. Conf. IEEE
Eng. Med. Biol. Soc. (EMBS), 2006, pp. 7158–7160.
[7] R. S. H. Istepanian, E. Jovanov, and Y. Zhang, “Guest editorial introduction to the special section on m-health: Beyond seamless mobility
and global wireless health-care connectivity,” IEEE Trans. Inf. Technol.
Biomed., vol. 8, pp. 405–414, Dec. 2004.
[8] QualComm. 2net platform. (2013). [Online]. Available: http://www.
qualcommlife.com/wireless-health
[9] CardioNet. Mobile Cardiac Outpatient TelemetryTM (MCOTTM ). (2013).
[Online]. Available: https://http://www.cardionet.com/medical_02.htm
[10] CareMatrix. Carematix Wellness System (CWS). (2013). [Online].
Available: http://www.carematix.com/
[11] Pinmed. Pelex-04. (2013). [Online]. Available: http://www.pinmed.
net/products/index-7.html
[12] J. Grimson, W. Grimson, D. Berry, G. Stephens, E. Felton, D. Kalra,
P. Toussaint, and O. W. Weier, “A CORBA-based integration of distributed electronic healthcare records using the synapses approach,” IEEE
Trans. Inf. Technol. Biomed., vol. 2, pp. 124–138, Sep. 1998.
[13] K. Ohe, “A hospital information system based on common object request
broker architecture (CORBA) for exchanging distributed medical objects–
an approach to future environment of sharing healthcare information,”
Stud. Health Technol. Inf., vol. 52, p. 962, 1998.
[14] G. Juneja, B. Dournaee, J. Natoli, and S. Birkel, “SOA in healthcare
(part II),” SOA Mag., 2009. Available: http://www.servicetechmag.com/
I27/0309-1.
[15] F. Kart, L. E. Moser, and P. M. Melliar-Smith, “Building a distributed
e-healthcare system using SOA,” IT Prof., vol. 10, pp. 24–30, 2008.
[16] HL7 and OMG. The practical Guide for SOA in health care: A real world
approach to planning, designing, and deploying SOA [version 1.0]. (2013).
[Online]. Available: http://hssp.wikispaces.com/PracticalGuide
[17] OMG. Common object request broker architecture. (2012). [Online].
Available: http://www.omg.org/spec/CORBA/
[18] W3 C. Service oriented architecture. (2004). [Online]. Available:
http://www.w3.org/TR/2004/NOTE-ws-arch-20040211/
[19] S. Hsieh, S Hsieh, Y. Weng, T. Yang, F. Lai, P. Cheng, X. Ping, M. Jan,
J. Lin, and C. Peng, “Middleware based inpatient healthcare information
system,” in Proc. 7th IEEE Int. Conf. Bioinform. Bioeng. (BIBE), 2007,
pp. 1230–1234.
[20] W. M. Omar and A. Taleb-Bendiab, “E-health support services based on
service-oriented architecture,” IT Prof., vol. 8, pp. 35–41, 2006.
[21] C. L. Yang, Y. K Chang, and C. P. Chu, “Modeling services to construct
service-oriented healthcare architecture for digital home-Care business,”
in Proc. Int. Conf. Softw. Eng. Knowl. Eng., 2008, pp. 351–356.
[22] GlassFish—Open Source Application Server. (2013). [Online]. Available:
http://glassfish.java.net/
[23] MySQL Open Source Database. (2013). [Online]. Available: http://www.
mysql.com
[24] Apache Tomcat. (2013). [Online]. Available: http://tomcat.apache.org/
[25] Liferay: Enterprise open source portal and collaboration software. (2013).
[Online]. Available: http://www.liferay.com/
[26] Apache web server. (2013). [Online]. Available: http://httpd.apache.org/
[27] TWiki Server. (2013). [Online]. Available: http://twiki.org
[28] Sanofi. BGStar and iBGStar: developing integrated diabetes solutions.
(2013). [Online]. Available: http://www.bgstar.com/
[29] JavaScript
Object
Notation.
(2013).
[Online].
Available:
http://www.json.org
[30] R. T. Fielding and R. N. Taylor, “Principled design of the modern Web
architecture,” ACM Trans. Internet Technol. (TOIT), vol. 2, pp. 115–150,
2002.
[31] W3 C. Simple object access protocol. [Online]. Available: http://www.w3
c.org/TR/soap
[32] K. Mohamed and D. Wijesekera, “Performance analysis of web services
on mobile devices,” in Proc. Comput. Sci., vol. 10, pp. 744–751, 2012.
[33] Zephyr. Bioharness 3. (2013). [Online]. Available: http://www.zephyrtechnology.com/products/bioharness-3/

Authors’ photographs and biographies not available at the time of publication.

