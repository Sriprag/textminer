IEEE TRANSACTIONS ON BIOMEDICAL ENGINEERING, VOL. 62, NO. 5, MAY 2015

1265

Efficient Conversion of RNA Pseudoknots to
Knot-Free Structures Using a Graphical Model
Jimmy Ka Ho Chiu and Yi-Ping Phoebe Chen∗ , Senior Member, IEEE

Abstract—RNA secondary structures are vital in determining
the 3-D structures of noncoding RNA molecules, which in turn
affect their functions. Computational RNA secondary structure
alignment and analysis are biologically significant, because they
help identify numerous functionally important motifs. Unfortunately, many analysis methods suffer from computational intractability in the presence of pseudoknots. The conversion of
knotted to knot-free secondary structures is an essential preprocessing step, and is regarded as pseudoknot removal. Although exact methods have been proposed for this task, their computational
complexities are undetermined, and so their efficiencies in processing complex pseudoknots are currently unknown. We transformed
the pseudoknot removal problem into a circle graph maximum
weight independent set (MWIS) problem, in which each MWIS
represents a unique optimal deknotted structure. An existing circle graph MWIS algorithm was extended to report either single
or all solutions. Its time complexity depends on the number of
MWISs, and is guaranteed to report one solution in polynomial
time. Experimental results suggest that our extended algorithm is
much more efficient than the state-of-the-art tool. We also devised
a novel concept called the structural scoring function, and investigated its effectiveness in more accurate solution candidate selection
for a certain criteria.
Index Terms—Noncoding RNAs (ncRNA), RNA pseudoknot,
secondary structure.

I. INTRODUCTION
INCE the discovery of their catalytic or regulatory roles in
many biological processes, RNAs with these functions are
called noncoding RNAs (ncRNAs) [1]. For example, an ncRNA
linc-MD1 was recently discovered for its muscle differentiation
function [2]. Studies revealed that the functions of ncRNAs
are related to their structures [3]–[5]. The better conservation
of their structures than their sequences [7] serves as a strong
evidence for this structure–function relationship.
Efforts have been devoted to the prediction of the secondary
and tertiary structures of RNA molecules, as well as various
structural analyses. Different secondary structure prediction
tools have been developed [8], [9]. Structural analyses include
pairwise or multiple structure alignment [10], [11], structure
modeling [12], frequent stem pattern mining [13], etc. However, the presence of pseudoknots in some secondary structures
complicates the issue. A pseudoknot is formed by two or more
base pair stacks, in which any of them must cross at least one of
the other stacks. Two stacks are said to cross each other if any
base pair (i1 , j1 ) from one stack and any base pair (i2 , j2 ) from an-

S

Manuscript received May 21, 2014; revised October 12, 2014; accepted
November 18, 2014. Date of publication November 18, 2014; date of current
version April 17, 2015.
J. K. H. Chiu is with La Trobe University.
∗ Y.-P. P. Chen is with the Department of Computer Science and Computer
Engineering, La Trobe University, Melbourne, Vic. 3086, Australia (e-mail:
phoebe.chen@latrobe.edu.au).
Digital Object Identifier 10.1109/TBME.2014.2375360

other stack satisfies i1 < i2 < j1 < j2 . Some approaches, such
as stochastic context-free grammar used in the covariance model
creation [14], do not allow pseudoknots. Moreover, since a pseudoknot can be constructed with any number (ࣙ2) of crossing
base pair stacks, the number of distinct topologies is unbounded
[15], [16]. It is intractable for the algorithms to keep track of
all possibilities. For example, if arbitrary pseudoknots exist in
both structures, then the pairwise secondary structure alignment
problem becomes NP-hard [11].
Many tools assume knot-free input structures to avoid these
problems. Most of the structure alignment approaches listed
above, and the covariance model building and searching tool
Infernal [17] adopted this assumption. Users must convert the
knotted motifs in the input structures to knot-free motifs before
submitting them to these applications. The heuristic conversion
method applied (such as selecting stacks that are to be retained
in the knot-free motif or selecting stacks for removal to de-knot
the motif) the scoring function used to calculate the score of the
solution candidates (such as scoring based on the number of base
pairs in the stacks, base pair interaction range, stack stabilities,
etc.), and the selection criteria specified (such as maximizing or
minimizing the overall score estimated) together constitute the
pseudoknot removal problem [6]. All early solutions proposed
for this problem are heuristics and are discussed in details in
[6]. Their main drawback is that it is not guaranteed to obtain
an optimal de-knotted structure based on specific criteria, such
as maximizing the number of base pairs in the result structures.
The first optimal approach is a Nussinov–Jacobson algorithm
[18]. It converts a pseudoknotted structure to a nested structure
with the maximum number of base pairs retained [19]. This algorithm was then modified to report all optimal solutions and
is more scalable for larger structures [6]. The optimality means
no other solutions have a better score than the reported results
according to the user-specified scoring criteria. The modified
algorithm was implemented in a tool called K2N which is both
available online or as a standalone tool for download. To the
best of our knowledge, no other new method for pseudoknot
removal has been proposed since the launch of K2N. Instead, it
was included and evaluated in some other bioinformatics tools
[20], [21]. A recent RNA database, RNA Bricks, also relied on
K2N to eliminate pseudoknots prior to motif extraction [22].
So, it is regarded as the state-of-the-art pseudoknot removal
tool. However, in the next section, we will see that there exists a
more efficient algorithm that can also report either one or entire
optimal deknotted structures. Also, the current scoring functions
used to evaluate the candidates are limited to base pair stems
only, and are called stem scoring functions. Other structural
information such as the loop sizes, stem nesting, etc., of the deknotted secondary structure are omitted. The possibility of in-

0018-9294 © 2014 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See http://www.ieee.org/publications standards/publications/rights/index.html for more information.

1266

IEEE TRANSACTIONS ON BIOMEDICAL ENGINEERING, VOL. 62, NO. 5, MAY 2015

Fig. 1. Top: A sample primitive pseudoknot with five base pair stems (labeled
from s1 to s5 ). Bottom left: The ten endpoints of the five base pair stems are
arranged in a clockwise manner. A pair of endpoints belonging to the same base
pair stem is connected with a chord (with label ci corresponding to stem si ).
Bottom right: The circle graph of this chord model. If two chords intersect, then
there is an edge connecting their respective vertices. Chord pair c1 and c3 is an
example.

corporating all these properties into a single scoring function, regarded as the structural scoring function, will also be discussed.
II. METHODS
A. Transforming the Pseudoknot Removal Problem Into the
Circle Graph MWIS Problem
Since an arbitrary pseudoknot is modeled as a circle graph
on which a graph algorithm is applied to deknot the motif,
certain terms are introduced in the supplementary material
(http://homepage.cs.latrobe.edu.au/ypchen/FreeKnot/supp.pdf)
to provide a better understanding of some important concepts
in this section. Fig. 1 shows a sample pseudoknot consisting
of a set S = {s1 , s2 , s3 , s4 , s5 } of five base pair stems. This
pseudoknot is primitive (i.e., it cannot be split into separate
substructures without disrupting its topology [23]). The left and
right endpoints of a stem are near to the 5 end and the 3 end,
respectively. All the ten endpoints are labeled from v1 near the
5 end to v10 near the 3 end. They are arranged in an ordered
anticlockwise (or clockwise) manner in a chord model and
become its vertex set V = {v1 , v2 , . . . , v10 }, as shown in Fig. 1.
A chord ci = (vp , vq ) (p < q) connects two vertices vp and vq
when they correspond to the endpoint pair of the stem si , and
so the chord set C = {c1 , c2 , c3 , c4 , c5 } can be mapped with
the stem set S. Therefore, the stem crossings in the pseudoknot
are captured by the chord intersections. Hence, an edge of the
circle graph denotes a unique stem crossing, as depicted in
Fig. 1. The graphical expression of the pseudoknot removal
problem is based on this observation: if an independent subset
is selected from the circle graph, then the underlying stems of
this subset do not cross and, hence, constitute a knot-free motif.
The selection requires a predefined stem scoring function that
gives a score to a stem based on its physical properties. The
selection results either maximize or minimize the aggregated
stem score according to a specified goal, provided that the score
is additive. When the stem scores become vertex (representing
chord) weights in the circle graph, an independent set that
either maximizes or minimizes the total vertex weight is simply
an MWIS of the circle graph. As a result, pseudoknot removal
is equivalent to finding MWIS in its modeling circle graph.

We now formulate the modeling of an arbitrary primitive
pseudoknot with the circle graph, and then express the pseudoknot removal problem in terms of the circle graph MWIS
problem. Given a primitive pseudoknot consisting of a set
of n crossing stems S = {s1 , s2 , . . . , sn }, a chord set C =
{c1 , c2 , . . . , cn } is created to represent S by mapping ci with
si . When any two stems si and sj (i < j) cross, add (ci , cj ) to
the edge set E. The circle graph G for the given pseudoknot is
a two-tuple G = (C, E). Denote μC : C → AS as a function
mapping a chord to the physical properties (such as number of
base pairs) of its underlying stem, where AS is the set of physical properties for all stems. Suppose the stem scoring function
is σ and the goal is θ (that is, either to maximize or minimize the
total stem score), the pseudoknot removal problem is equivalent
to finding an empty subgraph (i.e., a subgraph with no edges)


of G such that C  ⊂ C and the total vertex weight
G
 = (C , Ø)
C
c ∈ C  σ(μ (c)) is optimal according to θ. This is simply the
circle graph MWIS problem. A unique optimal knot-free structure is then generated from each MWIS, and so the number of
unique optimal deknotted structures is equal to the number of
MWISs of G.
B. Circle Graph MWIS Algorithm
Several polynomial time algorithms have been proposed
[24]–[28] to obtain single MWIS for an arbitrary circle graph.
The one proposed in [28] operates on the chord model. It was
suggested to be currently the most efficient under certain enhancements [29]. We further modified it to report all MWISs, so
that all optimal deknotted structures can be obtained. We denote
a given chord model as Gchord = (V, C, μC ), where V is the set
of chord endpoints and C is the chord set. μC is the mapping
function defined above. In this algorithm, a chord cj = (vr , vs )
is said to be nested in another chord ci = (vp , vq ) when p < r
< s < q. For example, in Fig. 1, both c3 and c4 are nested in c2 .
Also, a chord cj is directly nested in a chord ci when there does
not exist another chord ck such that ck is nested in ci and cj is
nested in ck . The algorithm is shown in next page.
Lines 1–8 come from the enhancements suggested in [29].
This part builds MWISs Csub [i] from the specified chord ci and
all chords nested in it. CMIS[i] is the total weight of Csub [i].
CMIS[i] is calculated from other CMIS[j] values, in which cj
is directly nested in ci . Lines 9–25 refer to the original MWIS
algorithm in [28]. This part generates MWIS candidates from
the specified chord ck , and all chords nested in or occurring
completely after ck . The total weight wc of a candidate is computed from CMIS. T[m] denotes the MWISs between vm and
the last vertex, and their total vertex weight is Q[m]. If wc is
better than Q[m + 1], then the corresponding candidates are
assigned to T[m] and Q[m] = wc . If Q[m + 1] is better, then
T [m] = T [m + 1] and Q[m] = Q[m + 1]. T[m] does not need
to store all the chords of an MWIS. The final MWISs can be
obtained by backtracking T [1] using Csub . When only one final
MWIS is needed, it is sufficient for every element of Csub and T
to contain only one intermediate MWIS. Interested readers may
refer to the supplementary material for algorithm details.
The time and space complexities of the original circle graph
MWIS algorithm are O(nd) and O(n) respectively, where n is
the number of chords (stems) and d is the density of the un-

CHIU AND CHEN: EFFICIENT CONVERSION OF RNA PSEUDOKNOTS TO KNOT-FREE STRUCTURES USING A GRAPHICAL MODEL

Algorithm: Circle graph MWIS
1 Initialize arrays CMIS and Csub
2 For m = 1 to |V|
3
If vm is the right endpoint of chord ci = (va , vm )
4
From previously obtained CMIS values, obtain the
total weight wn est of the MWISs Z built from only
the nested chords of ci
5
CMIS[i] = wn est + weight of ci
6
Remove non-directly nested chords of ci from Z to
get Csub [i]
7 End if
8 End for
9 Initialize arrays T and Q
10 For m = |V | down to 1
11 T [m] = T [m + 1], Q[m] = Q[m + 1] for m < |V|
12 If vm is the left endpoint of chord ck = (vm , vb )
13 Form a candidate with ck and its nested chord
MWIS, as well as an MWIS formed by chords after
vb (i.e., T[b + 1]), if any. The total weight of this
candidate, wc , is CMIS[k], plus Q[b + 1] if T[b + 1]
exists
14 If wc is better than or equal to Q[m] according to θ
15
Initialize T[m] when wc is better than Q[m]
16
If T[b + 1] exists
17
Merge each element of T[b + 1] with k, and add it
to T[m]
18
Else
19
Add [k] to T[m]
20
End if
21
Q[m] = wc
22 End if
23 End if
24 End for
25 Recover the MWISs of Gchord from T [1] and Csub

derlying chord model. A vertex vr is said to be bounded by a
chord (vj , vk ) when j ࣘ r < k or j < r ࣘ k. The density d is
the maximum number of chords bounding a vertex [29]. The
circle graph in Fig. 1 has a density d = 3 as v3 is bounded by
three chords. Suppose the number of MWISs of the circle graph
G is denoted by MWIS(G). The modified MWIS algorithm takes
O(nd × MWIS(G)) time and O(n × MWIS(G)) space. When only
one MWIS is reported, the modified algorithm takes identical
time and space complexities as the original algorithm.
C. Estimating the Worst-Case Complexities From the
Maximum Number of Circle Graph MWISs
Suppose M W ISm ax (G) is the maximum value of MWIS(G)
for an n-ordered circle graph G. M W ISm ax (G) gives the maximum number of the optimal deknotted structures for an n-stem
pseudoknot. It is also decisive in both the worst time and space
complexities of our MWIS algorithm. M W ISm ax (G) is determined as follows: Fig. 2(a)–(c) shows the three distinct n-stem
pseudoknot general patterns and their corresponding connected
circle graph general topologies. Every pseudoknot general pat-

1267

Fig. 2. (a)–(c): The three n-stem pseudoknot general patterns (top) and their
corresponding connected circle graph general topologies below (bottom). A
substructure is modeled by the clique with the same number label. The “ . . . ”
symbols in the pseudoknot patterns denote some recurring substructures, where
each substructure consists of three mutually crossing stems. In the graph topologies, these recurring substructures are denoted by the cliques of size 3. The arrow
in each pseudoknot pattern points to the stem represented by the central cutpoint (double line circle) in the corresponding topology. The three general graph
topologies produce M(n) MISs according to (1) for n ࣙ 6, where n is the number
of stem (vertices). (d)–(f): The three unconnected general circle graph topologies producing P(n–r) MISs according to (2), where r is the number of vertices
removed.

tern consists of q recurring substructures, and a substructure
(labeled by a number in the figure) is formed by either three or
four mutually crossing stems. These substructures are joined by
crossing the leftmost (i.e., near to the 5 end) stem of the leftmost
substructure (labeled with “1” in the figure) with the leftmost
stems of all other substructures. Every substructure is modeled
by a clique (labeled with the same number) in the circle graph.
Each of the circle graph general topologies has q cliques. It
should be noted that these three topologies are in fact the topologies achieving the maximum number of MISs for connected
general graphs [30], [31], which is given by M(n) as follows:
⎧
n
for n < 6
⎪
⎪
⎪
⎪
⎨ 2 · 3q −1 + 2q −1
for n = 3q
M (n) =
(1)
q
q
−1
⎪
for n = 3q + 1
3 +2
⎪
⎪
⎪
⎩
4 · 3q −1 + 3 · 2q −2 for n = 3q + 2.
The pseudoknot general patterns in Fig. 2 suggest that, for
n ࣙ 6, there exists an n-stem pseudoknot in which its modeling
circle graph G has at most M(n) MISs. Since the common stem
scoring functions give only positive scores, we assume only
positive vertex weights exist in these topologies. Under this assumption, any of their MWISs is also an MIS, and so the MWIS
set must be a subset of the MIS set. Moreover, an MIS is formed
by selecting a vertex from each of the q cliques such that no
edge exists among the selected vertices. The size of each MIS
is therefore q. When all vertex weights are identical, the total
weight of every MIS is the same. As a result, all the M(n) MISs
become MWISs, meaning that M W ISm ax (G) = M (n). For
n ࣙ 6, M W ISm ax (G) is in O(3n/3 ) ࣈ O(1.4422n ). Therefore,
the worst-case time and space complexities of our MWIS algorithm are O(nd × 1.4422n ) and O(n × 1.4422n ), respectively.
We briefly discuss situations when all the positive vertex
weights’ assumption do not hold. If both positive and negative
vertex weights exist in G, then those vertices with their weights

1268

opposing the goal θ never appear in any MWIS of G. For
example, an MWIS never includes any vertex with negative
weight when θ is to maximize the score. Such vertices are
removed from G to form a subgraph G so that the assumption
holds again. Suppose r (r < n) vertices are removed, when G
is still connected, and its topology belongs to any of the three
connected general topologies, M W ISm ax (G ) = M (n − r).
When G becomes unconnected, with its topology belonging to
any of the unconnected general topologies shown in Fig. 2(d)–
(f), it can be shown that M W ISm ax (G ) = P (n − r) using the
same argument as the connected topologies’ case. According
to [32], P(n–r) is given by:
⎧
3q
for n − r = 3q
⎪
⎪
⎨
q −1
for n − r = 3q + 1
(2)
P (n − r) = 4 · 3
⎪
⎪
q
⎩ 2·3
for n − r = 3q + 2.
P(n–r) is in O(3(n-r)/3 ) which is still an exponential factor. A
special example is to remove only the central cutpoint [30] (denoted by the double circle in Fig. 2(a)–(c)) from any connected
general topology, and this topology then becomes one of the
three unconnected general topologies with the same number of
cliques. In this case, M W ISm ax (G ) = P (n − 1). If zero vertex weights also exist in G, then an MWIS is no longer necessary
to be an MIS since some of its vertices have zero weight. As a
result, M W ISm ax (G) may exceed M(n) or P(n–r).
The K2N algorithm [6] fills O(n2 ) dynamic programming
(DP) table cells, and each cell has at most MWIS(G) solutions. To generate intermediate best solution candidates for a
cell, it checks each solution in the cell left to the current cell
against every solution in the cell below the current cell. This
step takes at most O(MWIS(G)2 ) iterations. The checking detects any potential conflicts in each pair of solutions (one from
each neighboring cells). If there is no conflict (i.e., both solutions
are disjoint), then this solution pair can be merged directly to
form a candidate. Otherwise, a slider k is created to run through
the conflict region of this solution pair, and generates candidates for each value of k. Since a cell stores at most MWIS(G)
best solutions, and the range of k is in O(n), each solution pair
takes at most O(n × MWIS(G)) time to create new candidates.
Hence, the candidate generation at a cell takes at most O(n ×
MWIS(G)3 ) time in total. The space complexity of the K2N algorithm is O(n2 × M W IS(G)), while its time complexity is
O(n2 × n × M W IS(G)3 ) = O(n3 × M W IS(G)3 ).

IEEE TRANSACTIONS ON BIOMEDICAL ENGINEERING, VOL. 62, NO. 5, MAY 2015

deknotted structures are expected to have the highest stability,
then every solution candidate is converted from its set of base
pair stems to a deknotted secondary structure, which is then
evaluated for its free energy. The scoring function giving free
energy as the score is regarded as a structural scoring function.
Such functions evaluate candidates based on their secondary
structures. Unlike the stem scoring function, which is usually
applied to evaluate every stem prior to or during the process of
the pseudoknot removal algorithm, the structural scoring function is applied once a candidate structure is generated, or after
candidate structures generation.
In most circumstances, the stem scoring functions only give
positive scores such as the number of base pairs. Therefore, in
both K2N algorithm and our MWIS algorithm, the minimal set
of solution candidates is equivalent to the set of MISs of the
given circle graph. This is because a nonmaximal independent
set is always a subset of an MIS, and so its total weight is never
the largest. Moreover, an MIS cannot be a subset of another
MIS and, hence, the secondary structure of a candidate is never a
substructure of another candidate. This means the MIS set maintains the uniqueness of each candidate structure. When using the
structural scoring function, it is necessary to generate a candidate set equivalent to the MIS set.
In order for both the K2N algorithm [6], [20] and our MWIS
algorithm to report all MISs of a circle graph, a stem scoring
function is applied to give a zero score to any stem. As a result,
all MISs as well as other nonmaximal independent sets are
eventually reported by both algorithms with a zero score. A
check is performed on the generated independent sets at the end
of each iteration in the algorithm, and all nonmaximal sets are
discarded. Both algorithms become very inefficient due to the
addition cost incurred for checking. We adopted a more direct
and efficient algorithm proposed in [34] to obtain all the MISs of
the circle graph. It creates a branching tree and the MISs can be
obtained at the leaf nodes. By limiting the maximum number of
branches to three as suggested in [34], we assume an amortized
branching factor of two at each internal node. Therefore, the
branching tree is comparable to a full binary tree with MIS(G)
leaf nodes, and the total number of nodes is equal to 2MIS(G)–
1. In addition, it takes O(n2 ) time for the vertex degree update,
and O(n) time for both the independent set verification. The
amortized time complexity of this MIS algorithm is then O(n2 ×
M IS(G)). It is more efficient than the modified K2N algorithm
that takes O(n3 × M IS(G)3 ) time, not including the additional
time required for nonmaximal independent set removal.

D. Structural Scoring Function
The stem scoring function evaluates the score of every stem
by utilizing its physical properties, such as the number of hydrogen bonds. The score of a solution candidate is the sum of
scores of its stems. This implies that the stem scoring functions
are limited to those giving additive stem scores [6]. Also, when
some nonstem structural features also contribute to the property
measured, they should be included for more accurate evaluation.
For example, free energy is the best measure for the stability of
a secondary structure. The free energy parameters [33] suggest
that the overall structural stability relies on various factors such
as stacked base pairs, loop size, nearest neighbor, etc. If the

III. EXPERIMENTS
We implemented our modified circle graph MWIS algorithm and the MIS algorithm in a tool called FreeKnot,
which is written in Perl. Its source code is available at
http://homepage.cs.latrobe.edu.au/ypchen/FreeKnot/. The free
energy given by the structural scoring function is calculated
using RNAeval through the ViennaRNA Package [35] that
adopts Turner free energy parameters [33].
We performed three benchmark experiments. The first two
experiments compared the running times of the algorithms with
different stem scoring functions. It should be noted that, in K2N,

CHIU AND CHEN: EFFICIENT CONVERSION OF RNA PSEUDOKNOTS TO KNOT-FREE STRUCTURES USING A GRAPHICAL MODEL

TABLE I
PERFORMANCE BENCHMARK FOR K2N AND FREEKNOT ALGORITHMS, USING
NUMBER OF BASE PAIRS AS THE STEM SCORE

1269

TABLE II
PERFORMANCE BENCHMARK FOR K2N AND FREEKNOT ALGORITHMS, USING
NUMBER OF HYDROGEN BONDS AS THE STEM SCORE

Processing time (seconds)
RNA
STRAND
molecule
Id
PDB_00749
PDB_01157
PDB_00919
PDB_00933
PDB_00934
PDB_00651
PDB_00654
PDB_00676
CRW_00002
CRW_00476
CRW_00505
CRW_00521
CRW_00522
CRW_00575
CRW_00579

Processing time
(seconds)

No. of stems No. of
in the most de-knotted FreeKnot
FreeKnot
complex structures (single- K2N (all- FreeKnot
speedup
pseudoknot structures solution) solution) (all- solution) (all- solution)
3
2
3
2
9
12
15
15
14
14
13
15
17
14
68

1
1
2
1
1
1
1
1
1
1
1
1
2
1
32

0.0011
0.003
0.0043
0.0237
0.0493
0.0495
0.0508
0.05
0.0133
0.0508
0.0439
0.0493
0.0466
0.0134
0.057

0.0024
0.0048
0.0107
0.103
2.3131
2.6155
4.1591
3.8208
0.2748
2.0219
0.5979
2.2134
4.2602
0.2739
8292.49

0.0011
0.0031
0.0068
0.0232
0.0497
0.0504
0.0517
0.0516
0.0131
0.0512
0.045
0.05
0.0674
0.0132
0.7742

2.18
1.55
1.57
4.44
46.54
51.89
80.45
74.05
20.98
39.49
13.29
44.27
63.21
20.75
10711.04

The first five RNA molecules were examined in [6]. The most complex pseudoknot in
a molecule is the one having the maximum number of crossing stems. Since the singlesolution option for K2N also relies on computing all the optimal solutions and selects the
most suitable one afterwards, only the running times for the all-solution option were measured. The speedup is calculated as the processing time of K2N divided by the processing
time of FreeKnot.

even with the single-solution option, it obtains all the solutions
first and then selects one from them. So, the “optimize all”
(OA) option is sufficient for benchmarking purposes. The
last experiment compared the structural scoring function with
the stem scoring function in terms of obtaining more stable
pseudoknot-free secondary structures. All the experiments were
performed on an Intel Core-i3 330M 2.13 GHz machine with
4 GB of RAM running 64-bit Ubuntu Linux 12.04.
The experimental dataset for the first two experiments were
obtained from the RNA STRAND v2.0 database [36]. It included
the five RNA molecules previously examined [6]. The top ten
pseudoknot topologies involving the highest number of crossing
stems were also identified from the database [16]. A molecule
from each topology was then added to this dataset. The second
column of Tables I and II indicates the number of crossing stems
of the largest pseudoknot in the corresponding molecules. Other
minor pseudoknots in these ten molecules consist of at most four
crossing stems only. They are less dominating in the overall
processing times.
A. Benchmark 1: Using Number of Base Pairs as Stem Score
In the first experiment, the stem scoring function gives the
number of base pairs in a stem as its stem score. To maximize
the complexities of the pseudoknot structures, the noncanonical
base pair stems were retained. Table I shows the benchmark
results using the testing dataset. FreeKnot performed faster than
K2N in all cases, and the speedup increased substantially for
molecule PDB_00934 (PDB Id: 2AW4) and the ten additional
molecules. The most striking difference happened for molecule
CRW_00579, in which K2N spent more than 2 h obtaining 32
optimal solutions. We examined this special case and found
that the most complex primitive pseudoknot in this molecule

RNA STRAND
molecule Id

PDB_00749
PDB_01157
PDB_00919
PDB_00933
PDB_00934
PDB_00651
PDB_00654
PDB_00676
CRW_00002
CRW_00476
CRW_00505
CRW_00521
CRW_00522
CRW_00575
CRW_00579

No. of stems
in the most
complex
pseudoknot

No. of
de-knotted
structures

K2N (allsolution)

FreeKnot
(allsolution)

FreeKnot
speedup
(allsolution)

3
2
3
2
9
12
15
15
11
11
10
12
11
11
44

1
1
1
1
1
1
1
1
1
1
1
1
1
1
2

0.0038
0.0063
0.0081
0.1141
2.5245
2.7898
4.3778
4.05
0.1841
0.869
0.2618
0.916
0.8729
0.1833
191.39

0.001
0.003
0.0043
0.0221
0.05
0.0486
0.0491
0.0503
0.0129
0.0502
0.0441
0.05
0.0469
0.0128
0.0773

3.8
2.1
1.88
5.16
50.49
57.40
89.16
80.52
14.27
17.31
5.94
18.32
18.61
14.32
2475.94

has eight optimal solutions (together with two optimal solutions
from each of the other two independent primitive pseudoknots,
producing 8 × 2 × 2 = 32 final results). For this most complex
pseudoknot, when the stack endpoint range [i, j] (K2N considers stacks instead of stems [15], so in this molecule there
were 128 stacks in 68 stems, and thus the highest endpoint is
256) for the current DP table cell D(i, j) [6] is large, each of
its neighboring cells D(i − 1, j) and D(i, j − 1) stored eight
intermediate solutions. They were merged to form 64 distinct
solution pairs, and conflict probably occurred in every pair. This
is because the solutions in the ranges [i − 1, j] and [i, j − 1]
overlapped when range [i, j] was large. It was also noted that
the slider range was very close to or even identical to the current range [i, j]. For example, at D(5, 185), all the 64 solution
pairs were in conflict, and the 64 slider ranges were found to
be either (5, 184) or (5, 185). The number of candidates is in
O(n × M W IS(G)3 ) and the expected candidate population is
180 × 83 = 92 160. In fact, 46 336 candidates were generated,
which is half of the expected value. This is because not all the
DP table cells have eight solutions. Nonetheless, the number of
candidates follows the expected order. On the other hand, most
of them were redundant and only 326 distinct candidates were
actually produced. We modified the K2N program to remove all
redundant candidates in advance. The computation time for this
molecule was then reduced to less than 3 h. The processing at
each D(i, j) gradually slowed down due to the increasing number of generated candidates. In contrast, our MWIS algorithm
reported all the 32 optimal results within a second.
Table I also shows the running times required for both allsolution option and single-solution option of FreeKnot. For
molecules with only one optimal solution, both options should
take the same time complexity. This explains the close or even
identical running times observed. For the three molecules with
multiple optimal results, their running times for the all-solution
option are significantly higher than the single-solution option.

1270

IEEE TRANSACTIONS ON BIOMEDICAL ENGINEERING, VOL. 62, NO. 5, MAY 2015

TABLE III
FREE ENERGIES OF THE OPTIMAL SOLUTIONS OBTAINED BY K2N USING
NUMBER OF HYDROGEN BONDS AS THE STEM SCORE, AND BY FREEKNOT
USING FREE ENERGY AS THE STRUCTURE SCORE
Free energy (kcal/mol)
RNA STRAND
molecule Id

PDB_00447
PDB_01157
CRW_00521
CRW_00522
CRW_00525
CRW_00529

K2N (stem
score: no. of
hydrogen
bonds)

FreeKnot
(structure
score: free
energy)

Percentage
increase

Processing
time for
FreeKnot
(seconds)

−17.90
−20.00
−482.51
−105.57
−1002.20
−798.81

−20.40
−21.80
−485.74
−116.67
−1003.50
−802.51

13.97%
9%
0.67%
10.51%
0.13%
0.46%

0.0247
0.0187
15.694
1.3181
1.6177
1.6877

B. Benchmark 2: Using Hydrogen Bond Count as Stem Score
Now we consider the number of hydrogen bonds as the stem
score. A CG or GC base pair has a score of three as it has three
hydrogen bonds. Other canonical base pairs (AU, UA, GU or
UG) have two hydrogen bonds in each of them, and so the score
is two. Unlike the last benchmark, the noncanonical base pairs
were removed from all the testing structures. Table II also shows
that FreeKnot is still more efficient than K2N for the conversion,
especially for the structures starting from PDB_00934. For the
most complex pseudoknot in molecule CRW_00579, FreeKnot
reported the two optimal results in less than 0.1 s, which was
about 2500 times faster than K2N.
C. Benchmark 3: Structural Scoring Function versus Stem
Scoring Function in Terms of Structural Stability
This benchmark compared the stabilities of the deknotted
structures obtained using the structural scoring function (free
energy) with those obtained using the stem scoring function
(number of hydrogen bonds). A large number of pseudoknotted structures were examined. The stabilities of the deknotted
structures were quantified by their free energies. The lower its
free energy, the more stable a structure is. FreeKnot performed
the conversion with the structural scoring function, while K2N
proceeded with the stem scoring function. It was found that
the output structures of FreeKnot were at least as stable as or
even more stable than those obtained via K2N. Table III lists
the benchmark results for the latter case. For some structures
such as PDB_00447 and CRW_00522, the free energies of the
FreeKnot outputs can be at least 10% better than K2N outputs.
This suggests that some deknotted structures obtained with the
structural scoring function are more stable than those obtained
with the stem scoring function, thus improving the result reliability of the subsequent RNA analysis. The tradeoff is the
increased processing time as shown in Table III, but most structures could be processed within a few seconds.
IV. CONCLUSION AND DISCUSSION
The circle graph modeling of pseudoknots enables the conversion of knotted structures into knot-free structures by finding the
MWISs of their corresponding circle graphs. A unique optimal
knot-free structure can be generated from every MWIS obtained.
The circle graph MWIS algorithm is completely different to the

K2N algorithm. However, using the same stem scoring function,
both methods produce optimal deknotted structures such that no
other knot-free structure with a better score exists. So, they give
identical results under the same conditions. Meanwhile, both the
complexity analysis and the first two benchmark experiments
suggest that FreeKnot is more efficient than K2N. The computation time can therefore be significantly reduced without any
compromise in the optimality of the result structures. The improvement is more substantial for complex pseudoknots, such as
the bulky pseudoknot in molecule CRW_00579. K2N required
more than 2 h manipulating this structure. Hence, other pseudoknots requiring excessive running times might exist. Moreover,
when an arbitrary knot-free structure is sufficient for each input
structure, our approach is guaranteed to generate it in polynomial time, regardless of the pseudoknot complexity. Therefore,
little overhead is added to the subsequent RNA analysis when
applying FreeKnot for its pseudoknot removal preprocessing.
This benefit is more obvious when a considerable number of
structures are analyzed.
The graphical modeling also contributes by expressing the
computational complexities of the pseudoknot removal algorithms in terms of the number of circle graph MWISs (i.e.,
MWIS(G)) and other quantities. By deriving the maximum number of MWISs of an n-ordered G (denoted by M W ISm ax (G)),
the maximum possible number of deknotted structures for an
n-stem pseudoknot and, hence, the worst-case complexities of
the algorithms can also be determined. In the Section II, we
showed that the circle graph MWIS algorithm is much more
efficient than the K2N algorithm for pseudoknot removal. This
is supported by the performance discrepancies observed in the
first two benchmark experiments. Moreover, it was discovered
that M W ISm ax (G) in O(3n/3 ). This indicates the worst-case
time and space complexities of our MWIS algorithm increase
exponentially with n.
Structural stability is an example demonstrating the limitation of the stem scoring function. This function only estimates
the stabilities of the base pair stems, and the contributions from
other components such as loops are omitted. To overcome this
limitation, the structural scoring function is proposed to evaluate
the whole deknotted structure for an overall score. Moreover, to
facilitate the structural scoring scheme, an MIS algorithm was
implemented to generate all MISs, which are then converted
to candidate structures. The benchmark results suggested that
the deknotted structures, which were obtained with the structural scoring function (free energy), were at least as stable as
or even more stable than those obtained with the stem scoring
function (hydrogen bond count). In this case, all the MWISs
of the circle graph are also its MISs due to all positive vertex
weights. This implies that any optimal solution (equivalent to
an MWIS) reported by K2N or FreeKnot using the stem scoring
function is always one of the candidate structures (equivalent
to all MISs) evaluated by the structural scoring function. As a
result, the free energy of the solution structure obtained with
the structural scoring function is never higher (i.e. less negative)
than that obtained with the stem scoring function. In this benchmark, even some structures showed only small improvements
in their free energies, such improvements are mainly caused
by their nonstem structural features omitted by the stem scoring
function. These subtle features become very important when the

CHIU AND CHEN: EFFICIENT CONVERSION OF RNA PSEUDOKNOTS TO KNOT-FREE STRUCTURES USING A GRAPHICAL MODEL

subsequent RNA analysis investigates the stabilities of its input
structures. Larger improvements (like molecule CRW_00522)
mean that some features are more effective in stabilizing the
structures, or they exist in many parts of the structures. Although there is a tradeoff between accurate candidate structure
selection and algorithm performance, most of the current pseudoknotted structures could be deknotted within a few seconds.
We proposed the use of the circle graph to model an arbitrary
primitive pseudoknot, and transformed the pseudoknot removal
problem into the circle graph MWIS problem. We demonstrated
its usefulness by adopting a more efficient pseudoknot removal
algorithm. The number of optimal solutions was found to be
equal to the number of MWISs in the modeling circle graph,
from which its upper bound can be estimated. Moreover, a structurally unique candidate set can be created from the MIS set of
the circle graph, so that the structural scoring function can be
applied to select better candidates according to specific criteria.

REFERENCES
[1] G. Storz, “An expanding universe of noncoding RNAs,” Science, vol. 296,
no. 5571, pp. 1260–1263, May 17, 2002.
[2] M. Cesana et al., “A long noncoding RNA controls muscle differentiation
by functioning as a competing endogenous RNA,” Cell, vol. 147, no. 2,
pp. 358–369, Oct. 14, 2011.
[3] K. S. Lee et al., “In vivo determination of RNA structure-function relationships: Analysis of the 790 loop in ribosomal RNA,” J. Molecular
Biol., vol. 269, no. 5, pp. 732–743, Jun. 27, 1997.
[4] Q. F. Chen and Y. P. P. Chen, “Discovery of structural and functional
features in RNA pseudoknots,” IEEE Trans. Knowl. Data Eng., vol. 21,
no. 7, pp. 974–984, Jul. 2009.
[5] F. Chen and Y. P. P. Chen, “Exploring cross-species-related miRNAs based
on sequence and secondary structure,” IEEE Trans. Biomed. Eng., vol. 57,
no. 7, pp. 1547–1553, Jul 2010.
[6] S. Smit et al., “From knotted to nested RNA structures: A variety of
computational methods for pseudoknot removal,” RNA, vol. 14, no. 3,
pp. 410–416, Mar. 2008.
[7] N. J. Reiter et al., “Emerging structural themes in large RNA molecules,”
Current Opinion Struct. Biol., vol. 21, no. 3, pp. 319–326, Jun. 2011.
[8] M. Zuker and P. Stiegler, “Optimal computer folding of large Rna sequences using thermodynamics and auxiliary information,” Nucleic Acids
Res., vol. 9, no. 1, pp. 133–148, 1981.
[9] E. Rivas and S. R. Eddy, “A dynamic programming algorithm for RNA
structure prediction including pseudoknots,” J. Molecular Biol., vol. 285,
no. 5, pp. 2053–2068, Feb. 5, 1999.
[10] Y. Tabei et al., “A fast structural multiple alignment method for long RNA
sequences,” BMC Bioinformatics, vol. 9, p. 33, 2008.
[11] T. Jiang et al., “A general edit distance between RNA structures,”
J. Comput. Biol., vol. 9, no. 2, pp. 371–388, 2002.
[12] Q. F. Chen and Y. P. P. Chen, “Modeling conserved structure patterns for
functional noncoding RNA,” IEEE Trans. Biomed. Eng., vol. 58, no. 6,
pp. 1528–1533, Jun. 2011.
[13] M. Hamada et al., “Mining frequent stem patterns from unaligned RNA
sequences,” Bioinformatics, vol. 22, no. 20, pp. 2480–2487, Oct. 15,
2006.
[14] S. R. Eddy, “A memory-efficient dynamic programming algorithm for
optimal alignment of a sequence to an RNA secondary structure,” BMC
Bioinformatics, vol. 3, p. 18, Jul. 2, 2002.
[15] E. A. Rodland, “Pseudoknots in RNA secondary structures: Representation, enumeration, and prevalence,” J Comput. Biol., vol. 13, no. 6,
pp. 1197–1213, Jul./Aug. 2006.
[16] J. K. H. Chiu and Y. P. P. Chen, “Conformational features of topologically
classified RNA secondary structures,” PLoS One, vol. 7, no. 7, p. e39907,
2012.
[17] E. P. Nawrocki et al., “Infernal 1.0: Inference of RNA alignments,”
Bioinformatics, vol. 25, no. 10, pp. 1335–1337, May 15, 2009.
[18] R. Nussinov and A. B. Jacobson, “Fast algorithm for predicting the secondary structure of single-stranded RNA,” Proc. Nat. Acad. Sci. USA,
vol. 77, no. 11, pp. 6309–6313, Nov. 1980.

1271

[19] Y. Ponty, “Modélisation de séquences génomiques structurées, génération
aléatoire et applications,” Ph.D. thesis, Laboratoire de recherche en informatique, Université Paris-Sud XI, Paris, France, 2006.
[20] J. S. Reuter and D. H. Mathews, “RNAstructure: Software for RNA secondary structure prediction and analysis,” BMC Bioinformatics, vol. 11,
p. 129, 2010.
[21] K. Rother et al., “A toolbox for developing bioinformatics software,”
Briefings Bioinformatics, vol. 13, no. 2, pp. 244–257, Mar. 2012.
[22] G. Chojnowski et al., “RNA Bricks-a database of RNA 3D motifs and
their interactions,” Nucleic Acids Res., vol. 42, no. D1, pp. D123–D131,
Jan. 2014.
[23] M. Bon et al., “Topological classification of RNA structures,” J. Molecular
Biol., vol. 379, no. 4, pp. 900–911, Jun. 13, 2008.
[24] F. Gavril, “Algorithms for a maximum clique and a maximum independent
set of a circle graph,” Networks, vol. 3, no. 3, pp. 261–273, 1973.
[25] K. J. Supowit, “Finding a maximum planar subset of a set of nets in a
channel,” IEEE Trans. Comput.-Aided Des. Integr. Circuits Syst., vol. 6,
no. 1, pp. 93–94, Jan. 1987.
[26] T. Asano et al., “Finding a maximum weight independent set of a circle
graph,” IEICE Trans. Commun. Electron. Inf. Syst., vol. 74, no. 4, pp.
681–683, Apr. 1991.
[27] O. Goldschmidt and A. Takvorian, “An efficient algorithm for finding
a maximum weight independent set of a circle graph,” IEICE Trans.
Fundamentals Electron. Commun. Comput. Sci., vol. E77a, no. 10,
pp. 1672–1674, Oct. 1994.
[28] G. Valiente, “A new simple algorithm for the maximum-weight independent set problem on circle graphs,” in Proc. 14th Int. Symp. Algorithms
Comput., 2003, , pp. 129–137.
[29] N. Nash et al., “Efficiently implementing maximum independent set
algorithms on circle graphs,” J. Exp. Algorithmics, vol. 13, p. 9, 2009.
[30] J. R. Griggs et al., “The number of maximal independent sets in a connected graph,” Discr. Math., vol. 68, no. 2/3, pp. 211–220, 1988.
[31] Z. Füredi, “The number of maximal independent sets in connected graphs,”
J. Graph Theory, vol. 11, no. 4, pp. 463–470, 1987.
[32] J. W. Moon and L. Moser, “On cliques in graphs,” Israel J. Math., vol. 3,
no. 1, pp. 23–28, 1965.
[33] D. H. Turner and D. H. Mathews, “NNDB: The nearest neighbor parameter database for predicting stability of nucleic acid secondary structure,”
Nucleic Acids Res., vol. 38, pp. D280–D282, Jan, 2010.
[34] J. M. Byskov, “Enumerating maximal independent sets with applications
to graph colouring,” Operations Res. Lett., vol. 32, no. 6, pp. 547–556,
Nov. 2004.
[35] R. Lorenz et al., “ViennaRNA package 2.0,” Algorithms Mol. Biol.,
vol. 6, p. 26, 2011.
[36] M. Andronescu et al., “RNA STRAND: The RNA secondary structure
and statistical analysis database,” BMC Bioinformatics, vol. 9, p. 340,
2008.

Jimmy Ka Ho Chiu received the B.Eng. degree in
information engineering, and the M.Sc. (with distinction) degree in computer science from the University
of Hong Kong, Pok Fu Lam, Hong Kong, in 2002 and
2008, respectively. He is currently working toward
the Ph.D. degree in computer science at La Trobe
University, Melbourne, Australia.
His research interests include bioinformatics,
databases and data mining.

Yi-Ping Phoebe Chen (M’04–SM’07) received the
B.Inf.Tech. and the Ph.D. degrees in computer science from the University of Queensland, Queensland,
Australia.
She is currently a Professor and the Chair of
the Department of Computer Science and Computer Engineering, La Trobe University, Melbourne,
Australia.
Dr. Chenis also the Chief Investigator of the ARC
Center of Excellence in Bioinformatics. She is the
Steering Committee Chair of the Asia Pacific Bioinformatics Conference (founder) and Multimedia Modeling. She has been involved in research on bioinformatics, health informatics, multimedia databases,
query systems and systems biology. She is the coauthor of more than 200 research papers with many published in top journals and conferences.

