600

IEEE TRANSACTIONS ON BIOMEDICAL ENGINEERING, VOL. 62, NO. 2, FEBRUARY 2015

Uniformization Method for Solving Cardiac
Electrophysiology Models Based
on the Markov-Chain Formulation
Johnny Moreira Gomes, Adriele Alvarenga, Ricardo Silva Campos, Bernardo Martins Rocha,
Ana Paula Couto da Silva, and Rodrigo Weber dos Santos∗

Abstract—This paper compares different numerical methods for
the solution of myocyte models of cardiac electrophysiology. In particular, it presents how the technique called uniformization method
substantially increases the stability of simple first-order methods
such as Euler explicit method and Rush–Larsen (RL) method, for
the solution of modern electrophysiology models that are based
on continuous-time Markov chains (MCs) for the description of
subcellular structures, such as ion channels. The MCs are often
associated with stiff ordinary differential equations that severely
limit the time step used by these traditional methods. By using
the uniformization method, we could significantly increase the time
steps for the solution of different cardiac electrophysiology models and improve the computational performance up to 150 times
compared to the performance of Euler’s and RL’s methods.
Index Terms—Cardiac electrophysiology, computational modeling, computational physiology, Markov chains (MCs), numerical
methods.

I. INTRODUCTION
OMPUTATIONAL models of cardiac electrophysiology
have become valuable tools for the study and comprehension of the complex phenomena of cardiac physiology, as
they allow different information acquired from different physical scales and experiments to be combined to generate a better
picture of the whole system functionality. Not surprisingly, the
high complexity of the biophysical processes translates into
complex mathematical and computational models. Mathematical models for cell electrophysiology are a key component of
cardiac modeling. They serve both as standalone research tools,
to investigate the behavior of single cardiac myocytes, and as
an essential component of tissue and organ simulation based

C

Manuscript received May 1, 2014; revised August 17, 2014; accepted September 22, 2014. Date of publication October 3, 2014; date of current version January 16, 2015. This work was supported by the authors individual grants from
CNPq, CAPES, FINEP, UFJF, and FAPEMIG. Asterisk indicates corresponding
author.
J. Moreira Gomes, A. Alvarenga, and B. M. Rocha are with the Department of
Computer Science and Graduate Program in Computational Modeling, Federal
University of Juiz de Fora, Juiz de Fora 36036-330, Brazil (e-mail: johnnysn@
gmail.com; dri.leela@gmail.com; bernardomartinsrocha@gmail.com).
R. Silva Campos is with the Graduate Program in Computational Modeling,
Universidade Federal de Juiz de Fora, Juiz de Fora 36036-330, Brazil (e-mail:
cadimjf@gmail.com).
A. P. C. d. Silva is with the Department of Computer Science, Universidade
Federal de Minas Gerais, Belo Horizonte 6627, Brazil (e-mail: ana.coutosilva@
dcc.ufmg.br).
∗ R. Weber dos Santos is with the Department of Computer Science and
Graduate Program in Computational Modeling, Universidade Federal de Juiz
de Fora, Juiz de Fora, 36036-330, Brazil (e-mail: rodrigo.weber@ufjf.edu.br).
Digital Object Identifier 10.1109/TBME.2014.2361325

on the so-called bidomain or monodomain models [1]. The cell
models can be written as a general nonlinear system of ordinary
differential equations (ODEs) and may vary in complexity from
simple phenomenological models [2]–[4] (based on two variables) to complex models describing a large number of detailed
physiological processes [5]–[7] (based on 80 to 139 differential variables). Simple models focus on the genesis of action
potential (AP) that propagates from cell to cell and generates
an electric wave that propagates on the heart. Complex models
account not only for the genesis of AP but also describe how this
phenomenon is related to cardiac homeostasis and to different
subcellular components, such as cell membrane’s ion channels.
Advances in genetics, molecular biology, and electrophysiology experiments have provided new data and information related to the structure and function of ion channels [8], [9]. The
Markov chain (MC) model formalism has been increasingly
used to describe both function and structure of ion channels.
The MC-based models have enabled simulations of structural
abnormalities due to genetic diseases and drug-binding effects
on ion channels [10]–[12]. Unfortunately, these modern cardiac
myocyte models pose a great challenge to numerical methods,
due to the stiffness of the ODEs introduced by MCs [13].
The Euler method and the Rush–Larsen (RL) method [14] are
both frequently used in the field. Recently, first- and secondorder extensions of the RL method were proposed by Sundnes
et al. [15]. In this paper, we name these RL extensions after
the names of the coauthors and the method order, SAST1 and
SAST2 methods, respectively.
Our computational experiments suggest that the time step of
the aforementioned methods may be limited to very small values
due to the stiffness of the equations involved, impacting negatively on the computational cost. In addition, we noticed that
most modern models that use MC formalism have their stiffness
directly related to the Markov equations. These observations
lead us to the use of the uniformization method, an alternative and specialized technique to solve the ODEs that describe
continuous-time MCs (CTMC) [16].
In this paper, we present hybrid first-order numerical methods that merge the uniformization method with Euler, RL, and
SAST1 methods. In addition, we also implemented and evaluated two-time-step versions of the hybrid methods, where, for
instance, a longer time step is used for the equations solved
with the uniformization method, and a smaller time step is used
for the equations solved by Euler method (due to its instability
concerns).

0018-9294 © 2014 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See http://www.ieee.org/publications standards/publications/rights/index.html for more information.

MOREIRA GOMES et al.: UNIFORMIZATION METHOD FOR SOLVING CARDIAC ELECTROPHYSIOLOGY MODELS

Four different cardiac myocyte models were used in the numerical experiments. In all the tests, the uniformization method
has greatly reduced the execution times of the simulations. By
using the uniformization method, we could significantly increase
the time steps used in the solution of the different cardiac electrophysiology models and decrease the runtime of the simulations by up to 150 times when compared to the runtimes of the
aforementioned methods.
II. PRELIMINARIES
A. Electrophysiology Models
Consider a standard cardiac electrophysiology model that
may have MCs, Hodgkin–Huxley (HH) equations, and nonlinear equations that describe the membrane potential, ion fluxes,
→
−
and concentrations. Let Y be the model’s ODE’s variables vector, with Nvar components. We will categorize each differential
equation into one of three possible classes: fully nonlinear equation; HH type equation or gating variable; and MC equation.
The transmembrane potential equation for this generic model
is the first nonlinear equation and has the form of (1), where Ii is
an ion current number i that crosses the membrane’s channels,
Cm is the capacitance of the membrane, V is the transmembrane
potential, and Nion the number of ion currents in the model. The
remaining nonlinear variables ynj l would have equations in the
generic form of (2), where fnj l are fully nonlinear functions
and j varies from 2 to Nn l , which is the total number of fully
nonlinear equations.
Consider that we have Nhh gate variables in the model, each
j
represents one of these varione a HH type equation. Let yhh
ables, with j = 1, 2, . . . , Nhh . Their corresponding equations
are described by (3), which can be considered as a quasi-linear
equation, despite of the fact that αj and βj are indeed nonlinear
functions of the transmembrane potential.
j
Finally, the variables of MCs, denoted by ym
k , are described
by (4), where Nm k is the number of these variables and j =
1, 2, . . . , Nm k . In (4), αji is the transition rate from the state
j
j
i
i
ym
k to the state ym k in an MC. Clearly, if ym k and ym k belong
j
i
to different MCs, then αi = αj = 0.
Nio n
dyn1 l
dV
1 
=
=−
Ii
dt
dt
Cm i=1

(1)

dynj l
→
−
= fnj l ( Y , t)
dt

(2)

j
dyhh
→
j −
j
j
= fhh
( Y , t) = αj (1 − yhh
) − βj yhh
dt

(3)

N
N
j
mk
mk


dym
→
−
j
j
j
i
k
= fm
(
Y
,
t)
=
−y
α
+
αji ym
k.
i
k
mk
dt
i=1,i= j

(4)

i=1,i= j

After all these explicit classifications, in this paper, we may
also generalize our myocyte model and described it by
dy j
→
−
= f j ( Y , t)
dt

(5)

601

→
−
where the time derivative of the generic variable y j is f j ( Y , t).
B. Numerical Methods
Several numerical methods have been described that focuses
on the solution of cardiac electrophysiology models [17]. In
what follows, we present the explicit methods that were implemented in this study: the set of traditional methods for the
solution of differential equations and the uniformization method
typically used for transient performance measures in MCs.
1) Traditional Methods:
1) Euler: This method is the simplest method for solving
systems of ODEs. It is of first-order accuracy and its stability is linked to the magnitude of the used time step and
the equations’ characteristics. The method’s formulation
for an ODEs’ system can be represented by
−
→
(6)
ynj +1 = ynj + hf j (Yn , tn )
where h is the time step and tn = n h.
2) Second-Order Runge–Kutta: The second-order Runge–
Kutta (RK2) or Heun’s method is an explicit second-order
method for solving ODEs. A version of its formulation for
a system of ODEs is given by
h
(a + b)
2
−
→
a = f j (Yn , tn )
→−
−
−
→
→
b = f j (Yn + h f (Yn , tn ), tn + h).

ynj +1 = ynj +

(7)
(8)
(9)

3) Rush–Larsen (RL): The method proposed by RL [18] is
very popular in the community of cardiac electrophysiology and focus on the gating variables from Hodgkin
and Huxley’s formulation [19]. This method considers
the coefficients αj and βj of the gating variables’ equations, which have the form of (3), approximately constant
in a small time interval. Therefore, the method consists
of a local linearization of the gating variables’ equations
(also called quasi-linear equations), which are numerically solved by


αj
αj
(10)
ynj +1 = ynj −
e−(α j +β j )h +
αj + βj
αj + βj
k = |αj + βj |

(11)

where h is the time step. The remaining equations of the
model are evaluated by the Euler method. Therefore, this
is a first-order method. If the value of k, defined by (11),
is close to zero we use the Euler method instead of (10)
for the corresponding gating variable at that point of the
simulation.
4) First-Order Sundnes et al.: The first-order version of
Sundnes et al. method (SAST1) extends the RL method
for each and every differential Equation of the model.
This is achieved after the following linearization around
y j (tn ), where tn = nh and h is the time step:
dy j (t)
→
−
= f j ( Y (tn ), tn ) + k(y j (t) − y j (tn ))
dt

(12)

602

IEEE TRANSACTIONS ON BIOMEDICAL ENGINEERING, VOL. 62, NO. 2, FEBRUARY 2015

k=

→
−
∂f j ( Y (tn ), tn )
.
∂y j

(13)

This can now also be considered a quasi-linear equation with an analytic solution similar to the RL one. The
SAST1 method is presented in (14), where the partial
derivative is approximated via finite differentiation. Just
like in the RL method’s section, it is necessary to verify
the value of k. If it is almost zero, we use the Euler method
instead.
−
→
f j (Yn , tn ) hk
(e − 1)
(14)
ynj +1 = ynj +
k
−
→
∂f j (Yn , tn )
(15)
k=
∂y j
In the original paper [15], each differential equation related to MC models was also treated as a quasi-linear
→
−
j
equation, and the term k = ∂ f (∂Yy jn ,t n ) was obtained ana mk
j
lytically by simple inspection of (4) (k = − N
i=1,i= j αi )
rather than via finite differentiation. However, in a more
recent paper [14], the term k was always obtained via finite differentiation, except in the HH like equations, Yhh ,
where the RL method was used. In this paper, for simplicity, we have adopted the same strategy as proposed in [14]
for the computation of the term k.
5) Second-Order Sundnes et al.: This method is the original technique proposed by Sundnes et al. (SAST2) [15],
which has an accuracy of second order. The process is
accomplished in the following two steps, for each ODE
system’s variable y j : (1) With the last calculated solution
→
−
vector, Y n , we evaluate yni +1/2 for every i = j by (16);
−
→
(2) Let W = (yn1 +1/2 , yn2 +1/2 , . . . , ynj , . . . , ynm+1/2 ). The
value for ynj +1 is determined by (17), where k =
−
→
∂ f j ( W ,t n )
. Just like in the original RL method, the values
∂yj

of k and k are always tested before their use in equations
(16) and (17). If k or k is near zero, the corresponding
Euler step is used instead.
→
−
f j ( Y n , tn ) h k
(e 2 − 1)
k
−
→
f j (W , tn ) hk
= ynj +
(e − 1).
k

yni +1/2 = yni +
ynj +1

(16)
(17)

2) Uniformization: Proposed by Jensen in 1953 [20], [21],
the uniformization (or randomization) method has received considerable attention during the last years and it is considered by
some authors the most efficient technique for the transient analysis of Markov models. The method is traditionally used for
reliability, dependability, and performance analysis of computer
systems modeled by Markov models.
The method consists of the local linearization of the Markov
equations, the transformation of the process from a CTMC
to a discrete-time MC and the application of the Poisson
process [22].

→
−
Let Y m k (t) be the probability vector of the CTMC and A
the associated transition matrix given by [A]ij = αji , for i = j
and
N
mk


[A]ii = −

αij

i=1,i= j

→
−
→
−
so the associated system of ODEs is given by d Ydtm k = A Y m k .
If we consider the terms [A]ij as constant in a small time interval,
the ODEs’ system describing the CTMC will be locally linear.
→
−
Therefore, the solution of the system is given by Y m k (t) =
→
−
etA Y m k (0), where the matrix exponential is defined by the

(tA ) i
Taylor series as etA = ∞
i=0
i! .
The direct usage of matrix A leads to numerical errors and
slow convergence in the evaluation of the series. The main reasons for this are: 1) diagonal terms of A are negative and the
remaining terms are nonnegative and 2) the existence of terms
with magnitude greater than 1. The uniformization method defines A∗ = A/q + I, where q ≥ max1≤i≤N m k |[A]ii | and Nm k
is the number of the CTMC’s states. Since A = q(A∗ − I),
∗
∗−
→
−
→
→
−
we have Y m k (t) = Y m k (0)eq t(A −I ) = e−q t eq tA Y m k (0), so
→
−
the resulting solution using the Taylor’s series is Y m k (t) =
∞
 (qtA∗ )i −
→
e−q t
Y m k (0).
i!
i=0
The final formulation from time tn until tn +1 is given by
N (t n )
 (A∗ (tn )q(tn )h)i −
−
→
→
Y m k ,n +1 = e−q (t n )h
Y m k ,n (18)
i!
i=0

A∗ (tn ) =

A(tn )
+I
q(tn )

(19)

q(tn ) ≥

max |[A(tn )]ii |

(20)

1≤i≤N m k

where A(tn ) is the transition matrix of the CTMC at time tn
→
−
and Y m k ,n is the corresponding probability vector, containing
the variables of the CTMC as its components.
The truncation of the sum in (18) is determined by the parameter N (tn ), which can be estimated by
λ ≤ 1 − e−q (t n )h

N

(q(tn )h)i
i=0

i!

(21)

where λ is a chosen absolute error tolerance.
It is possible to prove that the truncation error in each com→
−
ponent of Y m k ,n cannot be greater than λ in magnitude [16].
The parameter N (tn ) is calculated for every MC for each iteration in time, because the corresponding transition rates vary
with time, i.e., matrix A(tn ) is different for each iteration n of
time. Nevertheless, the computational cost for the calculation
of N (tn ) is negligible when compared to the whole cost of the
uniformization method. This is because we first calculate N (tn )
and during this calculation all the terms inside the summation
i
( (q (t ni!)h) ) as well as the term e−q (t n )h are stored to be later
reused in (18) that defines the uniformization method.

MOREIRA GOMES et al.: UNIFORMIZATION METHOD FOR SOLVING CARDIAC ELECTROPHYSIOLOGY MODELS

TABLE I
NUMERICAL SOLVERS USING A SINGLE TIME STEP (h)

603

IV. EXPERIMENTS
A. Evaluated Models

Solver

Equations NL (2)

Equations HH (3)

Equations MC (4)

Euler
Euler + UNI
RL
RL + UNI
SAST1
SAST1 + UNI
RK2
SAST2

Euler
Euler
Euler
Euler
SAST1
SAST1
RK2
SAST2

Euler
Euler
RL
RL
RL
RL
RK2
SAST2

Euler
Uniformization
Euler
Uniformization
SAST1
Uniformization
RK2
SAST2

TABLE II
NUMERICAL SOLVERS USING TWO TIME STEPS (h 1 < h 2 )
Equations NL (2)

Equations HH (3)

Equations MC (4)

Solver

Method

Δt

Method

Δt

Method

Δt

Euler + UNI
RL
RL + UNI
SAST1
SAST1 + UNI

Euler
Euler
Euler
SAST1
SAST1

h1
h1
h1
h1
h1

Euler
RL
RL
RL
RL

h1
h2
h2
h2
h2

Uniformization
Euler
Uniformization
SAST1
Uniformization

h2
h1
h2
h1
h2

III. HYBRID NUMERICAL SOLUTION TECHNIQUES
The main contribution of this paper is to introduce the use
of the uniformization method to calculate the equations that
are described by MCs in models of cardiac electrophysiology.
The main idea of our hybrid methods is to explore the stability
and probability interpretation of the uniformization method and
combine it with traditional numerical methods for the solution
of ODEs. We extensively investigate the performance of the
following hybrid techniques.
1) Euler and uniformization methods: In this technique,
uniformization method is applied to (4) (MC-type). Euler
method solves the remaining equations of the model. This
first method will be referred to as Euler + UNI.
2) RL and Uniformization methods: Uniformization method
is used for solving equations (4) (MC type). An RL method
is used to solve (7) (HH-type) and the Euler’s method is
used for the evaluation of (1) and (2) (NL-type). Here, this
second method will be referred to as RL + UNI.
3) First-Order Sundnes et al. and Uniformization Methods:
First-order Sundnes et al. method is used for solving (1),
(2), and (3). Equation (4) are evaluated by the uniformization method. We denote this hybrid method by SAST1 +
UNI.
Table I presents the different solvers implemented in this
paper, specifying which technique from Section II-B is used to
solve each group or type of equations.
Aiming to explore the stability provided by the RL method for
(3) and by the uniformization method for (4), we also produced
solvers using two different time steps: h1 < h2 , where h2 is
used by the method with higher stability. Table II presents how
this partitioning is implemented for each numerical method.

In what follows, we briefly introduce four different cardiac
electrophysiology models found in the literature. We will investigate the performance of proposed hybrid numerical techniques
by solving the models’ equations related to each model.
In [23], Bondarenko et al. introduce a model that aims to describe the mouse ventricular myocytes. This model is composed
by 45 state variables, 26 of them are associated with 4 MCs of
4 to 9 states, 8 are gating variables, and the remaining 11 are
fully nonlinear variables. Winslow et al. [24] present a canine
ventricular myocyte model, composed by 33 state variables, including 9 fully nonlinear variables, 7 gating variables and two
MCs containing 4 and 12 state variables. Iyer et al. [13] model
the myocyte of the human left ventricle using 67 ODEs, 57 of
them in the form of MCs, with a number of states that vary from
4 to 13. The model also has nine fully nonlinear variables and
only one gating variable. Finally, the fourth model is from Luo
and Rudy [25]. This model is simple, with six quasi-linear ODEs
and two fully nonlinear ODEs. Moreover, the model presented
does not have any MC.
Here, we named each of the presented models as Bondarenko
et al., Winslow et al., Iyer et al., and Luo–Rudy models, respectively.
B. Metrics
The methods implemented in this study will be compared in
terms of execution time, time step (longer suggests a more stable
method), and numerical error. The error values are calculated
by (22), considering the discretized transmembrane potential
values vk

(vkExact − vk )2
error = 
(22)
(vkExact )2
where vk is the discretization of V (kh) and h is the time step.
As exact solutions, we consider the results obtained by the RK2
method with the following time steps: 10−5 ms for Bondarenko
et al. model, 10−6 ms for Winslow et al. model, 10−5 ms for
Iyer et al. model, and Luo–Rudy model. For the schemes that
used the uniformization method, the tolerance λ of (21) was set
to 10−6 .
For the Iyer et al. and Bondarenko et al. models we simulated 1 s of electrical activity. For the model by Luo–Rudy the
simulations were performed from t = 0 until t = 20 s and for
the Winslow et al. model from t = 0 until t = 2 s. The pacing rate was 12.5 Hz for Bondarenko et al. model and 1 Hz
for the remaining models. Every presented execution time or
rutime of the simulations is an average value taken out of ten
simulations. The standard deviation was also calculated and was
always below 5%.
C. Implementation
For each model described in Section IV-A, the solvers based
on Euler and RK2 methods were implemented in C++ code,

604

IEEE TRANSACTIONS ON BIOMEDICAL ENGINEERING, VOL. 62, NO. 2, FEBRUARY 2015

TABLE III
SIMULATION RESULTS—BONDARENKO et al.
0.2% Tolerance

1% Tolerance

5% Tolerance

Method

h(ms)

Time(s)

h(ms)

Time(s)

h(ms)

Time(s)

Euler
Euler + UNI
RL
RL + UNI
SAST1
SAST1 + UNI
RK2
SAST2

1.97 × 10 −4
6.34 × 10 −4
1.97 × 10 −4
6.34 × 10 −4
4.22 × 10 −4
2.53 × 10 −3
1.97 × 10 −4
1.10 × 10 −2

11.25
8.27
13.07
10.12
21.43
3.33
22.61
1.08

1.97 × 10 −4
1.02 × 10 −3
1.97 × 10 −4
1.02 × 10 −3
1.96 × 10 −3
2.01 × 10 −2
1.97 × 10 −4
1.36 × 10 −2

11.25
5.26
13.07
6.34
4.62
0.48
22.61
0.91

1.97 × 10 −4
1.02 × 10 −3
1.97 × 10 −4
1.02 × 10 −3
6.99 × 10 −3
7.24 × 10 −2
1.97 × 10 −4
1.36 × 10 −2

11.25
5.26
13.07
6.34
1.31
0.16
22.61
0.91

TABLE IV
SIMULATION RESULTS—WINSLOW et al.
0.2% Tolerance

1% Tolerance

5% Tolerance

Method

h(ms)

Time(s)

h(ms)

Time(s)

h(ms)

Time(s)

Euler
Euler + UNI
RL
RL + UNI
SAST1
SAST1 + UNI
RK2
SAST2

1.14 × 10 −4
1.10 × 10 −3
1.14 × 10 −4
1.10 × 10 −3
1.18 × 10 −5
1.32 × 10 −3
1.14 × 10 −4
1.74 × 10 −4

24.48
4.49
26.60
4.75
615.44
6.31
39.24
110.97

1.14 × 10 −4
2.51 × 10 −3
1.14 × 10 −4
2.52 × 10 −3
5.92 × 10 −5
1.40 × 10 −2
1.14 × 10 −4
4.33 × 10 −4

24.48
2.10
26.60
2.23
138.92
0.73
39.24
44.54

1.14 × 10 −4
2.98 × 10 −3
1.14 × 10 −4
2.99 × 10 −3
2.26 × 10 −4
2.17 × 10 −2
1.14 × 10 −4
2.52 × 10 −3

24.48
1.84
26.60
1.94
37.51
0.51
39.24
7.65

TABLE V
SIMULATION RESULTS—IYER et al.
0.2% Tolerance

1% Tolerance

5% Tolerance

Method

h(ms)

Time(s)

h(ms)

Time(s)

h(ms)

Time(s)

Euler
Euler + UNI
RL
RL + UNI
SAST1
SAST1 + UNI
RK2
SAST2

1.87 × 10 −4
1.41 × 10 −3
1.87 × 10 −4
1.43 × 10 −3
6.50 × 10 −5
3.53 × 10 −2
1.87 × 10 −4
5.14 × 10 −4

14.41
9.33
14.53
9.43
130.34
1.10
28.01
33.69

1.87 × 10 −4
3.16 × 10 −3
1.87 × 10 −4
3.16 × 10 −3
2.99 × 10 −4
4.45 × 10 −2
1.87 × 10 −4
1.51 × 10 −3

14.41
4.89
14.53
4.97
28.2
0.96
28.01
11.52

1.87 × 10 −4
3.27 × 10 −3
1.87 × 10 −4
3.27 × 10 −3
1.42 × 10 −3
4.45 × 10 −2
1.87 × 10 −4
4.01 × 10 −3

14.41
4.76
14.53
4.81
5.89
0.96
28.01
4.33

and generated automatically via the AGOS tool [26]. Solvers
based on RL, SAST1, and SAST2 methods were manually implemented. Source codes for the uniformization method were
generated by the Tangram II tool [27].
D. Computational Resources
Simulations presented here were performed on a computer
with an Intel i7 processor (3.07 GHz), 8 GB of RAM memory
and operating system Linux Fedora 19.
V. RESULTS
A. Uniform Time Discretization
Tables III–VI compare the implemented numerical solvers in
terms of execution time, time step (longer suggests a more stable

method) and numerical error. Here, h denotes the higher value
for the time step that generated solutions with numerical errors,
given by (22), that were smaller than predefined tolerances (tol)
of 0.2%, 1.0%, and 5.0%.
We can notice that both RL, Euler, and RK2 methods are
impaired by instability issues, since the associated maximum
time steps (h) could not be increased even by changing the
tolerance from 0.2% to 5.0%. For the models that use MC
formulations for ion channels, the time steps h for RL, Euler,
and RK2 methods are independent of tol. Of course, this does
not happen for the Luo–Rudy model. Table VI shows why RL
is extensively used by the cardiac modeling community. For the
case of HH-based formulations, the maximum time step h of
RL increases by an order of magnitude when tol increases from
0.2% to 5.0%, whereas the Euler and RK2 methods are still
impaired by stability constraints, a fact that is well known.

MOREIRA GOMES et al.: UNIFORMIZATION METHOD FOR SOLVING CARDIAC ELECTROPHYSIOLOGY MODELS

605

TABLE VI
SIMULATION RESULTS—LUO–RUDY
0.2% Tolerance

1% Tolerance

5% Tolerance

Method

h(ms)

Time(s)

h(ms)

Time(s)

h(ms)

Time(s)

Euler
RL
SAST1
RK2
SAST2

1.15 × 10 −2
1.18 × 10 −2
1.06 × 10 −2
1.16 × 10 −2
1.75 × 10 −2

1.63
1.92
3.08
3.35
3.97

1.23 × 10 −2
5.01 × 10 −2
5.78 × 10 −2
1.23 × 10 −2
9.81 × 10 −2

1.53
0.48
0.57
3.16
0.73

1.23 × 10 −2
3.91 × 10 −1
6.34 × 10 −1
1.23 × 10 −2
9.56 × 10 −1

1.53
0.07
0.06
3.16
0.07

The methods proposed by Sundnes et al. (SAST1 and SAST2)
alleviate the stability constraints and allow h to increase with the
tolerance. The same happens with the proposed hybrid methods
based on the uniformization method (Euler + UNI, RL + UNI,
and SAST1 + UNI). All these methods allowed the use of time
steps one order of magnitude greater than those used by RL
or Euler method. Nevertheless, only one method consistently
allowed h to be two orders of magnitude greater than those used
by Euler or RL: the SAST1 + UNI hybrid method.
In terms of execution time, SAST1 and SAST2 methods were
always slower than Euler or RL methods for the strict tolerance
of 0.2% (with an exception for the SAST2 method used in the
Bondarenko et al. model, III). The SAST1 and SAST2 methods
were only consistently faster than Euler and RL for the case
of loose tolerance, 5%. However, for the particular case of the
Luo–Rudy model, Table VI, these methods were as fast as RL
for the case of tol = 5.0%.
On the other hand, all the hybrid methods based on the uniformization method outperformed the RL and Euler methods
for all the evaluated cases of tolerance. In addition, the fastest
hybrid method was again the SAST1 + UNI, which was, as
described before, the method that could use the longest time
steps (most stable one). The results suggest that the explicit uniformization method is an inexpensive method that considerably
alleviates the stability issues of the models based on Markov
formulation. The gains in performance obtained by the SAST1
+ UNI hybrid method are summarized in Table VII. SAST1 +
UNI was up to 13-fold faster than RL or Euler method for the
case of strict tolerance, tol = 0.2%, (Iyer et al. model), and up
to 86-fold faster for the case of tol = 5.0% (Bondarenko et al.
model).
B. Partitioned Time Discretization
Tables VIII–XI compare the implemented numerical solvers
of first order using two different time steps: h2 > h1 , where h2
is used by the method with higher stability. Table II presents how
this partitioning is implemented for each numerical method. The
shorter time step h1 was set to the same values of h presented
before in Tables III–VI. The longer time step h2 was increased
up to a maximum value that generated solutions with numerical
errors, given by (22), that were smaller than the predefined
tolerances (tol) of 0.2%, 1.0%, and 5.0% .
In terms of the longest time step (h2 ), we note that, for all
the models based on Markov formulations, h2 could be increased by one or two order of magnitudes in comparison to h1

TABLE VII
GAINS IN PERFORMANCE FOR SINGLE TIME STEP SAST1 + UNI
WITH RESPECT TO EULER AND RL METHODS
0.2% Tolerance

1% Tolerance

5% Tolerance

Model

Euler

RL

Euler

RL

Euler

RL

Bondarenko et al.
Winslow et al.
Iyer et al.

3.38
3.88
13.1

3.92
4.22
13.2

23.4
33.5
15.0

27.2
36.4
15.1

70.3
48.0
15.0

85.6
52.2
15.1

(see Tables VIII–X). However, for the Luo–Rudy model
(see Table XI) modest increases on h2 were obtained, between
2 and 20-fold. Nevertheless, we were always able to increase
h2 . This suggests that the partitioning based on the numerical
method proposed by Table II was very efficient.
The use of two different time steps was also reflected in the
execution times. Gains in performance were always achieved
for every model, method and tolerance and are summarized in
Table XII. The methods that benefited most from the two-timestep partitioning were those that used the Euler method for some
of the equations in the models: RL, Euler+ UNI, and RL + UNI
(see Table II). The two-time-step methods were up to sixfold
faster than single-time-step methods for the Iyer et al. model
and at least 75% faster for the Luo–Rudy model.
Recently, in [14], a different two-time-step partitioning was
proposed and tested. The partitioning was based on the stiffness of each equation of a model, which had to be previously
evaluated by the computation of eigenvalues along the integration of the model. The Euler method was used for the entire
ODE system on the nonstiff portion of the time domain and the
SAST1 method was used for the stiff variables. The gains in
performance reported in [14] were between ninefold and 12%
faster than SAST1 or RL. Therefore, both types of two-time-step
partitioning have achieved similar results.
VI. DISCUSSION
Although the results presented in this paper were obtained using four specific myocyte models, they provide enough material
and information that allow us to make, with some precautions,
generalizations with respect to how other myocyte models could
benefit from these numerical methods.
The first two important messages are: 1) the hybrid method
SAST1 + UNI achieved the best performance in terms of runtimes to handle modern cardiac myocyte models based on MC

606

IEEE TRANSACTIONS ON BIOMEDICAL ENGINEERING, VOL. 62, NO. 2, FEBRUARY 2015

TABLE VIII
SIMULATION RESULTS WITH TWO TIME STEPS—BONDARENKO et al.
0.2% Tolerance

1% Tolerance

5% Tolerance

Method

h 1 (ms)

h 2 (ms)

Time(s)

h 1 (ms)

h 2 (ms)

Time(s)

h 1 (ms)

h 2 (ms)

Time(s)

Euler + UNI
RL
RL + UNI
SAST1
SAST1 + UNI

6.34 × 10 −4
1.97 × 10 −4
6.34 × 10 −4
4.22 × 10 −4
2.53 × 10 −3

6.34 × 10 −2
1.97 × 10 −2
6.34 × 10 −2
4.22 × 10 −2
5.06 × 10 −2

2.34
9.83
3.25
20.15
1.63

1.02 × 10 −3
1.97 × 10 −4
1.02 × 10 −3
1.96 × 10 −3
2.10 × 10 −2

1.02 × 10 −1
1.97 × 10 −2
1.02 × 10 −1
1.96 × 10 −2
2.52 × 10 −1

1.46
9.83
2.05
4.38
0.26

1.02 × 10 −3
1.97 × 10 −4
1.02 × 10 −3
6.99 × 10 −3
7.24 × 10 −2

1.02 × 10 −1
1.97 × 10 −2
1.02 × 10 −1
2.79 × 10 −2
3.62 × 10 −1

1.46
9.83
2.05
1.25
0.09

TABLE IX
SIMULATION RESULTS WITH TWO TIME STEPS—WINSLOW et al.
0.2% Tolerance

1% Tolerance

5% Tolerance

Method

h 1 (ms)

h 2 (ms)

Time(s)

h 1 (ms)

h 2 (ms)

Time(s)

h 1 (ms)

h 2 (ms)

Time(s)

Euler + UNI
RL
RL + UNI
SAST1
SAST1 + UNI

1.10 × 10 −3
1.14 × 10 −4
1.10 × 10 −3
1.18 × 10 −5
1.32 × 10 −3

2.20 × 10 −2
1.14 × 10 −2
2.20 × 10 −2
1.18 × 10 −3
1.45 × 10 −2

1.93
16.52
1.45
608.12
1.92

2.00 × 10 −3
1.14 × 10 −4
2.00 × 10 −3
5.92 × 10 −5
1.10 × 10 −2

6.00 × 10 −2
1.14 × 10 −2
6.00 × 10 −2
5.92 × 10 −3
5.50 × 10 −2

1.05
16.52
0.80
134.67
0.58

2.40 × 10 −3
1.14 × 10 −4
2.40 × 10 −3
2.26 × 10 −4
2.00 × 10 −2

7.20 × 10 −2
1.14 × 10 −2
7.20 × 10 −2
2.26 × 10 −3
8.00 × 10 −2

0.89
16.52
0.68
35.08
0.36

TABLE X
SIMULATION RESULTS WITH TWO TIME STEPS—IYER et al.
0.2% Tolerance

1% Tolerance

5% Tolerance

Method

h 1 (ms)

h 2 (ms)

Time(s)

h 1 (ms)

h 2 (ms)

Time(s)

h 1 (ms)

h 2 (ms)

Time(s)

Euler + UNI
RL
RL + UNI
SAST1
SAST1 + UNI

1.41 × 10 −3
1.86 × 10 −4
1.43 × 10 −3
6.50 × 10 −5
2.05 × 10 −2

5.64 × 10 −2
1.86 × 10 −2
5.72 × 10 −2
6.50 × 10 −3
4.10 × 10 −2

1.79
14.34
1.76
129.71
1.08

3.16 × 10 −3
1.86 × 10 −4
3.16 × 10 −3
2.99 × 10 −4
1.10 × 10 −2

2.52 × 10 −1
1.86 × 10 −2
2.84 × 10 −1
1.20 × 10 −2
1.65 × 10 −1

0.89
14.34
0.88
28.11
0.95

3.25 × 10 −3
1.86 × 10 −4
3.25 × 10 −3
1.42 × 10 −3
1.00 × 10 −2

3.25 × 10 −1
1.86 × 10 −2
3.25 × 10 −1
1.28 × 10 −2
5.00 × 10 −1

0.84
14.34
0.85
5.82
0.79

TABLE XI
SIMULATION RESULTS WITH TWO TIME STEPS—LUO-RUDY
0.2% Tolerance

1% Tolerance

5% Tolerance

Method

h 1 (ms)

h 2 (ms)

Time(s)

h 1 (ms)

h 2 (ms)

Time(s)

h 1 (ms)

h 2 (ms)

Time(s)

RL
SAST1

1.12 × 10 −2
1.05 × 10 −2

6.72 × 10 −2
2.10 × 10 −2

0.98
2.63

5.01 × 10 −2
5.52 × 10 −2

1.50 × 10 −1
1.10 × 10 −1

0.25
0.52

3.91 × 10 −1
4.92 × 10 −2

7.82 × 10 −1
9.84 × 10 −1

0.04
0.05

TABLE XII
GAINS IN PERFORMANCE FOR USING TWO DIFFERENT TIME STEPS
Bondarenko et al.

Winslow et al.

Iyer et al.

Luo–Rudy

Tolerance

0.2%

1%

5%

0.2%

1%

5%

0.2%

1%

5%

0.2%

1%

5%

Method
Euler + UNI
RL
RL + UNI
SAST1
SAST1 + UNI

3.53
1.33
3.11
1.06
2.04

3.60
1.33
3.09
1.05
1.85

3.60
1.33
3.09
1.04
1.78

2.33
1.61
3.27
1.01
3.29

2.00
1.61
2.79
1.03
1.26

2.07
1.61
2.85
1.07
1.42

5.21
1.01
5.36
1.00
1.02

5.49
1.01
5.65
1.00
1.01

5.67
1.01
5.66
1.01
1.21

1.96
1.51
-

1.92
1.10
-

1.75
1.20
-

MOREIRA GOMES et al.: UNIFORMIZATION METHOD FOR SOLVING CARDIAC ELECTROPHYSIOLOGY MODELS

formulation (we will next discuss how these two techniques
complement each other to achieve this distinct position) and 2)
this hybrid method is not unconditionally stable, which is unfortunate but still a very important property to be known. This fact
can be easily verified from the results of SAST1 + UNI for Iyer
et al. model (see Table V). We could not increase the time step
of the SAST1 + UNI method after relaxing the error tolerance
from 1% to 5% due to stability issues.
Let us analyze the performance of these methods. We remind the reader that execution time is the product of the cost
of a single iteration by the number of iterations, which is inversely proportional to the time step h. The SAST1, SAST2,
and all the hybrid methods implemented are more complex
and have a higher cost per iteration than Euler or RL methods. In our experiments, SAST1 was between 1.4 and 4.1
times more expensive than RL. The overhead of uniformization
method can be measured by the cost of Euler + UNI method,
which was between 1.8 and 5.7, i.e., comparable to the cost of
SAST1. The SAST2 was more expensive, near twice the cost
of SAST1 and it was between 3.8 and 6.8 times more expensive
than RL.
We can provide analytic formulas for the cost of these methods. For instance, let us consider the Euler method and assume
that the cost to evaluate each right-hand side f j is equal to
C. The cost for each iteration of Euler (or RL) method is:
Eulercost = Nvar C. For SAST1 method, we need the computation of the right-hand side as in Euler and the computation
of the partial derivative of f j for each variable. However, for
a quasi-linear equation, this cost is near zero, whereas for a
nonlinear equation it is equal to C. Therefore, the cost for each
iteration of SAST1 method is: SAST1cost = (Nvar + Nn l )C.
The lower bound for the ratio between SAST1 and RL or Euler methods costs is: Ratio1 = 1 + Nn l /Nvar . For the Luo–
Rudy model, we have Nvar = 8 and Nn l = 2, which gives us
Ratio1 = 1.25. Indeed, from our result, we observed that SAST1
was 1.37 slower than an RL method for the Luo–Rudy model.
Similar formulas can be derived for all the numerical methods
presented in this paper. This is an important a priori information
that can be obtained for any particular combination of method
and model. However, the cost per se does not correlate to the
final execution time. For instance, for Iyer et al. model the cost
per time step of Euler + UNI was near twice the one of SAST1
method. However, as presented in Table V, execution times of
Euler + UNI were always smaller than those of SAST1. The
reason is that for this case (see Table V), the time steps h used
by Euler + UNI were always longer than those used by SAST1.
All the explicit methods implemented and tested in this paper are conditionally stable, i.e., for each pair method–model,
there is a limit for how much h can be increased. As we will
discuss later, this is related to the eigenvalues of the Jacobian
matrix of the system of ODEs. But here comes the last two important messages of this paper: 1) for the solution of MCs, the
uniformization method is more stable than SAST1 and 2) the
specific combination of SAST1 and uniformization method allowed the use of even longer time steps. The first statement can
be verified by comparing the results of Euler + UNI and SAST1
methods for the three MC-based models (see Tables III–V). Out

607

of the nine tests (three models times three tolerances), Euler +
UNI outperformed SAST1 in seven cases.
In addition to these quantitative results, we can also provide an analytic and qualitative explanation to support the first
statement. If we consider an MC with fixed transition rates,
→
−
→
Y = A−
Y.
the associated linear system of ODEs is given by ddt
→
−
→
−
The analytic solution is given by Y (t) = etA Y (0), where the
matrix exponential etA is defined by a Taylor series. Therefore, in this scenario, uniformization method is unconditionally stable. On the other hand, if we use a Jacobi decomposition and write A = D + R, with D a diagonal matrix, SAST1
method (given by (14)) can be rewritten in vector form as:
→
−
→
−
→
−
Y n +1 = ehD Y n + RD−1 (ehD − I) Y n . Now we note that for
hD
h small (e − I) ≈ (hD). Therefore, the iteration of SAST1
→
−
→
−
→
−
method is close to Y n +1 = ehD Y n + hR Y n . SAST1 adhD
vances by combining an exponential term e with a classical
explicit Euler term hR. The last term is known to bring stability
properties. This analysis gives a better understanding why the
uniformization method is more stable than the SAST1 method
for MC-based models.
However, as mentioned before, Euler + UNI did not always
perform better than SAST1. On the other hand, the SAST1
+ UNI method always achieved better performance. Indeed,
the uniformization is better suited for MC equations, whereas
SAST1 performs better than Euler for stiff nonlinear equations,
as described in [15] and [14]. In order to quantitatively investigate these results, we performed a stiffness analysis based on
the eigenvalues of each of the three models tested, as described
in [14].
For the Bondarenko et al. model, we identified that the most
stiff variables were PO 1 (an MC variable) associated to an eigenvalue of −1.0 × 104 ms−1 and [Ca2+ ]S S (a fully nonlinear variable) associated to an eigenvalue of −2.1 × 103 ms−1 . Thus,
without SAST1 method, the second eigenvalue associated to a
nonlinear equation limited the stability of Euler + UNI method.
For this particular model, only after combining SAST1 and
uniformization, we were able to outperform SAST1 for all the
tolerances tested.
For the other two models, SAST1 + UNI also increased the
performance and stability of Euler + UNI or SAST1. However,
for these two models, Euler + UNI was enough to outperform
SAST1. This can also be explained by the stiffness analysis
and eigenvalues. For the Winslow et al., the most stiff variables
are PC 1 (Markov variable) and [Ca2+ ]S S (fully nonlinear variable), with corresponding real-part eigenvalues of −1.4 × 104
and −8.5 × 102 ms−1 , respectively. The magnitude of the eigenvalue associated to the nonlinear equation is smaller than the one
in Bondarenko et al. model, which explains the observed difference in runtime performances. The same was observed for Iyer
et al. model: the most stiff Markov variable is PC 1 (eigenvalue
equals to −1.1 × 104 ms−1 ), whereas the most stiff nonlinear
variable is [Ca2+ ]S S (eigenvalue equals to −8.2 × 102 ms−1 ).
In the light of the previous discussion, we can extend our
results to other models not considered in this paper. For instance, Table IV in [14] lists two other models that have
MC formulations together with their stiff variables, i.e., those

608

IEEE TRANSACTIONS ON BIOMEDICAL ENGINEERING, VOL. 62, NO. 2, FEBRUARY 2015

associated to the largest eigenvalues: Jafri et al. (1998) [28] with
three MC variables and one nonlinear variable, and Pandit et al.
[29] with two MC variables. The SAST1 + UNI would perform
well if used to solve any of these models, whereas the Euler +
UNI might perform better for the Pandit et al. model due to the
absence of a stiff fully nonlinear equation.
VII. LIMITATIONS AND FUTURE WORK
Our implementations used only the so-called coarse partial
evaluation (PE) as an optimization tool [17]. In this scenario,
the algebraic equations of the models are computed only once
for each time step of the methods, just before all the Nvar righthand side functions are evaluated. Other traditional optimization
techniques such as fine PE and lookup tables were not tested
[17]. In the near future, we will combine these techniques to the
new hybrid methods proposed in this paper. The main goal of
this manuscript was to describe, implement, and test different
hybrid methods based on the uniformization method for the simulation of single myocyte models of cardiac electrophysiology.
In the near future, we plan to investigate the impact of these
new methods for the case of cardiac tissue and whole-organ
simulations.
VIII. CONCLUSION
By merging traditional techniques for solving electrophysiological cardiac models with the uniformization method, we obtained significant improvements in terms of the computational
cost. The technique was fitted to solve the MC’s equations,
which are usually associated with the most stiff variables of
the models. The hybrid numerical schemes that used the uniformization method were up 86-fold faster than RL’s or Euler’s
methods. In addition, using a two-time step partitioning the new
hybrid methods were up to 150 times faster than the aforementioned traditional methods.
REFERENCES
[1] R. Plonsey, “Bioelectric sources arising in excitable fibers (ALZA lecture).” Ann. Biomed. Eng., vol. 16, no. 6, pp. 519–46, 1988.
[2] R. R. Aliev and A. V. Panfilov, “A simple two-variable model of cardiac
excitation,” Chaos, Solitons Fractals, vol. 7, no. 3, pp. 293–301, 1996.
[3] C. C. Mitchell and D. G. Schaeffer, “A two-current model for the dynamics
of cardiac membrane,” Bull. Math. Biol., vol. 65, no. 5, pp. 767–793, 2003.
[4] A. Karma, “Electrical alternans and spiral wave breakup in cardiac tissue,”
Chaos, vol. 4, no. 3, pp. 461–472, 1994.
[5] S. N. Flaim, W. R. Giles, and A. D. McCulloch, “Contributions of sustained
ina and ikv43 to transmural heterogeneity of early repolarization and
arrhythmogenesis in canine left ventricular myocytes,” Amer. J. Physiol.
Heart Circ. Physiol., vol. 291, no. 6, pp. H2617–2629, 2006.
[6] A. R. M. K. J. Sampson V. Iyer and R. S. Kass, “A computational model
of purkinje fibre single cell electrophysiology: Implications for the long
qt syndrome,” J. Physiol., vol. 588, pp. 2643–2655, 2010.
[7] V. E. Bondarenko, “A compartmentalized mathematical model of the b1adrenergic signaling system in mouse ventricular myocytes,” PLOS ONE,
vol. 9, no. e89113, pp. 01–35, 2014.
[8] A. A. M. Wilde and C. R. Bezzina. (2005). Genetics of cardiac arrhythmias. Heart. [Online]. 91(10), pp. 1352–1358. Available: http://heart.bmj.
com/content/91/10/1352.short

[9] D. Seo, G. S. Ginsburg, and P. J. Goldschmidt-Clermont. (2006). Gene expression analysis of cardiovascular diseases: Novel insights into biology
and clinical applications. J. Amer. College Cardiology. [Online]. 48(2),
pp. 227–235. Available: http://www.sciencedirect.com/science/article/
pii/S073510970601134X
[10] C. E. Clancy and Y. Rudy, “Linking a genetic defect to its cellular phenotype in a cardiac arrhythmia,” Nature, vol. 400, pp. 566–569, 1999.
[11] T. Brennan, M. Fink, and B. Rodriguez, “Multiscale modelling of druginduced effects on cardiac electrophysiological activity,” Eur. J. Pharmaceutical Sci., vol. 36, no. 1, pp. 62–77, 2009.
[12] C. E. Clancy, Z. I. Zhu, and Y. Rudy, “Pharmacogenetics and antiarrhythmic drug therapy: A theoretical investigation,” Amer. J. Physiol.,
Heart Circulatory Physiol., vol. 292, no. 1, pp. H66–H75, Jan. 2007.
[13] V. Iyer, R. Mazhari, and R. L. Winslow, “A computational model of
the human left-ventricular epicardial myocyte,” Biophys. J., vol. 87,
pp. 1507–1525, 2004.
[14] M. E. Marsh, S. T. Ziaratgahi, and R. J. Spiteri, “The secrets to the success
of the Rush–Larsen method and its generalizations,” IEEE Trans. Biomed.
Eng. J., vol. 59, no. 9, pp. 2506–2515, Sep. 2012.
[15] J. Sundnes, R. Artebrant, O. Skavhaug, and A. Tveito, “A second-order
algorithm for solving dynamic cell membrane equations,” IEEE Trans.
Biomed. Eng., vol. 56, no. 10, pp. 2546–2548, Oct. 2009.
[16] A. Reibman and K. Trivedi, “Numerical transient analysis of Markov
models,” Comput. Opns. Res., vol. 15, no. 1, pp. 19–36, 1988.
[17] R. S. Campos, F. O. Campos, J. M. Gomes, C. de Barros Barbosa,
M. Lobosco, and R. W. dos Santos, “Comparing high performance techniques for the automatic generation of efficient solvers of cardiac cell
models,” Computing, vol. 95, no. 1, pp. 639–660, 2013.
[18] S. Rush and H. Larsen, “A practical algorithm for solving dynamic
membrane equations,” IEEE Trans. Biomed. Eng., vol. BME-25, no. 4,
pp. 389–392, Jul. 1978.
[19] A. L. Hodgkin and A. F. Huxley, “A quantitative description of membrane
current and its application to conduction in nerve,” J. Phisiol., vol. 117,
pp. 500–544, 1952.
[20] A. Jensen, “Markoff chains as aid in the study of Markoff processes,”
Skandinavisk Aktuarietidskrift, vol. 36, pp. 87–91, 1953.
[21] E. de Souza e Silva, and R. Gail, “The uniformization method in performability analysis,” IBM Thomas J. Watson Research Center, Yorktown
Heights, NY, USA, Tech. Rep. RC-20383, 1996.
[22] B. Melamed and M. Yadin, “The randomization procedure in the computation of cumulative time distributions over discrete state Markov processes,”
Oper. Res., vol. 32, pp. 929–943, 1984.
[23] V. E. Bondarenko, P. S. Gyula, C. L. B. Glenna, S.-J. Kim, and R. L.
Rasmusson, “Computer model of action potential of mouse ventricular
myocytes,” Amer. J. Physiol., vol. 287, pp. H1378–H1403, 2004.
[24] R. Winslow, J. Rice, S. Jafri, E. Marban, and B. O’Rourke, “Mechanisms
of altered excitation-contraction coupling in canine tachycardia induced
heart failure,” Circulation Res., vol. 84, pp. 571–586, 1999.
[25] C. Luo and Y. Rudy, “A model of the ventricular cardiac action potential.
Depolarization, repolarization, and their interaction,” Circulation Res.,
vol. 68, pp. 1501–1526, 1991.
[26] R. S. Campos, R. M. Amorim, C. M. Costa, B. L. Oliveira, C. B. Barbosa,
J. Sundnes, and R. W. Santos, “Approaching cardiac modeling challenges
to computer science with cellml-based web tools,” Future Generation
Comput. Syst., vol. 26, pp. 462–470, 2010.
[27] LAND. (2010). Tangram-ii. [online]. Available: http://www.land.ufrj.br/
tools/tools.html
[28] M. S. Jafri, J. J. Rice, and R. L. Winslow, “Cardiac ca2+ dynamics: The
roles of ryanodine receptor adaptation and sarcoplasmic reticulum load,”
Biophys. J., vol. 74, no. 3, pp. 1149–1168, 1998.
[29] S. V. Pandit, W. R. Giles, and S. S. Demir, “A mathematical model of
the electrophysiological alterations in rat ventricular myocytes in type-i
diabetes,” Biophys. J., vol. 84, no. 2, pp. 832–841, 2003.

Authors’ photographs and biographies not available at the time of publication.

