316

IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 18, NO. 1, JANUARY 2014

A Novel and Lightweight System to Secure
Wireless Medical Sensor Networks
Daojing He, Sammy Chan, Member, IEEE, and Shaohua Tang, Member, IEEE

Abstract—Wireless medical sensor networks (MSNs) are a key
enabling technology in e-healthcare that allows the data of a patient’s vital body parameters to be collected by the wearable or
implantable biosensors. However, the security and privacy protection of the collected data is a major unsolved issue, with challenges
coming from the stringent resource constraints of MSN devices,
and the high demand for both security/privacy and practicality. In
this paper, we propose a lightweight and secure system for MSNs.
The system employs hash-chain based key updating mechanism
and proxy-protected signature technique to achieve efficient secure
transmission and fine-grained data access control. Furthermore,
we extend the system to provide backward secrecy and privacy
preservation. Our system only requires symmetric-key encryption/decryption and hash operations and is thus suitable for the
low-power sensor nodes. This paper also reports the experimental
results of the proposed system in a network of resource-limited
motes and laptop PCs, which show its efficiency in practice. To the
best of our knowledge, this is the first secure data transmission and
access control system for MSNs until now.
Index Terms—Access control, data transmission, medical sensor
networks, security.

I. INTRODUCTION
ECENTLY, with the rapid development in the wearable biosensor and wireless communication technologies,
wireless medical sensor networks (MSNs) have emerged as a
promising technique which will revolutionize the way of seeking healthcare at home, hospital, or large medical facilities [1],
[2]. Instead of being measured face-to-face, with MSNs, patients’ health-related parameters can be monitored remotely,
continuously, and in real time, and then processed and transferred to medical databases. This medical information is shared
among and accessed by various users such as healthcare staff,
researchers, government agencies, insurance companies, and

R

Manuscript received November 25, 2012; revised March 13, 2013 and April
26, 2013; accepted June 10, 2013. Date of publication June 17, 2013; date of
current version December 31, 2013. This work was supported by the National
Natural Science Foundation of China under Grants U1135004 and 61170080,
the Guangxi Key Laboratory of Trusted Software, the Fundamental Research
Funds for the Central Universities, and Guangdong Province Universities and
Colleges Pearl River Scholar Funded Scheme (2011). D. He and S. Tang are
co-corresponding authors.
D. He is with the School of Computer Science and Engineering, South China
University of Technology, Guangzhou, China, and also with the Guangxi Key
Laboratory of Trusted Software, Guilin University of Electronic Technology,
Guilin 541004, China (e-mail: hedaojinghit@gmail.com).
S. Chan is with the Department of Electronic Engineering, City University of
Hong Kong, Hong Kong (e-mail: eeschan@cityu.edu.hk).
S. Tang is with the School of Computer Science and Engineering, South
China University of Technology, Guangzhou 510006, China (e-mail: csshtang@
scut.edu.cn).
Color versions of one or more of the figures in this paper are available online
at http://ieeexplore.ieee.org.
Digital Object Identifier 10.1109/JBHI.2013.2268897

Fig. 1.

Architecture of a typical medical sensor network.

patients. Through this way, healthcare processes, such as clinical diagnosis and emergency medical response, will be facilitated and expedited, thereby greatly increasing the efficiency of
healthcare.
Fig. 1 shows the architecture of a typical MSN. A large-scale
MSN accommodates tens of patient area networks (PANs). Each
PAN consists of some biosensor nodes and a local processing
unit (e.g., tablet PC, smartphone, or laptop PC), which is referred
to as the controller. Here, biosensor nodes (either implantable or
wearable) are attached to a patient to periodically collect his/her
personal health information (PHI) and forward them to the controller; then, the controller serving as a gateway will report the
collected PHI to the network server. Thus, users can issue commands to access the collected PHI or control the biosensors of a
target PAN. Note that the sensor nodes communicate only with
the corresponding controller, but not individual users. This is
because in a large healthcare facility, it would be difficult for
the resource-limited sensor nodes to authenticate hundreds of
users. As a result, users are authenticated at the controllers (or
the network server) which will issue commands to the biosensor
nodes on behalf of them.
Since the collected PHI is private information of patients and
plays a critical role in medical diagnosis and treatment, it is
essential to strictly limit the access of these data to authorized
users only in order to ensure the security of these data and
preserve the patients’ privacy [1].
However, designing a secure and efficient system for MSNs
is a difficult task as it faces the following challenges. First, as
we will discuss in Section IV, there are quite a number of security requirements that need to be satisfied. Second, the security mechanisms must be resource-efficient since the biosensor nodes, especially the implanted ones, have much lower

2168-2194 © 2013 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See http://www.ieee.org/publications standards/publications/rights/index.html for more information.

HE et al.: NOVEL AND LIGHTWEIGHT SYSTEM TO SECURE WIRELESS MEDICAL SENSOR NETWORKS

processor speed, memory, transmission speed, and energy supply than sensors of other sensor networks. Thus, as we will discuss in Section II, the limited resources of the biosensor nodes
render the use of most common cryptographic techniques (e.g.,
public key cryptosystems and their enhanced variations such as
ring signature) unrealistic or impossible in most circumstances
with respect to delay. Moreover, if the message authentication
or encryption/decryption methods are not fast enough, an adversary may launch a Denial-of-Service (DoS) attack (e.g., a
signature-based DoS attack [3]) to exhaust the resources of the
legitimate biosensor nodes and render them less capable of carrying out their intended functions. Third, due to their small size,
sensor nodes can be easily stolen or simply lost. Patients’ mobility also increases the chances of losing the sensor nodes. Generic
wireless sensor networks (WSNs) do not have this problem as
they have stationary sensor nodes. Furthermore, the adversary
can easily find their targets in local hospitals or healthcare facilities, as opposed to remote locations like forests or battlefields.
Therefore, physical compromise of sensor nodes is more likely
in MSNs than in generic WSNs.
To address the above challenges, this paper makes three main
contributions.
1) We show the security weaknesses and efficiency problems of the existing security systems in MSNs. Then, we
identify the characteristics of an MSN and present the requirements of a secure and lightweight system of MSNs.
Considering the special features of an MSN, a powerful
mobile adversary is introduced into MSNs.
2) We propose a secure and lightweight system for MSNs,
which not only enables lightweight key management but
also provides fine-grained access control in MSNs. In addition, our theoretical analysis demonstrates that the proposed system can meet the requirements.
3) We also implement the proposed system in a network of
resource-limited sensor nodes and laptop PCs. Evaluation
results show the efficiency of the system in practice. Accordingly, some suggestions on how to set the parameters
of the proposed protocols are provided.
The rest of this paper is structured as follows. In Section II,
we first survey and analyze the related work and then discuss
their security weaknesses and efficiency problems. Section III
describes the network and adversary models, and then discusses
the features of MSNs. Section IV presents the requirements of
a secure system of MSNs. Then, in Section V, we describe
our proposed system accompanied by theoretical analysis of the
security properties. Section VI describes the implementation
and experimental results of our system via real resource-limited
sensor platforms. Finally, Section VII concludes this paper.
II. RELATED WORK
Despite the need and importance, to the best of our knowledge, until now no secure and lightweight data transmission and
access control platform for MSNs has been proposed. For example, the designers of CodeBlue [4] and MUSIC [5] point out
the need for security in a medical environment, but their work
does not focus on addressing security issues.

317

Recently, an architecture called sensor network for assessment of patients (SNAP) [6] has been proposed to address the
security challenges facing a sensor network for wireless health
monitoring. However, we observe that SNAP does not deal with
user authentication for the medical data. Moreover, the collected data from a biosensor are transmitted to the controller
in plaintext. Thus, an adversary can easily modify the medical
data and/or inject the polluted medical data into the network.
Some researchers (see, e.g., [7], [8]) utilize physiological signals
(e.g., heart rate interval, blood flow, and electrocardiography)
obtained from the patient to enable biosensors to agree upon a
symmetric (shared) cryptographic key in an authenticated manner. However, they demand that each biosensor can measure
the same physiological parameter; this assumption is rather restrictive and makes this method not suitable for many MSN
applications.
Based on the public key cryptography, some novel protocols
(see, e.g., [9]–[12]) have been proposed to ensure security of
MSNs. The authors of [9] suggest to use the elliptic-curve cryptography (ECC) algorithm to set up symmetric keys between
sensor nodes and the base station. Also, a novel group key management and authentication mechanism is presented. However,
they are computation-inefficient, cannot fulfill the stringent delay requirements in MSNs, and are vulnerable to DoS attacks.
For instance, as reported in [9], the ECC key agreement takes
7.198 s on a Tmote Sky mote, which features a 16-bit, 8-MHz
MSP430 processor. Additionally, as described in [10], the elliptic curve Diffie–Hellman (ECDH) key generation used in
sensor-to-sensor authentication takes 5.97 s on a Tmote Sky
mote. As the common biosensor nodes have less computation
power than Tmote Sky motes, public key cryptography is not
favorable for the biosensor nodes.
Also, a lightweight identity-based cryptography named IBELite has been proposed [11]. It balances security and privacy
with accessibility. However, we observe that there are security weaknesses and efficiency problems in IBE-Lite. First, all
the medical data are encrypted by ECC, which is not efficient
for MSNs. Second, their work does not consider sensor-to-sink
(or user) data authentication. Thus, false medical data could be
injected or treated as legitimate due to the lack of node authentication. Third, IBE-Lite cannot resist node replication attacks.
That is, an adversary can insert additional hostile biosensors
into the network. Fourth, the master key of each PAN consists
of n secret keys, which are picked by the patient. Each doctor
uses the secret key from the certificate authority to decrypt the
messages encrypted by a sensor node. Once a doctor sends n
user queries to a target PAN, he/she is able to generate the master key of the PAN. Thus, to ensure the security of IBE-Lite, the
number of user queries has to be limited. Le et al. [12] presented
a mutual authentication and access control protocol, which is
based on ECC. A recent study [13] has shown that the scheme
is susceptible to information-leakage attacks.
Although there are a lot of works about generic WSNs
and mobile ad hoc networks (MANETs) security (see, e.g.,
[14]–[16]), these mechanisms are not directly applicable in
MSNs due to the unique and challenging operational and security requirements of MSNs. For instance, the authors of

318

IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 18, NO. 1, JANUARY 2014

[14] introduce a novel approach to ensure distributed privacypreserving access control, which is built on a ring signature technique. Also, in [15], a self-contained public key-management
scheme has been proposed for wireless ad hoc networks, in
which a small number of cryptographic keys are stored offline
at individual nodes before deployment. Also, to avoid the weaknesses of a public key infrastructure, as a special form of the
public key cryptography, identity-based cryptography has been
used in various areas of securing MANETs [16]. Unfortunately,
as described before, solutions relying on public key cryptography are not directly applicable to MSNs.
III. NETWORK MODEL, ADVERSARY MODEL,
AND UNIQUE FEATURES OF MSNS
A. Unique Features of MSNs
MSNs are different from MANETs and WSNs in the following aspects [2].
1) Data Rate: Events monitored by MANETs and WSNs
usually occur at irregular intervals. On the contrary, MSNs are
employed to monitor humans’ physiological activities, which
more or less may occur periodically. As a result, data streams
of applications exhibit relatively stable rates. All nodes are assumed to have loosely synchronized clocks with the help of
some existing secure time synchronization scheme.
2) Mobility: Relatively, there is no movement between sensors as they are all in the same patient. Movement between
controllers and sensors is due to mobility of patients, which is
very low.
3) Efficiency: The sensed signals can be efficiently processed
by biosensors to obtain estimates of physiological information.
Also, the power consumption on biosensors is low, and thus,
batteries can last longer.
B. Network Model
All the biosensor nodes in an MSN have limited power supply, storage space, and computational capability. Due to the
constrained resources, computationally expensive and energyintensive operations such as the public key cryptography are not
favorable for such nodes. We assume that the network server is
secure. That is, the network server is equipped with a tamperresistant component for storing the keying materials. According
to the data rate feature of an MSN described in Section III-A,
we assume that time is divided into equal and fixed collection
rounds and each biosensor collects a single data item per round.
The sensor nodes may be placed in, on, or around the patient’s body. Although there is no consensus on the communication technologies in PANs, the communication ranges of
off-the-shelf technologies (e.g., Zigbee) are larger than 3 m.
Thus, according to the mobility feature of an MSN described
in Section III-A, we assume that all sensor nodes in a PAN can
directly communicate with the controller; thus, a star topology
is assumed.
C. Adversary Model
We assume that an adversary can behave as both outside and
inside attackers. Outside attackers can drop messages by jam-

ming the communication channel, eavesdrop messages, modify
messages, inject forged messages, or replay old messages. Insider attackers can compromise a number of biosensor nodes,
controllers, and network users to obtain their data and keying
materials.
Considering the special features of an MSN, a powerful mobile adversary [17] is introduced into MSNs. One important
feature that separates it from other adversary models is its mobility. More specifically, the adversary can compromise different
subsets of biosensors in different time intervals. The subset of
compromised nodes might not be clustered or contiguous, that
is, concurrently compromised nodes can be spread over the entire MSN. While in control of a biosensor node, the adversary
acquires keying materials and status, reads all storage/memory,
and can eavesdrop on all incoming and outgoing communications of the compromised node. There are two reasons to consider such a mobile adversary model. First, since the biosensors
are in, on or around the body of the patient, the compromised
biosensors are easily detected by the patient or the health staff.
Thus, the adversary roams around the MSN gradually to avoid
being detected. Second, it is extremely difficult for the adversary
to predict a patient’s movement and follow him/her everywhere.
As a result, the adversary may inevitably lose control of the
already compromised biosensor nodes.
IV. REQUIREMENTS OF A SECURE SYSTEM
In this section, we present several criteria that represent desirable characteristics in a secure and lightweight system for
MSNs.
1) Lightweight: Every PAN often consists of low-end sensor
nodes, which rely on battery energy [1]. Furthermore, emergency situations in an MSN require the capability for fast medical reaction without disabling security functions. For example,
secure PAN setup in emergency situations must be carried out
in less than 1 s and the maximum allowable latency for electrocardiogram transmission is 250 ms [18]. To match the low
capabilities of the sensor nodes, it is important to minimize computation, communication, and storage overhead on the sensors.
Hence, cryptographic algorithms must be as fast as possible in
order to satisfy these requirements and be invulnerable to DoS
attacks.
2) Fine-grained data access control: Access control needs
to be enforced for the patient-related data in the whole MSN
so that private information will not be obtained by unauthorized users. More importantly, a secure system should provide
different privileges for different network users.
3) Scalability: The system should be efficient even in a large
scale MSN with many users and many PANs [1].
4) Flexibility: The access policy should be adapted dynamically to contexts, such as time, location, or certain events related to patients. Note that in MSNs, the access policy should
be defined by both patients and healthcare units. For example,
on-demand authorization to read a patient’s PHI can be given
temporarily to an available doctor who is not on the access
list when a medical emergency happens. Obviously, inability
or irresponsiveness in adapting the access rules may threaten a
patient’s life [1].

HE et al.: NOVEL AND LIGHTWEIGHT SYSTEM TO SECURE WIRELESS MEDICAL SENSOR NETWORKS

5) Confidentiality: In order to prevent the patient-related data
from leaking, the data need to always be kept confidential at a
node or local server (i.e., the network server). Data confidentiality should be resistant to device compromise attacks (e.g.,
node compromised and controller compromised attacks). That
is, compromising one node helps the adversary to gain nothing
or little from the data stored at that node.
6) Data integrity assurance: In MSNs, the patient-related
data are vital, and modified data would lead to disastrous consequences. Therefore, data integrity shall be protected all the
time.
7) Forward secrecy: It means that even if an adversary obtains the current secrets of a node, it cannot decrypt (or forge
authentication tags for) those data collected and encrypted (or
authenticated) before compromise.
8) Backward secrecy: It means that even an adversary has
compromised (and then released) a node, it cannot decrypt (or
forge authentication tags for) those data collected and encrypted
(or authenticated) by the node after releasing.
9) Strong contextual privacy preservation: We divide privacy
issues in MSNs into content-oriented privacy and contextual
privacy. Here we just focus on contextual privacy, since the
content-oriented privacy has been considered in Requirements
5, 7, and 8. Contextual privacy means an adversary has the
ability to link the source and the destination of a message. In
an MSN, if an adversary can link the patient with a specific
physician, then the patient’s privacy will be lost. Thus, it is very
important to protect contextual privacy, which includes sensor
identity privacy and PAN identity privacy of every collected
data, and each user’s privilege content privacy in addition to
the privacy of every user command content. For example, if
an adversary searches the whole MSN for a specific parameter,
protecting the privacy of sensor identity of every collected data
is desirable. Similarly, if an adversary searches the whole MSN
for a specific patient, protecting the privacy of PAN identity of
every collected data is desirable. In addition, we illustrate the
importance of user privilege content privacy by considering the
following two scenarios. One is that often each user’s privilege
content indicates the user identity information and the relation
between the user and some patients (i.e., the owner of some
PAN), thus exposing the patients’ privacy. The other is that with
the knowledge of some user privileges, an adversary can seek
the important users and then launch attacks on the MSNs.

319

signing power, etc. The proxy signer generates proxy signatures only with the proxy signature key given by the original
signer. Verifiers validate proxy signatures only with the public
key of the original signer and pay attention to the legality of the
warrant.
The detailed information about applying the PSW technique
into the proposed system is given as follows. The network server
of an MSN plays the role of the original signer, while the users of
the MSN play the role of proxy signers. Through registration, the
users obtain one or more proxy signature keys from the network
server before they enter to an MSN. The key can subsequently be
used to make signature on a command. Thus, authorized users
generate valid commands only with the proxy signature keys
given by the network server. The validity of each command
can be verified by the controller of any PAN or the network
server with the public key. Through this way, the network server
can prevent unauthorized commands on the MSN. Additionally,
our proposed system only requires lightweight cryptographic
operations (i.e., symmetric-key encryption/decryption and hash
function operation) and do not need verification tables to be
stored on a biosensor. Hence the computational and storage
requirement on a biosensor is low.
Quite a number of PSW schemes have been proposed in
the literature. However, some of them suffer from some security weaknesses, and most of them are not efficient enough
for biosensors. After a thorough evaluation, we have found that
Shao’s PSW scheme [20] is most suitable for our purpose. However, in spite of its efficiency, we observe that this scheme has
a design weakness, which will cause failure of the proposed
protocol. Thus, to ensure that the proposed protocol works, a
feasible approach has been proposed to fix such a weakness.
Our system involves four phases. The system initialization
phase is performed by the network server to set up an MSN.
User joining phase is involved before a user can issue commands
to the MSN. During the regular use phase, the data from each
biosensor node are securely transmitted to the network server
via the controller. In the user command phase, if a network user
has a new command, he/she will need to construct the command
and the proxy signature and then send them to the network server
(or the controller of a target PAN). If the command verification
passes, the network server (or the controller of a target PAN)
responds to the user’s command. Fig. 2 illustrates the flows
of security information of the proposed system. More detailed
description will be provided in the following sections.

V. PROPOSED SYSTEM
A. Basic Idea of Our System

B. System Structure

The basic idea of the proposed system is given as follows.
After a user registers to the network server, he/she is allowed
to issue commands to access the collected PHI or control the
biosensors according to his/her privilege. To achieve this goal,
proxy-protected signature by warrant (PSW) [19] is introduced
into our system. This technique is a special digital signature.
There are two kinds of participants, i.e., an original signer and
proxy signers. The original signer gives the proxy signer a warrant, which specifies the identity of the proxy signer, the identity
of the original signer, the expiration time of the delegation of

1) System Initialization Phase: In this phase, the network
server executes the following steps. The notations used throughout this paper are listed in Table I.
a) Randomly pick two large safe primes p and q (i.e., primes
p and q such that (p − 1)/2 and (q − 1)/2 are primes as well),
and compute a public modulus n = pq. Then the server chooses
a public one-way hash function h() such as SHA-1.
b) Choose a pair of integers e and d satisfying the properties e·d≡1 ( mod φ(n)) and d is a large positive number,
where φ(n) = (p − 1)(q − 1) is Euler’s totient function and

320

IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 18, NO. 1, JANUARY 2014

the parameter P Ktn s is loaded into the controller of each PAN
before the network deployment.
2) User Joining Phase: Before a user, say Ui , can issue
commands to the MSN, he/she needs to register to the network
server. After verifying his/her registration information, the network server assigns an identity, say IDU i , for him/her. We
assume that the length of each user identity is 2 bytes, in which
case the system can support 65 536 network users. Then, the
network server computes a proxy signature key υi for user Ui
which is given by
υi ≡[h(mw )]−d ( mod n).

Fig. 2.

Flows of security information in the proposed system.
TABLE I
NOTATIONS

e should be larger than the output of the one-way hash function
h(). Thus, based on the Rivest, Shamir, and Adleman algorithm, the network server creates its public and private keys as
P Ktn s = {n, e} and SKtn s = d, respectively.
c) For every PAN, say P AN l , the network server secretly
shares the distinct initial key kj0 with every biosensor, say sj , and
stores the tuple IDP A N l , IDs j , kj0 . Here IDs j is the identity
of the node sj while IDP A N l is the identity of the PAN P ANl .
In general, the maximum number of the biosensor nodes in a
PAN is less than 40; thus, the bit length of IDs j is set to 8.
Also, the maximum number of the PANs in every MSN is less
than 200; thus, the bit length of IDP A N l is set to 8. There are
two suitable general initial key distribution schemes: trustedserver schemes and key predistribution schemes. Trusted-server
schemes depend on a trusted server for key agreement between
the network server and each node. Different from generic WSNs,
this type of scheme is suitable for MSNs. This is because for
an MSN, a trusted infrastructure is often in place. The second
way, where key information is distributed to each node prior to
deployment, has been widely employed in many generic WSNs.
Compared to generic WSNs, this approach is more feasible
for MSNs. The reason is that because the scale of an MSN is
much smaller than that of a generic WSN, this scheme has little
impact on the efficiency requirements such as flexibility. No
matter which of these two schemes is used, the initial distribution
scheme is only executed in the system initiation phase, it has
small impact on the complexity of the proposed system. Also,

(1)

Here, n is the public modulus defined earlier. The warrant mw
records IDU i , the identity of the network server and the user
privilege such as the identities of PANs that user Ui is allowed
to access, and valid periods of delegation (i.e., the beginning
time and the end time).
Note that (1) involves modular exponentiation with a negative
exponent, which can be performed by finding the multiplicative
inverse u of h(mw ) modulo n using the extended Euclidean algorithm. That is, υi ≡[h(mw )]−d ( mod n)≡ud ( mod n), where
h(mw )·u≡1( mod n). It should be noted that u exists if and only
if h(mw ) and n are coprime [i.e., gcd(h(mw ), n) = 1]. However, as the PSW scheme of [20] does not require h(mw ) and n
to be coprime, this scheme and the proposed system fail when
h(mw ) and n are not coprime. This will happen when p or q
divides h(mw ). To ensure that the proposed protocol works, a
feasible approach is when the network server computes mw for
a user, redundant bits are appended into mw such that h(mw )
and n are coprime [3]. Of course, instead of adding redundant
bits, a simple and efficient solution is to set p and q to be larger
than h(mw ) so that they cannot divide h(mw ), and therefore,
h(mw ) and n are coprime. For example, when SHA-1 function
is used, the length of h(mw ) is 160 bits. If the length of n is
1024 bits, the lengths of p and q are set to 512 bits, respectively.
For user Ui , the network server returns the message {υi , mw }
in a secure manner (e.g., using the wired transport layer security
protocol). Afterward, user Ui can verify the proxy signature key
υi by checking if (2) is satisfied:
υi e h(mw )≡1 ( mod n).

(2)

Because
υi ≡ud ( mod n), u≡υi e ( mod n), u≡h(mw )−1 ( mod n),
υi e ( mod n)≡h(mw )−1 ( mod n).
3) Regular Use Phase: After the system initiation phase, the
MSN is ready for regular use. For simplicity, in the following
we consider PAN P AN l as an example.
At the end of each round r ≥ 0, the complete message that
node sj sends to the network server through the controller is
IDP A N l , IDs j , {data}k jr , h({data}k jr r, kjr )

(3)

where data is the collected data unit by node sj during round
r, and {IDP A N l , IDs j } denotes the source address of the message. After that, node sj generates a secret key by kjr +1 = h(kjr ),
and promptly erases kjr from its memory. Data transmission is

HE et al.: NOVEL AND LIGHTWEIGHT SYSTEM TO SECURE WIRELESS MEDICAL SENSOR NETWORKS

a costly operation in wireless networks; sending one bit over
a wireless medium requires over 1000 times more energy than
a single 32-bit computation [21]. In order to reduce the transmission overhead, for (3), h() is a secure hash function (e.g.,
SHA-1) with truncated output (e.g., say of 10 bytes). Due to
the limitation of the storage resource on each controller, the
controller needs to submit the collected data to the network
server for permanent records. Upon receiving the message, the
network server retrieves the shared key kjr according to the received information {IDP A N l , IDs j }. Thus, the network server
can use the key kjr to verify the authenticity of the sender, and
the freshness (through checking the round index r) and integrity
(through checking the hash value) of the message, and obtain
the data unit data. Subsequently, the network server computes
the next key kjr +1 = h(kjr ), and then replaces kjr of the tuple
IDP A N l , IDs j , kjr  with kjr +1 .
From (3), we can see that the PHI encryption key for each
round is never reused, thus minimizing the risk of key discovery
attacks. This leaves the adversary the only choice of brute-force
attacks. Since keys are hash values, dictionary attacks do not
apply. With a reasonable length of hash values, such as 160
bits coupled with a strong encryption algorithm, it will be very
difficult for the adversary to crack the keys.
4) User Command Phase: As described in Section V-B, after obtaining proxy signature keys, if a user, say Ui , wants to
issue a command, he/she will need to construct the command
Que and then make a signature on Que as follows.
a) Choose a random integer z ∈ [1, n] and compute β =
z e ( mod n).
b) Use the command Que to compute δ = h(Queβ). Note
that to defeat the replay attack, user Ui needs to attach a
timestamp Ti into Que.
c) Compute y = z × υi δ ( mod n). Finally, Ui sends {Que,
mw , y, δ} to the network server (or the controller of a
target PAN).
Upon receiving a signature message {Que, mw , y, δ}, the
network server (or the controller) verifies it by carrying out the
following operations. Here, we consider the network server as
an example.
a) Check whether the timestamp Ti included in Que is within
some allowable range compared with the current time. If the
result is negative, the signature message is rejected; otherwise,
the network server pays attention to the legitimacy of the warrant
mw and the command Que. For example, according to the valid
periods of delegation field of warrant mw , the network server
can check whether the privilege of a user has expired. Another
example is that the network server checks whether the command
Que is within the scope of the user privilege by the definition of
warrant mw . Only if they are valid, the verification procedure
goes to the next step.
b) Compute β ∗ = y e h(mw )δ ( mod n). c) Check whether
h(Queβ ∗ ) = δ. Because

υie = h(mw )−1 ( mod n)
β ∗ = z e υiδ e h(mw )δ = z e = β ( mod n)

321

Thus,
h(Queβ ∗ ) = h(Queβ) = δ
If all verification procedures described previously pass, the network server (or the controller) believes that the command Que
and the warrant mw are from an authorized user with the necessary privileges. The user can interact with the network server (or
the controller of a target PAN) either directly or remotely (e.g.,
from the user’s home) for ease of patient monitoring. Commands
issued from a network user may activate the patient’s biosensors or adjust their sampling frequency and other parameters.
Such commands will be forwarded by the network server to the
specified biosensor. Alternatively, if the network user sends an
access command, the network server returns the resulting PHI
to the user. For security reason, the user can establish a session
key with the network server through some way (e.g., ECDH key
exchange) and use the session key to ensure the confidentiality,
integrity, and freshness of PHI transmission.
5) Security Analysis: In the following, we will analyze the
security of the system to verify whether the security requirements mentioned in Section IV have been satisfied.
Lightweight and scalability: The system only requires
lightweight cryptographic operations (i.e., symmetric-key and
hash function operations) on a biosensor. Moreover, considering
the memory constraint on the biosensor nodes, only an updated
symmetric key is stored in each node. Hence, the computational
and storage requirement on a biosensor is low. Moreover, the
computation complexity on the biosensor nodes (or network
users) is independent of the total number of biosensor nodes or
network users. Thus, the system is scalable.
Fine-grained data access control, flexibility and data integrity
assurance: As described in Section V-B2 and V-B4), in order
to pass the signature verification of each controller and the network server, each network user has to register to the network
server; then, the network server assigns him/her a proxy signature key according his/her user privilege. The network server
can restrict each network user’s privilege by the definition of
the warrant. Therefore, the network server enforces fine-grained
data access control by user registrations. It is clear that the access policy can be defined by both patients and the healthcare
units. Therefore, the system can provide fine-grained data access control flexibly. Also, as described in Section V-B3), in
order to provide data integrity assurance, a keyed hash function has been used, i.e., {{data}k jr , h({data}k jr r, kjr )}. Upon
receiving such a message, the network server checks the validity of h({data}k jr r, kjr ). If the result is positive, the network
server believes this message is not altered; otherwise, the network server simply drops the message.
Confidentiality and forward secrecy: The system updates the
encryption key at each round using the one-way hash function. Such keys are used to realize forward-secure encryption
of data produced in each round. For example, we assume that
an adversary compromises node sj at round r + 1. In this case,
the adversary will not be able to read the encrypted PHI submitted by node sj in the prior r rounds, even if it compromises all controllers and any other nodes. This is because all the

322

IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 18, NO. 1, JANUARY 2014

encryption/decryption keys {Kjx }, 0 ≤ x ≤ r, no longer exist
in node sj .
According to the above analysis, the system meets Requirements 1–7 described in Section IV. However, the system can
not satisfy Requirement 8. That is, it cannot provide backward
secrecy yet. This is addressed in the next section.
C. Backward Secrecy Extension
Ensuring backward secrecy requires some changes to the proposed system. For brevity, we just present the parts that need to
be changed.
1) Regular Use Phase: At round r ≥ 0, every sensor node,
say sj , transmits {IDP A N l , IDs j , {data}k jr , h({data}k jr r, kjr )}
to the network server through the corresponding controller.
Upon receiving this message, the network server uses the
corresponding key kjr to check the validity of the sensor
data. If it is valid, the network server picks a random number
kjr +1 as the next key. After that, the network server generates
the response {IDP A N l , IDs j , {kjr +1 }k jr , h({kjr +1 }k jr r, kjr )}
and then sends it to node sj through the controller, where
{IDP A N l , IDs j } denotes the destination address of this
message. At the same time, the network server replaces the key
kjr of the tuple IDP A N l , IDs j , kjr  with kjr +1 . Upon receiving
this message, with the received information {kjr +1 }k jr , node sj
uses the key kjr to compute h({kjr +1 }k jr r, kjr ) in order to verify
the authenticity of the sender, and the freshness and integrity
of the message. If the result is positive, node sj decrypts the
information {kjr +1 }k jr and obtains the next key kjr +1 and then
erases the old key kjr . At the same time, with such a response
from the network server, the controller (and node sj ) believes
that the network server has received the sensor data during
round r.
2) Security Analysis: Here, it is demonstrated that this extension can provide backward secrecy, i.e., Requirement 8. As described in Section III-A, the network server is tamper-proof and
securely picks a random number as the encryption/decryption
key of each round for each biosensor node; thus, the adversary cannot obtain the secret key. Referring to Requirement 8
described in Section IV, suppose the adversary compromises
node sj at round r obtains the key kjr and then releases node
sj at round r + 1. That is, the adversary does not obtain the
response {IDP A N l , IDs j , {kjr +1 }k jr , h({kjr +1 }k jr r, kjr )}. Obviously, the adversary cannot generate the new key kjr +1 , even
if it compromises all controllers and any other nodes.
D. Contextual Privacy Preservation Extension
Note that the current system cannot provide strong contextual
privacy preservation, i.e., Requirement 9 is not satisfied yet.
More exactly, there are four issues about this requirement exist
in the system as follows.
1) Command exposure: The commands from users are transmitted in plaintext in free air.
2) Warrant exposure: The warrant from a user, which indicates the user privilege, is transmitted in plaintext in open
environment.

3) Sensor node identity exposure: The sensor node ID, which
is attached to the sensor data, is transmitted in plaintext.
4) PAN identity exposure: The PAN ID is transmitted in
plaintext.
To avoid command exposure and warrant exposure, a simple
improvement for the system is as follows.
When a user, say Ui , hopes to issue a command to the network server (respectively, the controller of a target PAN), the
command is encrypted with the network server’s public key (respectively, the controller’s public key). At the same time, the
warrant is encrypted in the same way.
To avoid sensor node identity exposure, we propose a hashingbased identity randomization approach, which can be directly
employed in the system. The basic idea is for each sensor node,
say sj , to use a one-way keyed hash function for producing a
hash value as its identity. As one of the inputs of a keyed hash
function, the key kjr introduced in the backward secrecy extension can be used. At the same time, the original identity of the
sensor node, which is assigned by the network server before the
network deployment, is used to be the other input of a keyed
hash function. As mentioned previously, the key kjr at round
r is updated for every round between the sensor node sj and
the network server. Thus, this approach can evolve sensor node
identities such that it can provide forward secrecy and backward secrecy. The adversary cannot link two values as the input
and output of a keyed hash function without knowing the key
kjr . Without knowing the keys, the adversary cannot determine
whether two messages are sent by the same sensor node through
eavesdropping. Therefore, the anonymity of a message’s sender
is protected as long as the key is not compromised. A sensor
node can erase its current ID and the key kjr , and then generate a new identity after receiving the response from the network
server (more exactly, obtaining the new key kjr +1 ). Then through
physically capturing a sensor node, the adversary only obtains
the original ID of the sensor node. Because of one-way feature
of the keyed hashing, the adversary cannot reverse the hash function to get the previously used IDs. Clearly, the above approach
can also be employed easily to avoid PAN identity exposure.
This requires more changes to the system. For brevity, we just
present the parts that need to be changed.
1) System Initiation Phase: With initial key distribution
scheme described previously, the network server secretly shares
a random number kl0 as the distinct initial key with each PAN,
say P AN l , and stores the tuple IDP A N l , kl0 . The key kl0
is loaded into each biosensor node and the controller of PAN
P AN l before the network deployment.
2) Regular Use Phase: At round r ≥ 0, the complete message from node sj to the corresponding controller are of the form
M = {H1, H2, r, {data}k jr , h({data}k jr r, kjr )}. Here H2 =
h(IDP A N l , klr ) is a keyed hash value that identifies the receiver
of this message. In addition, H1 = h(IDs j , kjr ) is a hash value
that identifies the original message sender. That is, H1 and H2
denote the source and destination addresses of this message,
respectively. In order to reduce the transmission overhead, for
the generation of H1 and H2, h() is a hash function with truncated output of, say, 3–10 bytes. After that, node sj generates
a secret key by klr +1 = h(klr ), and promptly erases klr from its

HE et al.: NOVEL AND LIGHTWEIGHT SYSTEM TO SECURE WIRELESS MEDICAL SENSOR NETWORKS

memory. Because of the shared medium of wireless networks,
when node sj is sending messages, all the nodes that are in its
radio range can receive the message. To preserve the receiver’s
identity anonymity, H2 = h(IDP A N l , kjr ) is used to notify the
real receiver. The controller receives a message from one of
its sensor nodes, but initially does not know the sender and
receiver of this message since the identity of the receiver is hidden in h(IDP A N l , kjr ) and the identity of the sender is hidden
in h(IDS j , kjr ). The round number r included in the message
allows the controller to interpret H2(= h(IDP A N l , klr )) correctly. Note that because of the properties of one-way keyed
hash functions, the controller cannot simply compute an inverse
hash function to get the original identity of the receiver directly.
However, because the controller has the current secret key klr , it
uses the key klr to compute h(IDP A N l , klr ) and then compares
it with the received H2. If the result is positive, the controller
transmits the message M to the network server; otherwise, the
controller simply drops the message. Note that without knowing
the secret kjr , the controller does not know the sender of this message. In addition, upon receiving the message M , the network
server initially does not know the sender of this message, since
the identity of the sender is hidden in {H1, H2}. As described
previously, the round index r included in the message allows
the network server to interpret {H1, H2} correctly. Again, because of the properties of one-way keyed hash functions, the
network server cannot simply compute an inverse hash function
to get the original identity of the sender directly. However, it
can use the secret keys {kjr , klr } from the tuples IDP A N l , klr 
and IDP A N l , IDs j , kjr  to check the validity of {H1, H2} and
then find which biosensor node is the sender of this message. At
the end of round r, the network server generates the secret key
klr +1 = h(klr ) for PAN P ANl , and then replaces the key klr of
the tuple IDP A N l , klr  with klr +1 . Also, the controller of PAN
P ANl generates the secret key klr +1 = h(klr ), and promptly
erases klr from its memory.
3) Security Analysis: Here it is demonstrated that the system
with this extension can satisfy Requirement 9. The command (or
the warrant) is encrypted with the network server’s public key
(respectively, the controller’s public key), thus, only the network
server (respectively, the controller) can use the corresponding
private key to obtain the command (or the warrant). As described
previously, the hashing-based identity randomization method
is proposed to avoid sensor node identity and PAN identity
exposure.
VI. IMPLEMENTATION AND PERFORMANCE EVALUATION
We evaluate the proposed system by implementing all components on an experimental testbed.
A. Implementation and Experimental Setup
In order to investigate the feasibility of the proposed system
on the biosensor nodes, same as the existing studies [4]–[11]
on securing MSNs, we choose two common resource-limited
sensor nodes, i.e., TelosB and MicaZ motes. The TelosB mote
is equipped with an 16-bit, 8-MHz MSP430 microcontroller,
10-kB RAM, 48-kB ROM, 1024-kB flash and an 802.15.4/Zig-

Fig. 3.

323

Experimental setup for investigating the energy consumption.

Bee radio. Also, the MicaZ mote features an 8-bit, 8-MHz Atmel
microcontroller with 4-kB RAM and 128-kB ROM. Our implementation has the network server, controller, network user, and
sensor node side programs. The protocols operated by the first
three entities have been implemented in C (using OpenSSL [22])
and executed in laptop PCs (with 2-GB RAM) under Ubuntu
11.04 environment with different computational power. In addition, the sensor node side programs are written in nesC. Our
motes run TinyOS [23] 2.x. Throughout this paper, unless otherwise stated, all experiments on laptop PCs and sensor nodes
were repeated one thousand times for each measurement in order to obtain accurate average results. Additionally, for one-way
hash function h(), we have selected SHA-1, thus the output size
is 160 bits.
To measure the power consumption of various cryptographic
functions in the sensor nodes, the circuit as shown in Fig. 3
has been built [24]. When the mote in the circuit is executing
a cryptographic function, the voltage across the resistor Vr is
measured by a Tektronix TDS 2012B oscilloscope. From Vr , the
current through the circuit I can be obtained by Ohm’s law. Also,
the voltage across the mote Vm can be obtained by Kirchoff’s
voltage law. Then, the power consumed by the cryptographic
function is simply given by Vm × I. Moreover, if we measure
the execution time of the cryptographic function, we can obtain
its energy consumption.
B. Evaluation Results
The proposed system is evaluated according to the following
metrics, namely, memory overhead, execution time, and energy
overhead. The memory overhead refers to the amount of RAM
and ROM space occupied by the protocol codes.
Table II gives the execution time of the main operations in
the proposed system when the length of message Que is set to
8 bytes and the length of the parameter modulus n varies. Here,
system initialization indicates the generation of the network
server’s public key and private key. It can be seen that only
this operation takes relatively longer time. The execution times
of other operations are only of the order of milliseconds. For
example, the execution time of proxy signing a message and the
signature verification are 1.57 and 1.72 ms for a network user
and a controller (or the network server) on a 1.6-GHz laptop PC
when the length of n is 1024 bits, respectively. Considering the
clock frequency of a typical smartphone is more than 1 GHz, our
protocols are efficient for most of local processing units (e.g.,
smartphone or laptop PC).
Fig. 4 shows the execution time of SHA-1 hash function (extracted from TinyECC 2.0 [25]) on MicaZ and TelosB motes.
The inputs to the hash function are randomly generated numbers with length varying from 30 to 198 bytes in increments of

324

IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 18, NO. 1, JANUARY 2014

TABLE II
EXECUTION TIME FOR THE MAIN OPERATIONS OF OUR SYSTEM

Fig. 4.

Execution time of SHA-1 hash function on MicaZ and TelosB motes.

4 bytes. We perform the same experiment ten thousand times
and take an average over them. For example, the execution time
on a MicaZ mote for inputs of 30, 58, 122, and 186 bytes are
9.4609, 18.4498, 27.7263, and 37.0021 ms, respectively. Also,
the execution time on a TelosB mote for inputs of 30 and 58
bytes are 5.6012 and 10.50473 ms, respectively. From Fig. 4, it
can be seen that the execution time remains very stable when
the byte length of the input falls in the interval [0, 55], [56, 119],
[120, 183], or [184, 198]. As the input of a hash function, the
longer the length of the PHI (i.e.,{{data}k jr rkjr } in the proposed system) in each round, the bigger the time consumption
of hash operation. Thus, it is suggested that in our system, the
length of the PHI in each round should be chosen according
to the above intervals to achieve a balance between the packet
length and computing complexity. For example, when the length
of the PHI is a bit longer than 55 bytes, according to the system
configuration, only 55 bytes data are picked from the PHI as the
input of a hash function.
Next, the energy consumption of SHA-1 hash function operation is investigated. When a MicaZ mote is used in the circuit,
Vr = 144 mV, I = 7.0727 mA, Vm = 2.8160 V, and P =
19.9167 mW. When a TelosB mote is used, Vr = 40 mV, I =
1.9646 mA, Vm = 2.9200 V, and P = 5.7366 mW. By multiplying the power with the execution time obtained from Fig. 4,
we can determine the total energy consumption of SHA-1 operation on the motes. For example, the energy consumption of

SHA-1 operation with a random 30-byte number as input on
MicaZ and TelosB motes are 0.1884 and 0.0321 mJ,
respectively.
Compared with other commonly known symmetric encryption/decryption algorithms (e.g., RC5, Data Encryption Standard, Triple-DES), the Advanced Encryption Standard (AES)
algorithm is regarded as one of the most efficient ones. Moreover, AES is supported by many hardware platforms for the
MSNs. We have thus implemented software AES encryption/decryption [26] and CC2420 radio based stand-alone hardware AES encryption on MicaZ and TelosB motes. These two
modules are used with ten rounds (with a 128-bit key and 128bit block size) and the ECB mode. For CC2420 radios hardware
AES, the stand-alone mode does not have decryption phase.
Table III shows the execution time of software AES encryption/decryption for MicaZ and TelosB motes with the plaintext
(i.e., the data item data in this paper) of different lengths, respectively. Also, Table IV shows the execution time of stand-alone
hardware AES encryption for MicaZ and TelosB motes with the
plaintext of different lengths, respectively. As expected, it can
be seen from Tables III and IV that hardware AES operation
is much faster than software AES operation for the same level
of security. Also, the time consumed by hardware AES implementation is extremely small. For example, even with 160-byte
plaintext as input, the encryption procedure takes 0.346 and
0.873 ms on MicaZ and TelosB motes, respectively.
When software AES algorithm is executed in a MicaZ
mote, Vr = 136 mV and P = 18.8638 mW. For a TelosB mote,
Vr = 41 mV and P = 5.8783 mW. By multiplying the power
with the execution time given by Table III, we can determine the total energy consumption of software AES encryption/decryption operation on MicaZ and TelosB motes, respectively. For example, the energy consumption of software AES
encryption operation with a random 48-byte plaintext as input
on a MicaZ mote is 0.0633 mJ. Then the energy consumption of
stand-alone hardware AES encryption operation is investigated.
When a MicaZ mote is used in the circuit, Vr = 436 mV and
P = 54.0502 mW. When a TelosB mote is used, Vr = 336 mV
and P = 43.3036 mW. For example, the energy consumption of
stand-alone hardware AES encryption operation with a random
48-byte plaintext as input on a MicaZ mote is 0.0058 mJ. Thus,
the energy consumption of hardware AES is much lower than
that of software AES for the same level of security. According
to the above analysis, the proposed mechanisms are much more
efficient than the public key based protocols (see, e.g., [9]–[12])
in terms of computation complexity and energy consumption.

HE et al.: NOVEL AND LIGHTWEIGHT SYSTEM TO SECURE WIRELESS MEDICAL SENSOR NETWORKS

325

TABLE III
EXECUTION TIME OF SOFTWARE AES FOR MICAZ AND TELOSB MOTES WITH THE PLAINTEXT OF DIFFERENT LENGTHS

TABLE IV
EXECUTION TIME OF STAND-ALONE HARDWARE AES FOR MICAZ AND TELOSB MOTES WITH THE PLAINTEXT OF DIFFERENT LENGTHS

TABLE V
CODE SIZES OF THE WHOLE SYSTEM

Next, we have implemented the proposed system as a whole,
where the controller and node side programs are executed on the
resource-limited sensor nodes, and the network server side programs are executed on PCs. Each node uses CC2420 stand-alone
hardware AES encryption module to encrypt the sensed data.
In our implementation, the controller of a PAN communicates
with the network server through a serial port. Also, each node
uses software AES decryption module to decrypt the response
from the network server. Because the key size of the used AES
algorithms is 16 bytes while the output of SHA-1 function is
20 bytes, only the first 16-byte data are used in the key update
operation. Table V shows the code sizes of the whole system.
For example, the implementation of the node side programs on
a TelosB mote occupies 16 172 bytes of ROM and 463 bytes
of RAM, respectively. The resulting size of this implementation
corresponds to only 32.90% and 4.52% of the ROM and RAM
capacities of TelosB, respectively. Note that a biosensor node
in an MSN is mainly used to collect and transmit the sensor
data and does not need to carry out any data processing task.
The code sizes of these functions are very small, and hence, the
ROM of a biosensor node is only lightly occupied. Therefore,
the implementation overhead of 32.90% of ROM is acceptable.
Finally, we compare the total energy of two cases with respect to communication, i.e., a biosensor node sending data to
the controller 1) without any security protection scheme; and
2) with our security protection scheme. According to (3), the
communication overhead incurred by our security protocol for
each round of data transmission is 20 bytes of message authentication code if SHA-1 is used. Assuming that the transmission
data rate of a mote is 160 kb/s (the maximum data rate of
MicaZ and TelosB motes is 250 kb/s), the transmission time of
20 bytes is 0.977 ms. Given that the C2420 transceiver radio
(used on many sensor motes such as MicaZ and TelosB) draws
17.4 mA in transmitting mode [27] and a mote is operated by a
3-V battery, this extra consumed energy is acceptable.

VII. CONCLUSION
In this paper, we have identified the security challenges facing an MSN for wireless health monitoring and then proposed
a novel and lightweight system to achieve secure data transmission and access control for MSNs. The security analysis has
demonstrated that our system can achieve the requirements of
the protocol of this kind. We have implemented the protocols on
real mobile devices and sensor platforms with limited-resource.
Experimental results have shown that our approaches are feasible for real-world applications.
REFERENCES
[1] K. Lorincz, D. Malan, T. Fulford-Jones, A. Nawoj, A. Clavel, V. Shnayder,
G. Mainland, S. Moulton, and M. Welsh, “Sensor networks for emergency
response: Challenges and opportunities,” IEEE Pervas. Comput., vol. 3,
no. 4, pp. 16–23, Oct. 2004.
[2] J. Choi, B. Ahmed, and R. Gutierrez-Osuna, “Development and evaluation
of an ambulatory stress monitor based on wearable sensors,” IEEE Trans.
Inf. Technol. Biomed., vol. 16, no. 2, pp. 279–286, Mar. 2012.
[3] D. He, C. Chen, S. Chan, and J. Bu, “DiCode: DoS-resistant and distributed
code dissemination in wireless sensor networks,” IEEE Trans. Wireless
Commun., vol. 11, no. 5, pp. 1946–1956, May 2012.
[4] V. Shnayder, B.-R. Chen, K. Lorincz, T. R. F. Fulford-Jones, and M.
Welsh, “Sensor networks for medical care,” Harvard Univ., Cambridge,
MA, USA, Tech. Rep. TR-08-05, 2005
[5] Crossbow Solutions Newsletter. Motes for mobile communication and
tele-medicine. 2005.
[6] K. Malasri and L. Wang, “Addressing security in medical sensor networks,” in Proc. ACM HealthNet, 2007, pp. 7–12.
[7] R. Rajasekaran, V. Manjula, V. Kishore, and T. Sridhar, C. Jayakumar, “An
efficient and secure key agreement scheme using physiological signals in
body area networks,” in Proc. Int. Conf. Advances Comput. Commun.
Informat., 2012, pp. 1143–1147.
[8] H. Wang, H. Fang, L. Xing, and M. Chen, “An integrated biometricbased security framework using wavelet-domain HMM in wireless body
area networks (WBAN),” in Proc. IEEE Int. Conf. Commun., Jun. 2011,
pp. 1–5.
[9] K. Malasri and L. Wang, “Design and implementation of a secure wireless
mote-based medical sensor network,” Sensors, vol. 9, no. 8, pp. 6273–
6297, Aug. 2009.
[10] S. Keoh, “Efficient group key management and authentication for body
sensor networks,” in Proc. IEEE Int. Conf. Commun., Jun. 2011, pp. 1–6.
[11] C. C. Tan, H. Wang, S. Zhong, and Q. Li, “IBE-lite: A lightweight identitybased cryptography for body sensor networks,” IEEE Trans. Inf. Technol.
Biomed., vol. 13, no. 6, pp. 926–932, Nov. 2009.
[12] X. Le, M. Khalid, R. Sankar, and S. Lee, “An efficient mutual authentication and access control scheme for wireless sensor network in healthcare,”
J. Networks, vol. 6, no. 3, pp. 355–364, 2011.
[13] P. Kumar and H.-J. Lee, “Security issues in healthcare applications using
wireless medical sensor networks: A survey,” sensor, vol. 12, pp. 55–91,
2012.
[14] D. He, J. Bu, S. Zhu, S. Chan, and C. Chen, “Distributed access control
with privacy support in wireless sensor networks,” IEEE Trans. Wireless
Commun., vol. 10, no. 10, pp. 3472–3481, Oct. 2011.

326

IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 18, NO. 1, JANUARY 2014

[15] W. He, Y. Huang, R. Sathyam, K. Nahrstedt, and W. Lee, “SMOCK: A
scalable method of cryptographic key management for mission-critical
wireless ad-hoc networks,” IEEE Trans. Inf. Forensics Security, vol. 4,
no. 1, pp. 140–150, Mar. 2009.
[16] S. Zhao, A. Aggarwal, R. Frost, and X. Bai, “A survey of applications of
identity-based cryptography in mobile ad-hoc networks,” IEEE Commun.
Surveys Tutorials, vol. 14, no. 2, pp. 380–400, Second Quarter 2012.
[17] D. Ma and G. Tsudik, “Security and privacy in emerging wireless networks,” IEEE Wireless Commun., vol. 17, no. 5, pp. 12–21, Oct. 2010.
[18] C. Cordeiro and M. Patel, “Body area network standardization: Present
and future directions,” in Proc. BodyNets, 2007, pp. 1–2.
[19] Z. Shao, “Provably secure proxy-protected signature schemes based on
RSA,” Comput. Electr. Eng., vol. 35, no. 3, pp. 497–505, May 2009.
[20] Z. Shao, “Proxy signature schemes based on factoring,” Inf. Process. Lett.,
vol. 85, no. 3, pp. 137–143, 2003.
[21] K. C. Barr and K. Asanovi, “Energy aware lossless data compression,”
ACM Trans. Comput. Syst., vol. 24, no. 3, pp. 250–291, Aug. 2006.
[22] OpenSSL, [Online]. Available: http://www.openssl.org
[23] TinyOS: An open-source OS for the networked sensor regime. [Online].
Available: http://www.tinyos.net/
[24] J. Lee, K. Kapitanova, and S. Son, “The price of security in wireless sensor
networks,” Comput. Networks, vol. 54, no. 17, pp. 2967–2978, Dec. 2010.
[25] A. Liu and P. Ning, “TinyECC: A configurable library for elliptic curve
cryptography in wireless sensor networks,” in Proc. Inf. Process. Sensor
Netw., 2008, pp. 245–256.
[26] Software AES, [Online]. Available: http://tinyos.cvs.sourceforge.net/
viewvc/tinyos/tinyos-2.x-contrib/crypto/index.html
[27] A. Milenkovi, C. Otto, and E. Jovanov, “Wireless sensor networks for personal health monitoring: Issues and an implementation,” Comput. Commun., vol. 29, no. 13–14, pp. 2521–2533, Aug. 2006.

Daojing He received the B.Eng. and M. Eng. degrees
from the Harbin Institute of Technology, Harbin,
China in 2007 and 2009, respectively, and the Ph.D.
degree from Zhejiang University, Hangzhou, China,
in 2012, all in Computer Science.
He is currently an Associate Professor at the South
China University of Technology, Guangzhou, China.
His research interests include network and systems
security.
Dr. He is an Associate Editor or on the editorial
board of some international journals such as Springer
Journal of Wireless Networks, Wiley’s Wireless Communications and Mobile
Computing Journal, Wiley’s Security and Communication Networks Journal,
and KSII Transactions on Internet and Information Systems. He has been serving as a TPC member for leading conferences including IEEE Wireless Communications and Networking Conference, the IEEE Global Communications
Conference, and the IEEE International Conference on Communications.

Sammy Chan (S’87–M’89) received the B.E. and
M.Eng.Sc. degrees in electrical engineering from the
University of Melbourne, Parkville, Vic., Australia,
in 1988 and 1990, respectively, and the Ph.D. degree in communication engineering from the Royal
Melbourne Institute of Technology, Melbourne, Vic.,
Australia, in 1995.
From 1989 to 1994, he was with Telecom Australia
Research Laboratories, first as a Research Engineer,
and between 1992 and 1994 as a Senior Research Engineer and a Project Leader. Since December 1994,
he has been with the Department of Electronic Engineering, City University of
Hong Kong, Hong Kong, where he is currently an Associate Professor.

Shaohua Tang (M’98) received the B.Sc. and M.Sc.
degrees in applied mathematics in 1991 and 1994,
respectively, and the Ph.D. degree in communication
and information system from South China University of Technology, in 1998, all from the South China
University of Technology, Guangzhou, China.
He was a Visiting Scholar with North Carolina
State University, Raleigh, NC, USA, during 2001–
2002, and a Visiting Professor with the University
of Cincinnati, Cincinnati, OH, USA, during 2009–
2010. He has been a Full Professor with the School
of Computer Science and Engineering, South China University of Technology
since 2004. His current research interests include information security, networking, and information processing.
Dr. Tang is a member of the IEEE Computer Society.

