1518

IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 18, NO. 5, SEPTEMBER 2014

An Automatic Rules Extraction Approach to Support
OSA Events Detection in an mHealth System
Giovanna Sannino, Member, IEEE, Ivanoe De Falco, and Giuseppe De Pietro, Member, IEEE

Abstract—Detection and real time monitoring of obstructive
sleep apnea (OSA) episodes are very important tasks in healthcare. To suitably face them, this paper proposes an easy-to-use,
cheap mobile-based approach relying on three steps. First, singlechannel ECG data from a patient are collected by a wearable
sensor and are recorded on a mobile device. Second, the automatic
extraction of knowledge about that patient takes place offline, and
a set of IF. . .THEN rules containing heart-rate variability (HRV)
parameters is achieved. Third, these rules are used in our realtime mobile monitoring system: the same wearable sensor collects
the single-channel ECG data and sends them to the same mobile
device, which now processes those data online to compute HRVrelated parameter values. If these values activate one of the rules
found for that patient, an alarm is immediately produced. This
approach has been tested on a literature database with 35 OSA
patients. A comparison against five well-known classifiers has been
carried out.
Index Terms—IF. . .then rules, knowledge extraction, obstructive sleep apnea (OSA), real-time monitoring system, wearable
sensors.

I. INTRODUCTION
BSTRUCTIVE sleep apnea (OSA) [1] is a breathing disorder that takes place during sleep, when the upper airway
of a patient gets partially or completely constricted. This disorder results in short-term consequences as for instance asphyxia,
awakenings, high blood pressure, hypoxemia, increased heart
rate, and in long-term ones as cardio/cerebrovascular problems,
a compromised immune system, extreme fatigue, poor concentration, and slower reaction times [2]. The number of people
suffering from OSA to some extent is estimated as about 4%
of the general population, yet fewer than 25% of them are diagnosed as being affected by it [3]. It is believed that all OSA
undiagnosed sufferers cause each year in the USA 70 billion
dollars loss, 11.1 billions in damages, and 980 deaths [4].
Detection and real-time monitoring of OSA are very important tasks for both the amelioration of citizens’ health conditions

O

Manuscript received November 18, 2013; revised February 13, 2014; accepted
March 8, 2014. Date of publication February 6, 2014; date of current version
September 2, 2014. This work was supported by the project “A.S.K. - Health”
(PON01_00850).
G. Sannino is with the Department of Technology, University of Naples
Parthenope, Naples 80133, Italy, and also with the Institute of High-Performance
Computing and Networking, National Research Council of Italy (CNR), Naples
80056, Italy (e-mail: giovanna.sannino@na.icar.cnr.it).
I. De Falco and G. De Pietro are with the Institute of High-Performance
Computing and Networking, National Research Council of Italy, Naples 80056,
Italy (e-mail: ivanoe.defalco@na.icar.cnr.it; depietro.g@na.icar.cnr.it).
Color versions of one or more of the figures in this paper are available online
at http://ieeexplore.ieee.org.
Digital Object Identifier 10.1109/JBHI.2014.2311325

and the reduction in mortality and in costs of healthcare. Indeed
they are pivotal in various situations related to the checking of
OSA sufferers, as for example when the patient has to perform
some activities that could worsen the gravity of their disorder.
One such situation can take place during the intake of
some drugs, another being related to anesthesia in perioperative conditions [5]. One more related issue is the feedback for
instantaneous and continuous pressure adjustments in the recently conceived automatic positive airway pressure (APAP)
face masks, which contain pressure sensors and a computer, the
latter being used to monitor patient’s breath and consequently
continuously adjust pressure.
Currently, to diagnose OSA, the gold standard is a sleep
study called PolySomnoGraphy (PSG). This examination has
several disadvantages [6]. It requires many sensors and wires,
so it is quite complicated for patients, requires that patients stay
in a hospital environment for one night or two, may generate
in the patient a stress condition that could influence the OSA
pattern itself, is expensive (the average price in the USA is about
2600 USD [7]), and there are only few places where people can
undergo it, which typically results in long waiting lists and long
waiting times. A further drawback of the PSG test is that, due
to the high amount of sensors and wires, a patient is required to
remain in the same position during the whole night.
Therefore, it is of high importance to design new methods
that are easier, cheaper, and home-based, and in fact several
proposals are being developed to diagnose and monitor OSA.
Recent literature reports on several papers about OSA detection and monitoring with methods other than PSG. For the
sake of brevity, we cannot describe them. Basically, they all
rely on the evaluation of different (sets of) vital parameters:
oximetry [8], [9], EEG [10], ECG [4], [11]–[13], thoracic and
abdominal signals [14], or combinations of them [15], [16].
II. OUR APPROACH TO OSA MONITORING
This paper proposes an easy, portable, and cheap approach in
three phases to real-time monitoring of OSA sufferers.
The first phase involves data gathering. The patient is given
by doctors a wearable ECG sensor and a mobile device, and is
asked to wear the sensor one night at home. The data collected
by the sensor are sent to the mobile which records them. On the
next day the sensor and the mobile are returned to doctors.
The second phase consists in patient diagnosis and knowledge extraction, and takes place offline. Doctors annotate ECG
recording with respect to the occurrence of OSA episodes.
Thanks to the annotations, binary supervised classification is
carried out for each 1-min time interval of the recording as
OSA or no-OSA. By doing so, knowledge about that patient is

2168-2194 © 2014 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See http://www.ieee.org/publications standards/publications/rights/index.html for more information.

SANNINO et al.: AUTOMATIC RULES EXTRACTION APPROACH TO SUPPORT OSA EVENTS DETECTION IN AN MHEALTH SYSTEM

automatically extracted offline from that database as an explicit
set of IF. . .THEN rules containing parameters related to heartrate variability (HRV) analysis. We accomplish this by means of
our DEREx tool [17]. Our approach aims at achieving personalized healthcare, so data annotation and knowledge extraction
are required for each patient, exactly as it is for PSG.
The third phase consists in patient monitoring and is carried
out in real time. The above rules are used in our real-time mobile monitoring system [18], we have developed at iHealthLab
(ICAR-CNR) [19]. Every night, even for long time periods, or
whenever necessary, and wherever she/he is, the patient sleeps
while wearing the ECG sensor, and the recorded data are sent
locally to the mobile device, but now this latter acts as a realtime monitoring system: it receives data, elaborates them, and
computes the values of the set of parameters related to HRV
that are contained in the set of rules personalized for her/him. If
the values of these parameters activate at least one of the rules
describing occurrence of an OSA episode, the monitoring system becomes aware that such an event is taking place, and takes
immediate actions, as e.g., wake up the patient, or send an alert
to medical personnel.
The approach we propose here is characterized by some main
features: clear explanation of the reasons for the detection of
each OSA episode thanks to the set of rules, ease of use due
to the need of one ECG lead only, real-time detection of the
occurrence of an OSA episode, consequent real-time action,
execution of the complete processing phase on a mobile device,
personalized healthcare due to the fact that for each patient a set
of rules specific for her/him only will be found.
Moreover our approach relies on one mobile device and on
one wearable sensor, so monitoring can be done everywhere,
and so a patient is not required to remain in the same position
during the whole night, rather is simply asked to wear the sensor,
to run the application before going to bed, and to stop it when
waking up in the morning.
Although several other proposals for OSA monitoring involve
the use of mobile devices, each of them lacks some of the features of our system. For example, [3], [20] use the mobile simply
to send data to a hospital server where analysis is carried out in
remote. Moreover, the systems proposed in [9], [21], and [22],
lack an Action Layer able to execute immediate actions. Furthermore, all the other approaches listed here detect the occurrence
of apneas on the basis of general (“group”) knowledge rather
than on a rule set specific for each patient.
III. MOBILE REAL-TIME MONITORING SYSTEM
In the following, we provide some software and hardware
details about our developed mobile health monitoring system.
A. Software Details
The system is based on a multilayer architecture, as shown
in Fig. 1, to guarantee to the system the properties as flexibility
capacity. This type of architecture is very advantageous because,
due to the independence through the layers, it allows you to
easily add algorithms and/or sensors as new modules in one
layer without knowing the upper one and/or the lower one. In

Fig. 1.

1519

Multilayer architecture of the realized monitoring system.

the following, we report some details, interested readers can
refer to [18] and [23].
The Data Layer contains the modules to manage sensors data
and patient information. Here data coming from the BioHarness
BH3 sensor (described in next subsection) are collected, and
vital parameters are calculated, such as those arising from the
HRV both in frequency and time domain.
In addition, this layer contains the modules to recognize patient’s posture and activity by analyzing the data coming from an
accelerometer embedded into the BioHarness sensor. Finally, it
has a module to store information in the European Data Format
(EDF), the de-facto standard for EEG and PSG recordings in
both commercial devices and research.
The Decisional Layer represents the intelligent core of the
system and contains the rule engine detailed in [24]. It elaborates
in real time data coming from the Data Layer. The Knowledge
Base Module is composed by the personalized set of rules extracted by DEREx representing the formalization of the knowledge about OSA episodes. Thanks to the Rule Engine module,
the system recognizes in real time critical situations and determines the most suitable actions to be performed.
The Action Layer executes the actions determined by the
previous layer through the implementation of mechanisms that
produce reactions as the generation of alarms.
B. Hardware Details
Electrocardiography, or shortly ECG, is a transthoracic interpretation of the electrical activity of the heart over a period
of time, as detected by electrodes placed on the surface of the
skin of the patient. The recording produced by this noninvasive
procedure is termed an electrocardiogram signal.
The ECG sensor used in our system is the BioHarness 3, a
physiological monitoring sensor in which data are transmitted by
means of Bluetooth technology. It is small-sized and provides
a medical-grade ECG thanks to the use of three electrodes,
heart rate, breathing rate, and three-axis accelerometry. The
BioHarness is composed by a wearable strap that incorporates
Zephyr Smart Fabric ECG and breathing rate sensors.
C. Implementation Details
The system is implemented for resource-limited mobile devices, as PDA and smartphone. It is developed by using Java

1520

IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 18, NO. 5, SEPTEMBER 2014

Fig. 3.

Fig. 2.

Mobile monitoring system interface.

programming language, yet the system could be used to build
desktop applications as well, apart from the user interfaces. For
this case study, the system was developed by using Eclipse IDE
and the Android SDK. We have performed some preliminary
tests using an Android-based tablet, in detail an ASUS Eee Pad
Transformer Prime TF201 model, as Fig. 2 shows.
IV. CLASSIFICATION AND RULE EXTRACTION
In this paper, we perform classification and rule extraction by
using the DEREx tool [17] we specifically designed for these
purposes. Its use here is suggested by the results over a wide set
of medical databases reported in [17], where DEREx obtained
much better results than a wide set of classifiers, including several rule-based ones as OneR, Ridor, and PART.
DEREX is based on Differential Evolution (DE). Each solution in DEREx represents a set of rules; each rule makes
reference to a class, and in the set there should be at least one
rule for each class. For each class more than one rule can be
present. Each rule contains logical ANDs to connect its literals.
For a given database, during evolution DEREx proposes many
rule sets that compete on the basis of a measure of their quality.
Our approach relies on supervised learning, namely a tenfold
cross-validation mechanism is used for the selection of the set of
rules that maximize the percentage of correctly classified items
over unseen examples.
A. Differential Evolution
DE is a stochastic algorithm designed to face multivariable
optimization problems. Its way of representing possible solutions to a given problem consists in vectors of real numbers.
Given a problem, DE works with a set, called population, of
possible solutions, each of which is referred to as an individual.
Each individual is actually a vector of real values. An objective
function, often called fitness function, expresses quantitatively
how good a solution is in solving the specific problem faced.
To face a multivariable optimization problem with a number
of NG real parameters, DE starts by randomly generating an
initial population. This is composed of a number of NPop individuals, each of which consists of an array of NG real values.
Each individual in the initial population is initialized randomly:
each of its fields is given a random real value in the admissible
range for that field.

General structure of a set of rules encoded in a DE individual.

Then, an iteration phase takes place which represents the
generations in the natural evolution: when going from one generation to the next the population is modified through some
transformations. Ten different transformation schemes were designed by Price and Storn [25]. The strategy denoted with randto-best/1/bin has been used for our experiments. In fact, in a
preliminary activity aimed at facing a wide set of testbed medical databases all the ten known DE variants were used [17], and
the experimental results showed that this strategy was the best
on average over that set of databases.
To create the generic ith individual for the new population,
rand-to-best/1/bin considers the ith individual in the current
population xi = (xi,1 , xi,2 , . . . , xi,N G ), and two integer numbers r1 and r2 in [1, . . . , NPop ] differing from each other and
from i are randomly generated. Moreover, another integer number s in the range [1, NG ] is randomly chosen. Then, a new trial
individual xi is generated whose generic jth component is


xi  ,j = xi , j + F · bestj − xi , j + F · (xr 1 ,j − xr 2 ,j )
provided that either a real number ρ randomly generated in [0.0,
1.0] is lower than a value CR (crossover ratio, parameter of
the algorithm, ranging in [0.0, 1.0]), or the position j being
modified is equal to s. If neither condition is true then a copy is
carried out: xi,j = xi,j . In the above equation xi,j is the value
contained in the jth component of xi , and so are xi,j for xi ,
xr 1,j for xr 1 , xr 2,j for xr 2 , and bestj for best, that is the best
individual in the current population. The parameter F (mutation
factor or scale factor) is a real-valued constant.
Next, a comparison takes place between this newly obtained
trial individual xi and the ith individual in the current population
xi . The best between them is copied into the ith position of
the new population. This scheme is iterated until a maximum
number of generations Gen is performed.
B. Representation of Rule Sets in our Approach
Let us suppose that we are given a database divided into NC
classes and that each instance has a number of features equal
to NV . Also, let us denote with NR the maximum number of
rules we would like in order to classify it. The description of the
representation of a generic set of rules useful for classifying in
that database can be easily understood if Fig. 3 is looked at.
The uppermost part of Fig. 3 shows that each DE individual
is a vector, containing real values, representing a set of NR
classification rules written in sequence in the individual.
The middle part of the figure shows that each rule is
represented by a set of fields. Namely, each rule consists

SANNINO et al.: AUTOMATIC RULES EXTRACTION APPROACH TO SUPPORT OSA EVENTS DETECTION IN AN MHEALTH SYSTEM

TABLE I
BOUNDS FOR EACH FIELD IN THE RULE STRUCTURE

1521

value. As an example, a real value equal to 4.56 in that field
should be rounded up to ceiling (4.56) = 5, so that value codes
for the fifth operator in their list. The order for the operators has
been chosen as IN, <, ≤, = , ≥, >, OUT, therefore that value
represents a “≥” operator. The class to which the rule makes
reference is achieved similarly, so a value equal to 1.42 in that
field means that the rule refers to the class ceiling (1.42) = 2.
C. Quality of the Proposed Rule Sets

in a Rule_Active field, followed by a number of NV Literal_Representation groups (one for each variable in the
database), and finally by a Class field. In the rule, the database
variables are listed sequentially, meaning that the generic ith Literal_Representation deals with the ith variable of the database.
Rule_Active states whether or not the rule should be considered during classification. This is decided by comparing the real
value contained in this field against a real value Rule Threshold
(RT), which is a parameter for our tool: if the former value is
higher, then this rule is seen as active in the current individual
and should be used in the classification process.
Each Literal_Representation field encodes a zeroth order literal, i.e., a literal in which only one variable is contained and
is compared with one or two real values by means of relation operators. As shown in the bottom part of Fig. 3, this Literal_Representation field consists of four subfields, each containing a real value, as it is detailed in the next paragraphs.
The first field is the Literal_Active field. Similarly to the
Rule_Active field, it determines whether or not the literal is
present in the rule. A real-valued parameter Literal Threshold
(LT) is defined, and the literal considered is active if and only if
the value in the field Literal_Active is higher than LT.
The second field is called Literal_Type. It encodes the relation
operator that compares the variable and the constant value (s).
We have decided to consider the following seven operators: <,
≤, = , ≥, >, IN, OUT. The first five operators need one constant
value, i.e., C1 , whereas the latter two need two constant values
C1 and C2 . The operator IN checks if the value of the variable
contained in the literal is within the numerical range bound by
C1 and C2 in their order of appearance in the individual. OUT,
instead, checks if the value taken on by the variable in the literal
is outside the range [C1 – C2 ].
The third and the fourth fields of the Literal_Representation
field hold, respectively, the real values for the constants C1 and
C2 (C1 ≤ C2 ).
Finally, the Class field contains the value of the class to which
all the database items satisfying the rule are assigned.
In the creation of the initial population each field of any
individual is given a random real value in the admissible range
for that field. For each field, the admissible range is shown
in Table I. In it, upper limits for Literal Type and Class are
unreachable. For example, Rule_active field can hold any value
within [0.0, 1.0], e.g., 0.42, but it cannot contain 1.23 or –0.68,
because these latter are outside the admissible range [0.0, 1.0].
For each literal, its actual type is achieved by rounding the
real value contained in the Literal Type field up to its ceiling

Given an optimization problem, a fitness function Φ(i) should
be designed to evaluate the quality of each possible solution
proposed by the DE in effectively solving that problem. The
one we have used for each individual i is the percentage of the
correctly classified samples in the training set Tr, i.e., Φ(i) =
(Nc /Ntr )∗ 100.0, where Nc is the number of samples in Tr that
are classified correctly when the set of rules encoded by the
individual i is used, and Ntr is the total number of samples in
Tr. Given this definition, Φ(i) can range within [0.0 – 100.0],
and the classification is a maximization problem.
Given a rule set encoded in an individual, some of the database
items may be indeterminate with respect to that rule set, meaning with this two different things. First, we mean an item that
satisfies at the same time the conditions of rules that assign it
to two or more classes (‘yes-yes’ indeterminate). Second, we
mean an item satisfying the conditions of no rule, so it cannot
be assigned to any class (‘no-no’ indeterminate).
During the training both types of indeterminate items are
seen as classified incorrectly, whereas during the testing a recovery mechanism is applied, since users want each sample in
the testing set to be assigned one class by the system.
The recovery mechanism works as follows. If an item turns
out to be a ‘yes-yes’ indeterminate, its distance from the frontier
of each of the rules taking it is evaluated in the space of the
database attributes. The highest such distance is found, and the
item is considered as taken by the rule with the highest distance,
so it is assigned to the class expressed in that rule. If, instead,
the item is a ‘no-no’ indeterminate, its distance from the frontier
of each of the rules is evaluated in the space of the database
attributes, the rule with the lowest distance is found, and the
item is assigned to the class expressed in that rule.
V. DATABASE
To carry out the experiments, the apnea-ECG database [26]
has been taken into account. It consists of 70 recordings, 35
of which contain annotations about the occurrence of apneas
for each 1-min segment. Hereinafter, we will consider those 35
recordings only. They can be divided into three groups. Twenty
of them, labeled from a01 to a20, refer to people who definitely
suffer from OSA, five (b1–b5) are borderline patients, and ten
(c1–c10) were recorded from people who either suffer from
OSA at a very low degree or do not suffer at all from it.
For each of these 35 patients, we have created a specific
database as follows: the whole recording over the whole night
about that patient is taken into account, and GHRV software 1.2
[27] is used to compute for each 1-min segment the values of the
most important parameters related to HRV analysis. Moreover,

1522

IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 18, NO. 5, SEPTEMBER 2014

we decided not to perform a preliminary selection among them,
rather to use them all in the creation of the databases, and to
leave to DEREx the task of understanding which among them are
really important for classification: DEREx automatically carries
out feature selection and can select the most discriminant for
classification, and only these latter will be contained in the best
sets of rules.
Six of those parameters come from the frequency domain:
Low-frequency/high-frequency ratio: LF/HF; ultra-low frequency: ULF; very low frequency: VLF; low frequency: LF;
high frequency: HF; Power of the signal: P .
Four parameters are from the time domain: Average value of
NN intervals: ANN; The standard deviation of the average NN
intervals: SDANN; Proportion of NN50 divided by total number
of NNs (NN50 is the number of pairs of successive NNs that
differ by more than 50 ms): pNN50; the square root of the mean
squared difference of successive NNs: rMSSD.
Two more parameters are related to nonlinear methods: approximate entropy: AE; fractal dimension: FD.
By doing so, a database has been created for each patient.
Each item in the database represents a 1-min segment of the
recording and is constituted by the values computed for those 12
parameters, and by the class of the item. For this latter, reference
is made to the annotations expressed by medical personnel for
that 1-min segment, and the class is represented by 1 if in that
minute no apnea has taken place based on the annotations, and
by 2 for a minute with apnea.
As in other approaches to apnea detection listed in Section I,
our aim is to carry out classification over each such database,
i.e., to assess whether each 1-min segment contains apnea or
not. So, we do not perform any time series forecasting.
The sleep recordings for the different patients considered have
different durations, so also the databases extracted from those
recordings have different number of items. This number varies
from 428 to 576 items for the 35 patients.
OSA episodes classification problem is quite particular in the
class of classification tasks, especially for the patients suffering
from either moderate/mild OSA or severe OSA. In these cases,
in fact, the database is highly unbalanced, with a vast majority of
the items, in many cases more than 90%, belonging to one of the
two classes. Even worse for classification purposes, those few
items of the minority class are concentrated and sequentially
placed in a very small portion of the database, possibly in just
one of the ten folds. When tenfold cross- validation is carried
out, and the only fold containing the minority items is kept for
testing, training is done on items of the majority class only,
so no rule would be extracted for the minority class. For these
reasons, we have decided to shuffle the items in each of the 35
databases.

TABLE II
DISCRIMINATING ABILITY OF THE BEST SETS OF RULES FOUND

reference to it. We have set NR = 6, i.e., groups of at most
six rules should be searched. Items that are indeterminate, i.e.,
either assignable to both classes or to no class, are assigned to
one class as described in Section IV-C.
As it is the case for any evolutionary algorithm, DEREx too
is not deterministic: its execution and its results depend on an
initial random seed. To get rid of this, we run DEREx 25 times
with 25 different random seeds.
Given a database related to a patient, we carry out tenfold
cross-validation, i.e., the database is divided into ten folds, and
for the generic ith fold the items from the other nine folds,
i.e., 90% of the database items, are used for training, and those
of the ith fold, i.e., the remaining 10%, for testing. Execution
of DEREx over each of these folds yields a rule set. For each
patient, we perform 25 such runs, which leads to 10∗ 25 = 250
supervised classification phases, and to an equal number of rule
sets for the patient. At the end, DEREx provides us with the
“best set of rules” for that patient, i.e., the rule set with the
highest accuracy over the testing set. By iterating this over the
35 patients, we get 35 sets of rules, one for each patient.
Table II shows the total discriminating ability of the system over the 35 databases in terms of accuracy, sensitivity, and
specificity. In the table, each value is the average of the results
achieved by each “best set of rules” over the corresponding
database. For example, the reported accuracy over the testing
set of 92.26% means that the 35 “best sets of rules” found allow
the correct classifying of 92.26% of all the instances over the
corresponding 35 testing sets on which they were found.
As an example, the best set of rules for patient A04 is:

Table III shows that these rules correctly take all the testing
set items. Furthermore, also performance over the training set
is really good, and so is that over the whole database.
As another example, the best set for patient A19 is:

VI. EXPERIMENTS
We have used our DEREx tool [17] to classify OSA episodes
and to perform the automatic extraction of an explicit set of
IF–THEN rules from each of the 35 databases.
We assumed the class containing OSA episodes as the positive
class, so accuracy, sensitivity, and specificity are computed with

and Table IV shows its discriminating ability.
If we compare these two sets of rules, we have a confirmation to our hypothesis that the most relevant parameters for the

SANNINO et al.: AUTOMATIC RULES EXTRACTION APPROACH TO SUPPORT OSA EVENTS DETECTION IN AN MHEALTH SYSTEM

TABLE III
DISCRIMINATING ABILITY OF THE BEST SETS OF RULES FOUND
FOR PATIENT A04

1523

TABLE VI
RESULT ACHIEVED BY THE TESTED CLASSIFIERS

TABLE VII
AVERAGE RESULTS FOR SENSITIVITY
TABLE IV
DISCRIMINATING ABILITY OF THE BEST SETS OF RULES FOUND
FOR PATIENT A19

TABLE VIII
AVERAGE RESULTS FOR SPECIFICITY

TABLE V
DISCRIMINATING ABILITY OF THE BEST SETS OF RULES FOUND
FOR THE GLOBAL DATABASE

discrimination of OSA episodes depend on the specific patient
under monitoring: they contain different variables and different
thresholds, so a set of rules which is very good for a patient
could be unsuitable for the others.
In fact, even if some parameters, as for example ANN, are
contained in many of the 35 sets of rules, each patient may
require some parameters that may be specific for her/him only.
If, instead, we form one global database by merging all the
35 patient databases, DEREx finds this best set of rules for it:

Table V shows their performance.
These rules contain parameters that are not in the above
shown sets for patients A04 and A19. Also, global performance
is worse, especially for specificity. This proves that one single database of patients affected by OSA, as used in other approaches, is not well suited to take care for a specific patient.
VII. COMPARISON WITH OTHER ALGORITHMS
We have considered other five classifiers well known in literature and have compared the results of DEREx against theirs.
Namely, we have used the Waikato Environment for Knowledge
Analysis (WEKA) system [28], a free tool containing many classifiers. From among them, we have chosen the Support Vector
Machine (SVM), the Logistic Regression (LR), the Random
Forest (RF), AdaBoost (AB), and Bagging.
Similarly to DEREx, for all of the five classifiers no preliminary parameter tuning has been carried out, and the parameter
set used for each classifier is the one that is found as default in

WEKA. To compare fairly DEREx against these classifiers, their
results should be averaged over 25 runs as well. Actually, SVM,
AB, Bagging, and RF use a random starting seed to achieve
different executions, therefore the 25 runs for them have been
carried out by varying this initial value. WEKA implementation
of Logistic Regression, instead, is not based on any random
starting seed, so for it the 25 executions have been achieved by
means of the slight variation in the value of a typical parameter,
i.e., ridge.
Also for these five classifiers tenfold cross-validation has been
carried out in each run. Table VI reports the-results in terms of
the average value of accuracy over the testing set among the 35
databases and of the related standard deviation.
The table shows in bold for each parameter the best value
obtained by all algorithms. These results underline that the average accuracy of DEREX over the 35 databases is the highest,
along with that of Bagging. Besides, the standard deviation of
DEREx is not far from that of the best one, i.e., Bagging, which
means that the performance of our algorithm is quite insensitive
to the different initial random values.
The value for accuracy reported for DEREx in this table
is quite lower than that in Table II, because here accuracy is
averaged over the best rule sets found over each of the ten folds
in the 25 runs for each of the 35 patients, whereas there for each
patient the “best set of rules” is considered only. The accuracy
over the training set, instead, is 90.39, much higher than that in
Table II, and higher than that over the testing set.
Table VII shows the average sensitivity values over the 35
databases and the standard deviation for the six classifiers.
The highest average value of sensitivity is attained by DEREx,
the runner-up, i.e., Bagging, being about 5% far away. Therefore, DEREx has a lower number of false negatives, i.e., apnea
episodes that are erroneously classified as nonapnea, in comparison to the other five algorithms. This means that our system is
better able to generate alarms only when necessary.
Table VIII shows the same information for the specificity.
DEREx shows the highest value in this case too, as the runnerup, i.e., in this case the Bagging, is at a distance of about

1524

IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 18, NO. 5, SEPTEMBER 2014

3%. Therefore DEREx has a lower number of false positives,
resulting in a lower number of unnecessary alarms generated.
As a summary, this comparison shows that a classification
based on sets of IF. . .THEN rules can distinguish apnea episodes
more accurately than these other tools can. Besides, these other
tools do not extract rules, so they cannot be used to create the
knowledge base needed in our system. We believe this userfriendliness of our system could be very helpful to doctors in
understanding the reasons for system’s decisions.
VIII. CONCLUSION
Real-time detection and monitoring of OSA episodes are critical for several reasons. In this paper, we have proposed an
approach, embedded in a real-time mobile monitoring system,
to monitor patients suffering from OSA. Our approach is quite
easy, because it gathers single-channel ECG data only, and is
based on the automatic extraction of explicit knowledge from a
database containing information about the monitored patient in
the form of a set of IF. . .THEN rules containing typical HRV
parameters. We have tested our approach on a well-known literature database of OSA patients. The numerical results have shown
its effectiveness, and the extracted rule sets indicate its ease of
use. We feel this latter feature is very helpful for doctors. The
comparison against five well-known classification algorithms
has shown the superiority of our approach.
An interesting conclusion is that dealing with a unique
database of patients suffering from OSA, as done in other approaches, is not well suited for the care of a specific patient.
In the near future, we will plan a pilot testing thanks to a
collaboration with the Department of Oto-Rhino-Laryngology
of Hospital “Policlinico” of Naples. The testing phase will include some experiments with volunteers suffering from OSA
who will be monitored using our mobile monitoring system.
For each volunteer the three phases of our approach will be
carried out. Namely in the third phase each volunteer will use
the system for at least two weeks. Finally, all the recordings
will be analyzed to compute sensitivity and specificity for each
volunteer, and for the whole system.
Finally, we feel that our monitoring system can be a good
controller for an APAP device: whenever an OSA event is recognized the air pressure can be increased, and vice versa. Therefore, we plan to work on this issue.
REFERENCES
[1] W. T. McNicholas and P. Levy, “Sleep-related breathing disorders: Definitions and measurements,” Eur. Respir. J., vol. 15, no. 6, pp. 988–989,
2000.
[2] M. Koskenvuo, J. Kaprio, T. Telakivi, M. Partinen, K. Heikkila, and
S. Sarna, “Snoring as a risk factor for ischemic heart disease and stroke in
men,” Brit. Med. J., vol. 294, pp. 9–16, 1987.
[3] S. Alqassim, M. Ganesh, S. Khoja, M. Zaidi, F. Aloul, and A. Sagahyroon,
“Sleep apnea monitoring using mobile phones,” in Proc. e-Health Netw.,
Appl. Serv., 2012, pp. 443–446.
[4] L. Almazaydeh, K. Elleithy, and M. Faezipour, “Detection of obstructive sleep apnea through ECG signal features,” in Proc. IEEE Int. Conf.
Electro/Inf. Technol., 2012, pp. 1–6.
[5] C. den Herder, J. Schmech, D. Appelboom, and N. de Vries, “Risks of
general anaesthesia in people with obstructive sleep Apnea,” Brit. Med.
J., vol. 329, pp. 955–959, 2004.

[6] P. Ryan, M. Hilton, D. Boldy, A. Evans, S. Bradbury, S. Sapiano,
K. Prowse, and R. Cayton, “Validation of British thoracic society guidelines for the diagnosis of the sleep apnoea/hypopnoea syndrome: Can
polysomnography be avoided?,” Thorax, vol. 50, pp. 972–975, 1995.
[7] New Choice Health: medical cost comparison, (2014, Feb. 10). [Online].
Available.
http://www.newchoicehealth.com/Directory/Procedure/51/
Sleep%20Study%20%28Polysomnography%29
[8] L. Almazaydeh, M. Faezipour, and K. Elleithy, “Neural network system
for detection of obstructive sleep apnea through SpO2 signal features,”
Intl. J. Adv. Comp. Sci. App., vol. 3, no. 5, pp. 7–11, 2012.
[9] N. Oliver and F. Flores-Mangas, “HealthGear: Automatic sleep apnea
detection and monitoring with a mobile phone,” J. Commun., vol. 2, no. 2,
pp. 1–9, 2007.
[10] R. Lin, R. Lee, C. Tseng, H. Zhou, C. Chao, and J. Jiang, “A new approach
for identifying sleep apnea syndrome using wavelet transform and neural
networks,” Biomed. Eng.: Appl., Basis Commun., vol. 18, no. 3, pp. 138–
143, 2006.
[11] A. F. Quiceno-Manrique, J. B. Alonso-Hernandez, C. M. TraviesoGonzalez, M. A. Ferrer-Ballester, and G. Castellanos-Dominguez, “Detection of obstructive sleep apnea in ECG recordings using time-frequency
distributions and dynamic features,” in Proc. 31st Int. Conf. IEEE EMBS,
2009, pp. 5559–5562.
[12] B. Yilmaz, M. Asyali, E. Arikan, S. Yektin, and F. Ozgen, “Sleep stage and
obstructive apneaic epoch classification using single-lead ECG,” Biomed.
Eng. Online, vol. 9, no. 39, pp. 1–14, Aug. 19, 2010.
[13] M. Bsoul, H. Minn, and L. Tamil, “Apnea Medassist: Real-time sleep
apnea monitor using single-lead ECG,” IEEE Trans. Inf. Technol. Biomed.,
vol. 15, no. 3, pp. 416–427, May 2011.
[14] A. Ng, J. Chung, M. Gohel, W. Yu, K. Fan, and T. Wong, “Evaluation of
the performance of using mean absolute amplitude analysis of thoracic
and abdominal signals for immediate indication of sleep apnoea events,”
J. Clin. Nurs., vol. 17, no. 17, pp. 2360–2366, 2008.
[15] D. Alvarez, R. Hornero, J. Marcos, F. Campo, and M. Lopez, “Spectral
analysis of electroencephalogram and oximetric signals in obstructive
sleep apnea diagnosis,” in Proc. 31st IEEE Intl. Conf. Eng. Med. Biol.
Soc., Sep. 2009, pp. 400–403.
[16] B. Xie and H. Minn, “Real time sleep apnea detection by classifier combination,” IEEE Trans. Inf. Technol. Biomed., vol. 15, no. 3, pp. 469–477,
May 2012.
[17] I. De Falco, “Differential evolution for automatic rule extraction from
medical databases,” Appl. Soft. Comput., vol. 13, pp. 1265–1283, 2013.
[18] G. Sannino and G. De Pietro, “A smart context-aware mobile monitoring
system for heart patients,” in Proc. IEEE BIBM, Atlanta, GA, USA, 2011,
pp. 655–695.
[19] iHealthLab home page. (2011, May31). [Online]. Available. http://
ihealthlab.icar.cnr.it/.
[20] R. Ishida, Y. Yonezawa, H. Maki, H. Ogawa, I. Ninomiya, K. Sada,
S. Hamada, A. W. Hahn, and W. M. Caldwell, “A wearable, mobile phonebased respiration monitoring system for sleep apnea syndrome detection,”
Biomed. Sci. Intrum., vol. 41, pp. 289–293, 2005.
[21] D. Patil, V. M. Wadhai, S. Gujar, K. Surana, P. Devkate, and S. Waghmare,
“APNEA detection on smart phone,” Intl. J. Comput. Appl., vol. 59, no. 7,
pp. 15–19, 2012.
[22] M. Rofouei, M. Sinclair, R. Bittner, T. Blank, N. Saw, G. DeJean, and
J. Heffron, “A non-invasive wearable neck-cuff system for real-time sleep
monitoring,” in Proc. Inel. Conf. Body Sens. Netw., Washington, DC, USA,
2011, pp. 156–161.
[23] G. Sannino and G. De Pietro, “An evolved ehealth monitoring system for
a nuclear medicine department,” in Proc. Developments E-syst. Eng., Dec.
6–8, 2011, pp. 3–6.
[24] A. Minutolo, M. Esposito, and G. De Pietro, “A mobile reasoning system
for supporting the monitoring of chronic diseases,” in Proc. 2nd Int. ICST
Conf. Wireless Mobile Commun. Healthcare MobiHealth, 2011, pp. 225–
232.
[25] K. Price, R. Storn, and J. Lampinen, Differential Evolution: A Practical
Approach to Global Optimization. New York, NY, USA: Springer, 2005.
[26] T. Penzel, “The apnea–ECG database,” Comput. Cardiol., vol. 27, pp. 255–
258, 2000.
[27] GHRV software home page. (2012, Sep). [Online]. Available. http://
milegroup.github.io/ghrv/index.html, Last accessed 2014, Feb. 10.
[28] M. Hall, E. Frank, G. Holmes, B. Pfahringer, P. Reutemann, and
I. H. Witten, “The weka data mining software: An update,” SIGKDD
Explorations, vol. 11, no. 1, pp. 10–18, 2009.
Authors’ photographs and biopgraphies not available at the time of publication.

