IEEE TRANSACTIONS ON BIOMEDICAL ENGINEERING, VOL. 61, NO. 4, APRIL 2014

1231

Modeling Biology With HDL Languages: A First
Step Toward a Genetic Design Automation Tool
Inspired From Microelectronics
Yves Gendrault, Morgan Madec∗ , Christophe Lallement, Member, IEEE, and Jacques Haiech

Abstract—Nowadays, synthetic biology is a hot research topic.
Each day, progresses are made to improve the complexity of artificial biological functions in order to tend to complex biodevices
and biosystems. Up to now, these systems are handmade by bioengineers, which require strong technical skills and leads to nonreusable development. Besides, scientific fields that share the same
design approach, such as microelectronics, have already overcome
several issues and designers succeed in building extremely complex
systems with many evolved functions. On the other hand, in systems
engineering and more specifically in microelectronics, the development of the domain has been promoted by both the improvement
of technological processes and electronic design automation tools.
The work presented in this paper paves the way for the adaptation
of microelectronics design tools to synthetic biology. Considering
the similarities and differences between the synthetic biology and
microelectronics, the milestones of this adaptation are described.
The first one concerns the modeling of biological mechanisms. To
do so, a new formalism is proposed, based on an extension of the
generalized Kirchhoff laws to biology. This way, a description of all
biological mechanisms can be made with languages widely used in
microelectronics. Our approach is therefore successfully validated
on specific examples drawn from the literature.
Index Terms—Biological models, computer-aided engineering,
design flow, hardware description languages, synthetic biology.

I. INTRODUCTION
OR the last ten years, synthetic biology, a new emerging
field at the interface between biotechnologies and engineering sciences, has been fast growing. The goal of synthetic
biology is to create new artificial biological systems by assembling biological parts uncoupled from their environment [1].
Synthetic biology has many applications, ranging from pharma-

F

Manuscript received September 9, 2013; revised November 21, 2013; accepted December 14, 2013. Date of publication January 9, 2014; date of current
version March 17, 2014. Asterisk indicates corresponding author.
Y. Gendrault and C. Lallement are with the Laboratoire des Sciences de
l’Ingénieur, de l’Informatique et de l’Imagerie, Université de Strasbourg and
the Centre National de Recherches Scientifiques, Strasbourg 67400, France
(e-mail: ygendrault@unistra.fr; c.lallement@unistra.fr).
∗ M. Madec is with the Laboratoire des Sciences de l’Ingénieur, de
l’Informatique et de l’Imagerie, Université de Strasbourg and the Centre National de Recherches Scientifiques, Strasbourg 67400, France (e-mail: morgan.
madec@unistra.fr).
J. Haiech is with the Laboratoire d’Innovation Thérapeutique, Université de
Strasbourg and the Centre National de Recherches Scientifiques, Strasbourg
67400, France (e-mail: haiech@unistra.fr).
Color versions of one or more of the figures in this paper are available online
at http://ieeexplore.ieee.org.
Digital Object Identifier 10.1109/TBME.2014.2298559

ceutics, healthcare, and innovative therapeutics to agriculture
and environment [2]–[13]. Up to now, artificial biosystems are
mainly designed by hand but these designs become increasingly
complex.
One of the most impressive examples is a new low-cost treatment against malaria, especially needed in developing countries.
Anti-malaria drugs rely upon expensive artemisinin-based combination therapies. The main cost in these therapies lies in the
synthesis of the molecule of artemisinin. Therefore, Martin et al.
reprogrammed common yeasts into an artificial biosystem that
synthesizes this molecule, paving the way for the development
of low-cost drugs [2].
Another example of synthetic biosystem is the improvement
of artificial insemination for cows designed by Kemmera et al.
With the standard technique, the success rate is only of 60%
because it is difficult to trig the spermatozoa insemination with
the cow ovulation [3]. To improve this rate, the team has developed cellulose capsules containing sperm and cells with artificial genetic material. The biological function embedded in these
cells is the synthesis of cellulose (which destruct the cellulose
membrane and release spermatozoa) when a hormone naturally
synthesized by the cow during the ovulation cycle is detected.
Thanks to this system that the success rate has been improved
almost to 100%.
A last example concerns the detection of cancerous HeLa
cells according to a microRNA signature [4]. Xie et al. designed an artificial gene network that synthesizes a fluorescent
protein when the microRNAs combination corresponds to a tumorous cell. The synthesis of the marker is stopped as soon as
the combination changes (the absence of microRNAs that are
expected to be present or the presence of microRNAs that are
expected to be absent). Eventually, this artificial system could
be used in drugs to target only diseased cells and reduce the
side effects of cancer therapies. This example is one of the most
complex artificial biological functions. As such, it is used in this
paper as an example to illustrate the power of our approach.
These three examples illustrate the potential of synthetic biology. However, in all these cases, the whole design has been
carried out in a specific context, which reduces the reusability
of these developments. Several research teams try to tackle this
shortcoming with the development of standardized and reusable
artificial genes whose behavior is completely uncoupled from
their environment. This way of thinking leads to the concept
of BioBricks introduced in 2003 by T. Knight, D. Endy, and
C. Voigt at the MIT [14]–[16]. BioBricks are standardized biological parts corresponding to DNA strands coding for a specific

0018-9294 © 2014 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See http://www.ieee.org/publications standards/publications/rights/index.html for more information.

1232

IEEE TRANSACTIONS ON BIOMEDICAL ENGINEERING, VOL. 61, NO. 4, APRIL 2014

structure or function. They are classified into several categories
depending on the complexity of the structure and the number
of elements involved. Thus, an analogy between BioBrick parts
and transistors can be made. Parts are the most basic bricks
that can be assembled to form BioBricks devices, which can be
compared to more complex electronic devices (amplifier, filter
or logic gates). These BioBricks devices can also be assembled
to create complete systems. Basically, the concept of BioBricks
mimics the concept of standard cells (in the expression “standard cell,” the term “cell” does not have any biological meaning)
in microelectronics.
To go further in the analogy between synthetic biology and
electronics, it should be noticed that the behavior of biological
mechanisms can be qualitatively described by a digital abstraction [17]. Moreover, several works point out the ability to design logic gates with biological material [18]–[21]. For instance,
Ausländer et al. describe the building of biological gates, namely
an AND gate and a XOR gate in order to achieve a half-adder and
a half-subtractor (this example is also used in this paper to illustrate our method) [19]. We can start from this point to envision
the complete reuse of high-performance design methodologies
used in digital electronic circuits for synthetic biology [21].
Over the last 40 years, microelectronics has been a fastgrowing field: digital circuits, composed in the 1970s with only
a few hundred of transistors, reach now over 2 billion of transistors. This trend was predicted by Moore’s law (the transistor
density of integrated circuits would double about every two
years). In biotechnology, a similar behavior, showing the diminishing cost of DNA sequencing over time, is pointed out by
Carlson [22]. That would suggest that synthetic biology might
experience, in a near future, an increase in the complexity of
designed systems at least as much faster as it was the case in
microelectronics.
The development of microelectronics has been possible
through the improvement of the technology (miniaturization
of components, improvement of manufacturing processes, etc.)
of course, but also thanks to the development, in parallel, of dedicated computer-aided design (CAD) tools, namely electronic
design automation (EDA). EDAs are unavoidable in the design
of complex microelectronics systems [23]–[25]. The development of the same kind of software in the domain of synthetic
biology, a genetic design automation (GDA) tool, would be
necessary to support the development of this new engineering
domain. Nevertheless, it is a big challenge that leaves some
scientists enthusiastic [26] and some others doubtful [27].
The aim of our work is to give the outlines of such a GDA
by adapting tools and methods that have already proven themselves in the field of microelectronics. A first milestone in this
work is to consider if the description languages (e.g., VHDL and
VHDL-AMS) used in microelectronics can also be used to describe the biological material. As a consequence, the development of a framework for the description of biological mechanisms in VHDL-AMS is a first step in this way. This is the topic
of the work described in this paper.
First, we present the general framework of the GDA for synthetic biology as well as a state-of-the-art of existing tools.
Then, we focus on the models, their standardization, and their

automated generation. Next, our approach is validated thanks to
results gathered from the literature on three advanced artificial
biosystems. Finally, results are discussed and some outlooks of
the project are given in the conclusion.

II. BACKGROUND AND STATE OF THE ART
Ideally, a complete GDA tool based on a top-down design
approach should be composed in five main stages [25], [26]:
an interpreter that can convert handwritten high-level specifications into a formal description of the targeted function, a
synthesizer in charge of the generation of a network of biological mechanisms that meets the targeted function, a simulator
for the validation and the performance prediction of the biological circuit, an optimizer which compares different equivalent
BioBricks assembly and find out the most appropriate and an
output interface gathering all the required information for the
realization of the system.
Many research works in this area are currently underway and
resulting tools are already useful for several stages in the design
of an artificial biosystem. The issue of modeling and simulation
is widely covered by many dedicated software such as BioSpice
[28] and COPASI [29] or is integrated in softwares with a larger
scope. Among others, we can highlight GenoCAD [30], [31],
TinkerCell [32], [33], SynBioSS [34], [35], Cell Designer [36],
[37] or BioJade [38], [39], thanks to which the designer can
virtually assemble a set of BioBricks picked up in a library
and simulate it. Such tools are efficient but the entry point is a
BioBricks assembly that corresponds to the targeted function.
Even if some tools exist (e.g., Proto which captures and compiles
a high-level description of a biological function in order to
compute the artificial assembly of abstracted BioBricks that
achieve it [40]–[42]), this assembly is mostly designed by hand,
which can be a very time-consuming task.
The contributions described in the previous section may be
put together in order to assemble a complete GDA tool that meet
designers’ expectations. However, most of them have been developed in a given context and according to formalisms that are
specific to each laboratory. As a consequence, the aggregation
of the existing tools into a GDA seems to be an intricate task.
The approach proposed in this paper is quite different. We aim
to develop a GDA on the basis of an existing software suite
used in the domain of microelectronics, and reengineer some
tools to adapt them to biological hardware. Therefore, more
constraints have to be taken into consideration, as the biological
hardware used in synthetic biology is made of genetic material,
and is no more a silicon wafer. For example, the transmission
of electronic information is carried out by electrons flowing in
insulated metallic tracks and the designer has to pay attention
to the size of these tracks and their clearance in order to avoid
open or short circuits. In a biological system, the information
is carried out by molecules which can potentially interact with
each other within the cell. As a consequence, the risk of perturbation of one function by the others increases and the number
of potential interactions becomes a strong constraint that does
not exist in microelectronics.

GENDRAULT et al.: MODELING BIOLOGY WITH HDL LANGUAGES

Fig. 1.

1233

Scheme of the global project of a GDA tool for synthetic biology, based on electronic languages.

The diagram depicted in Fig. 1 is the global vision of the
software suite we would like to develop. The process starts with
a description of the biological function to design. This leads
to the expression of the system’s specifications. Since it has
been demonstrated that most of the biological processes can be
abstracted as digital functions [17]–[21], those specifications
can be expressed through HDL, as for digital microelectronics. Thus, existing digital synthesizers and RTL compilers that
transform the HDL behavioral description into a structural one
(a netlist of elementary digital operators) can be reused. This
operation requires a library of elementary parts on which digital
function are mapped. As a consequence, the adaptation of this
tool to biological media only consists in building a library of abstracted BioBricks that can be used to realize digital functions.
This way, after the synthesizer, we get a netlist of abstracted biological mechanisms that corresponds to the specifications. The
feasibility of this step is still under consideration. This upstream
part is Block 1 in Fig. 1.
The next step (Block 2 in Fig. 1) is the BioBrick Compiler
which is equivalent to a Silicon Compiler in EDA tools. It aims
to find the most relevant BioBricks that should be assembled
to realize the targeted function. This tool should be linked with
a library or a database of actual BioBricks, as for instance the
Part Registry created in the context of the iGEM Competition
[43], where the BioBricks needed to build the system can be
picked up. Some tools that carry out this stage have already
been developed [30]–[39], [44].
The third part of the software (Block 3 in Fig. 1) concerns the
modeling and simulation and is more thoroughly studied in this
paper. It consists in generating models for the assemblies suggested by the BioBrick Compiler. The constraints of the model
are the same that for circuits modeling in microelectronics: the
models of each BioBrick should be compact (reduced to 1-D
differential equations set), multilevel (different abstraction levels may be used for a given BioBrick in order to find tradeoffs
between simulation time and result accuracy), fully interfaced
with each other and compatible with conventional electronic
simulators. This step might be iterative and an optimizer should
be developed in order to use simulation results as a feedback for
the BioBrick Compiler.

Finally, the last part of the design suite (Block 4 in Fig. 1)
corresponds to the back-end of an EDA. It is composed of
design verification tools and blueprints generation. In the case
of biological hardware, a blueprint corresponds to the artificial
DNA sequence to assemble in order to get the required function.
In this paper, we focus on the description and the modeling of
biological mechanisms. In previous works, we have already validated the feasibility of this extension with two of the three main
HDLs: VHDL-AMS [45]–[47] and SystemC-AMS [48]–[50].
Following on from this study, the next step of investigation
concerns the embedding of the HDL models into macrodescriptions in order to make the model contents transparent for the
user. This is mandatory for two reasons. First, bioengineering
teams, which are expected to be the users of our tool, may not
know about HDL languages used in microelectronics and/or
may already work with their own description formalisms, such
as systems biology markup language (SBML) [51], [52]. Second, the integration of modeling into a complete design flow
requires a direct coupling between models, the simulator, and
the other stages of the design suite.
III. MODELS
Let us focus on the modeling part of this diagram (Block 3 in
Fig. 1). As given in Fig. 1, at least three levels of abstraction are
required to cover the simulation needs in the design process.
A. Abstraction Levels
First, the biosystem can be described roughly using its digital
abstraction. This way, the designer can validate the assembly
designed or provided by the BioBrick Compiler in a qualitative way. This model uses only Boolean operators (AND, OR,
NOT, etc.) and can possibly be completed with propagation time
between input and output for each operator [54]. As it is straightforward, it is not described in detail in this paper.
The second kind of models is based on ordinary differential
equations (ODEs) which are used to estimate the average evolution of species in a cell in temporal and quantitative ways.
All of them have been written according to a given formalism

1234

IEEE TRANSACTIONS ON BIOMEDICAL ENGINEERING, VOL. 61, NO. 4, APRIL 2014

in order to be compatible with an implementation with HDLs.
More details on this topic are given in the next section.
Finally, the lower level of abstraction is the stochastic model.
It is used to follow the evolution of each individual species in
the cell. This simulation cannot be carried out with standard
microelectronics tools and requires the development of a dedicated simulator [58], [59]. This modeling level is mainly used
for postdesign validation purpose.

Fig. 2. Formalism of the conservative model using black boxes containing
biological mechanisms, connected to a biological BUS.

B. Conservative Model for Biological Mechanisms
The biochemical reactions that govern the evolution of the
species in a living cell can be approximated using a set of
ODEs [53]. With the increase of system’s complexity, it becomes mandatory to adopt a systems approach to describe the
interactions between genes and species: elementary mechanisms
are modeled into black boxes containing the ODEs that are interconnected to form the complete biosystem. This approach,
commonly known as block-diagram, is very straightforward but
suffers from a major shortcoming, especially in biology: the introduction of a new block in the model may have an influence
on all the other instantiated blocks (e.g., if we consider on one
hand a gene that synthesizes the ligand L and on the other hand a
binding reaction involving L, the actual concentration of L cannot be computed by the first block alone but is an equilibrium
between a synthesis term in the first block and a consumption
term in the second one). This is in conflict with the basic assumption of block-diagram theory. As a consequence, a lot of
feedbacks should be added in the block-diagram description,
which increases dramatically the computation time and the risk
of divergence of the model.
In microelectronics, block-diagrams are sometimes used to
describe systems but such descriptions are only valid if some
rules about input and output impedances of blocks are respected.
Most of the time, electronic networks are described by means
of conservative models based on the generalized Kirchhoff laws
(GKL).
Although such laws do not exist in biology, there is an analogy
between the behavior of electrons in a circuit and proteins inside
a cell: biochemical species have a conservative behavior and
their interaction with each other and with the cell can be modeled
by a set of GKLs [53]. The actual concentration of a species
in the cell is given by a balance between four mechanisms: the
synthesis of species or their entrance in the cell, the consumption
of species or their release out of the cell, the storage of the
species inside the cell, and the natural degradation of the species.
Basically, the ODE that rules the temporal evolution of the
concentration of a given species Xk is
dXk
+ dk Xk = Sk (x) − Ck (x)
(1)
dt
where x = (x1 ,. . .,xN ) is a vector containing the concentration
of the N different species involved in the cell, Sk and Ck are,
respectively, the x-depending synthesis and consumption term
related to the species Xk and dk is the natural degradation rate
of Xk . Sk (x) and Ck (x) are themselves a linear combination of
the contributions of the various biological mechanisms involving the species k. Let us consider a system with M biological

mechanisms. Synthesis and consumption terms are given by
Sk (x) =

M


Sk ,j (x)

(2)

Ck ,j (x)

(3)

j =1

and
Ck (x) =

M

j =1

where Sk ,j (x) and Ck ,j (x) are, respectively, the contribution of
the jth mechanism to the synthesis and the degradation of Xk .
This equation can be modeled by a GKL network with the concentration equivalent to the electrical potential and the species’
flow equivalent to the electrical current. With this assumption,
(1) corresponds to an electrical circuit with four components in
parallel: a positive voltage-driven current source (VDCS) depending on all other voltages in the cell for the synthesis function, an equivalent negative VDCS for the consumption term,
a resistance to model the natural degradation term, and a unit
capacitor modeling the accumulation of species inside the cell
(see Fig. 2) [53].
For a complete biosystem involving N species and M mechanisms, the model consists of a set of N coupled ODEs similar
to (1). To build this model, we opted for a modular approach.
Each interaction between species involved in the system is represented by a black box Bj containing, for each involved species,
a VDCS (positive if the interaction tends to produce species or
negative if the interaction consumes it). All the boxes are then
connected together in parallel and to a “biological bus” which
corresponds to the space where species flows (the cell itself in
most of the cases) and on which N capacitors and N resistors,
one for each species k involved in the system, are connected.
To retrieve the coupled ODEs set, we can take advantage of
one of the main feature of HDLs used in microelectronics: the
multidomain approach. The language and the associated simulator have been developed to manage coupled set of ODEs
from different physical domain (electronics, thermal, mechanical, etc.) as soon as it obeys GKL. In our approach, each species
is considered as one physical domain, or nature in VHDL-AMS.
Every component of every Bj block is connected in parallel on
the biological bus but belongs to different natures. The VHDLAMS compiler builds the model equation set by considering the
nodes nature by nature. As a consequence, it builds the set of N
electronic circuits with, in parallel, the resistor and the capacitor of the chassis as well as VDCSs modeling the contribution
of each biochemical interaction involving this nature. Parallel

GENDRAULT et al.: MODELING BIOLOGY WITH HDL LANGUAGES

1235

TABLE I
OVERVIEW OF THE MAIN FEATURES FOR THE EXAMPLES USED IN SECTION IV

Fig. 3. C++ software architecture based on two main parts: the GUI and the
engine.

association of those VDCSs computes (2) and (3) and the ODE
(1) is retrieved by applying Kirchhoff’s current law on the whole
circuit. The same process is carried out for each species leading
to a set of N coupled ODEs. In addition to this mechanism,
three major advantages derive from our approach and ownership of HDL: 1) each node of the black boxes (called terminal
in VHDL-AMS) belongs to a given nature. As a consequence,
confusions are avoided even if all the boxes are connected on the
same biological bus; 2) the integration of new mechanisms is
simplified and consists only in connecting the new black box on
the biological bus; and 3) the simulation of the modeled system
can be taken in charge by existing electrical simulator which
has proven itself.
The price to pay for these advantages is a long and arduous
model writing process. It consist in defining, in chronological
order, a set of involved natures in a package file, then all the
basic components (VDCS, resistor, capacitor) for each nature,
then a corresponding structural model based on basic components for each mechanism, and finally a structural description
with the connection of each mechanism to the biological bus.
For biosystems corresponding to the current state of the art of
synthetic biology, the number of design unit to generate reaches
over 50 very quickly. Nevertheless, as our entire model share
the same formalism, an automation of the model generation can
be considered.
C. Automated Model Generator
There are three main motivations for the development of an
automated model generator: the large number of design units
to generate, the accessibility for users that are not familiar with
VHDL-AMS language, and the connection of the modeling environment with upstream stages of the design flow. The software
architecture is based on two main parts: the GUI and the engine
(see Fig. 3). It is encoded in C++ for the generation engine and
uses QT libraries for the associated GUI. On the other hand,
Dolphin SMASH, one of the most complete HDLs simulation
software [60], is used to simulate VHDL-AMS models.
The GUI provides to the user a simple interface for the definition of his entire system. From this window, he can specify
the system structure which consists in describing the involved
species, the interaction between species (gene expression, binding reaction, etc.) as well as all the associated parameters. The
user builds all the reaction mechanisms within this interface.

Then, the model generation engine takes as an input the system structure defined through the GUI. Four kinds of files (one
design unit per file) are generated by this tool: 1) a set of species
files, one per involved species, each one of them including both
the VHDL-AMS nature definition and the description of elementary parts (capacitor, resistor, VDCS); 2) the system file which
consists in the structural description of the biological system
by an assembly of elementary parts according to the formalism
described in the previous section; 3) the testbench file which
contains an instantiation of the model of the biological system
as well as the associated test vectors; and 4) the command file
required by SMASH to compile the VHDL-AMS descriptions,
run the simulation, and display the results.
The strategy for the model generation consists in filling up
pattern files accordingly to information provided by the user
through the GUI. Our model formalization makes the generation
possible with a reduced set of pattern files and covers all the
biological mechanisms.
IV. RESULTS
Models and their associated tools are tested on three examples
extracted from the literature: a combinatorial circuit (complex
in term of biological function but straightforward in term of
modeling and species interactions) [4], a half-adder (AND and
XOR gates) which involves local feedbacks [18], and a closedloop system [55]. Results are given in detail in following section.
Table I summarizes the complexity and the number of generated
files for each system.
A. Molecular Signature Recognition
The first example is an artificial genetic network that might
be used to detect and treat cancers, which is obviously one
of the hottest research topics in the field of synthetic biology.
The major issue in cancer therapy is to target tumor cells in
order to avoid side effects. In this study, HeLa cells are used as
prototypic cancer cells. Artificial genes developed by Xie et al.
[4] are designed to differentiate HeLa cancer cells from normal

1236

IEEE TRANSACTIONS ON BIOMEDICAL ENGINEERING, VOL. 61, NO. 4, APRIL 2014

Fig. 4. Double inhibition system making possible the detection of the
microRNA.

epithelial ones. Macrobiological molecules, called microRNA
(or miRNA), are used as markers to do the job.
The biosystem consists of several parts that detect the presence or the lack of a specific set of microRNAs. It is composed
of five genes controlling the synthesis of a red fluorescent protein called DsRed used to mark tumor cells. The synthesis of
DsRed is driven by the following digital function:
DsRed = miR21 ∧ (miR17 ∨ miR30a) ∧ ¬miR141
∧ ¬miR142 ∧ ¬miR146a

Fig. 5. DC simulation (line) and experimental results (markers) of the subsystem described in Fig. 6 with a single inhibition (in blue) and with a double
inhibition (in red).

(4)

where miRX corresponds to the microRNA to detect and ∧,
∨ and ¬ are, respectively, the logical operators AND, OR, and
NOT. The operating mode of this system is described in detail
in [4] and [56]. Here, only the elementary microRNA detection
process and the overall behavior are depicted.
The detection of the lack of microRNA is quite easy, owing to
their nature. MicroRNAs are short noncoding RNA molecules
that may bind on a targeted messenger RNA strand and induce
its inhibition or its degradation (and as a consequence, prevent the protein coded by the mRNA from being synthesized).
This way, the gene coding for DsRed is designed in order to
have a transcript mRNA targeted for miR-141, miR-142, and
miR-146a. Thus, in the presence of these microRNAs, DsRed
is not synthesized.
On the other hand, the presence of microRNA is more difficult
to spot. For this purpose, Xie et al. suggested a system based on
a double inhibition described in Fig. 4. Graphical code used in
this scheme is the following: the classic arrow corresponds to
gene activation whereas the arrow with a line ending is a gene
repression. This system consists of three genes (see Fig. 4):
one synthesizing rtTA, one synthesizing LacI (a gene repressor)
which is activated by rtTA, and a last one synthesizing DsRed
when LacI is not present. The expression of the two first genes
can be inhibited by the miRNAs. So, when miRNAs are present,
neither rtTA nor LacI is synthesized, enabling the synthesis of
DsRed. From a digital point of view, the second mechanism is
redundant. Nevertheless, Xie et al. experimentally demonstrated
the necessity of this combined action of miRNA in order to
reach discriminant fluorescence levels for high concentration of
miRNA.
This behavior has been retrieved by simulation with the conservative model, as shown in Fig. 5. Red curves and dots correspond to the system depicted in Fig. 4. Blue ones correspond to
the same system without the action of miRNA on LacI’s messenger RNA. In both cases, generated models clearly fit the experimental results. However, around 10−10 pM of microRNAs,
a mismatch between simulations and experimental data can be
observed. This highlights a limitation of the models used for the
gene expression, i.e., Hill’s equation, which is known to be too

Fig. 6.

Transient simulation results of the whole Xie system [4].

rough to accurately model complex behaviors [57]. The development of alternative models is still under consideration. Either
way, the new model would be integrated in our framework without further development as soon as the mathematical function
that rules the synthesis and the consumption for a given protein
X can be written as (1)–(3).
Based on previous considerations, we now model the whole
system corresponding to (4). A transient simulation of the whole
system has been achieved with a test vector covering the different cases. Results are given in Fig. 6. With the presence of
miR-21 or miR30a or miR-17 separately, rtTA and LacI are
synthesized in fewer concentration but it is still too much to

GENDRAULT et al.: MODELING BIOLOGY WITH HDL LANGUAGES

1237

Fig. 7. Biosystem of a half-adder made up one XOR gate and one AND gate.
Phloretin and erythromycin are the inputs of the system whereas d2EYFP and
DsRed are the outputs.
TABLE II
TRUTH TABLE OF THE HALF-ADDER DESCRIBED IN FIG. 7
Fig. 8. Transient simulation result of the half-adder described in Fig. 7. The
output corresponds to the behavior of a half-adder: when neither phloretin nor
erythromycin is present, both outputs are low; when only one of the two species
is present, d2EYFP (result of the addition) is high and DsRed is low; when both
species are present, DsRed (carry of the addition) is high while d2EYFP is low.

activate the synthesis of DsRed. However, when they both are
present, rtTA and LacI are completely degraded and DsRed is
synthesized. The presence of miR-141, miR-142 and miR-146a,
separately or together, clearly induces the degradation of DsRed.
The whole system model involves more than 60 files corresponding to more than 300 quantities generated, which makes
the necessity of the model generator even more obvious. In this
case, the modeling and simulation were performed a priori to
show the efficiency of HDL modeling for biological mechanisms. However, the development achieved by Xie should have
been in an iterative process (a first construction without double
repression and optimization in order to have more discriminant behavior). This optimization can be a long and expensive
process. This task could have been accelerated by the use of
models and dedicated automation tools, which are not mature
for synthetic biology yet. Such tools are widely used in microelectronics and may be adapted to synthetic biology as soon as
a model of the biological process can be effectively described
with HDL.
B. Digital Gates
The second use case is the 1-bit half-adder developed by
Auslander et al. [18]. It consists of a XOR gate and an AND gate
and involves several genes whose interaction are summarized in
Fig. 7 and Table II. The graphical convention is the same as that
in the previous section. In addition, the line with a “+” symbol represents a binding reaction between the species linked.
The two inputs of the half-adder are the Phloretin (Ph) and
Erythromycin (Er) and the outputs are constituted of a yellow
fluorescent protein d2EYFP for the XOR gate and a red fluorescent protein DsRed for the AND gate. Elementary mechanisms
are the following: 1) Ph and Er are repressors for TtgA1 and ET1
syntheses. As a consequence, TtgA1 and ET1 are synthesized
only if Ph and Er are not present in the cell; 2) the presence
of TtgA1 in the cell induces the synthesis of C/Dbox-d2EYFP
and MS2. ET1 has the same behavior on MS2box-d2EYFP
and L7Ae; 3) DsRed is always synthesized in the cell but be-

Fig. 9.

Oscillator from [55] composed of only three proteins.

comes inactive when it binds to L7Ae or MS2; and 4) MS2 and
MS2box-d2EYFP on one hand, and L7Ae and C/Dbox-d2EYFP
on the other hand can bind, which make the yellow florescent
function inactive. The model of this system is generated thanks
to our software and model parameters have been adjusted in
order to obtain the targeted behavior. The transient simulation
result is given in Fig. 8.
The simulation results correspond to the expected behavior
and to the experimental results. Quantitative comparisons cannot
be carried out because the experimental fluorescence values for
different cases are not given, but we observe exactly the same
behavior as in [18]: a weak fluorescence of d2EYFP is observed
when the two inputs are low. The same phenomenon is observed
on DsRed when only one of the two inputs is present.
This example has been chosen to validate the conservative
modeling approach. Because of the four binding reactions, this
example is more complex than the first one from a modeling
and simulating viewpoint. With the conservative approach, no
local feedback is required and the concentration of each species
is computed as a balance between all the contributing mechanisms (synthesis, consumption by the binding reaction, etc.).
The complete model of the system consists of about 60 model
files and more than 250 VHDL-AMS quantities.
C. Oscillator
The last case is a biological oscillator developed by Stricker
et al. [55]. The diagram of the system is shown in Fig. 9. In opposition with the first two ones, this oscillator is a closed-loop
system, which is well known to cause stability and/or convergence issues for the simulators.
Three genes are involved in the system, coding, respectively,
for the synthesis of three proteins: an activator araC, a repressor

1238

IEEE TRANSACTIONS ON BIOMEDICAL ENGINEERING, VOL. 61, NO. 4, APRIL 2014

can be challenging to model such a closed-loop system with a
block-diagram approach. The results we obtained demonstrate
the robustness of our approach.
V. DISCUSSION AND CONCLUSION

Fig. 10. Transient simulation results for the biological oscillator. The first
graph corresponds to the initial injection of araC that trigs the system. The three
other curves correspond to the transient evolution of the three involved species:
araC, LacI, and DsRed.

Fig. 11. Transient simulation results for the biological oscillator. The line
corresponds to the DsRed concentration whereas the crosses corresponds to the
experimental results extracted from [55].

LacI, and a fluorescent reporter DsRed. The expression of each
gene is driven by the concentration of araC and LacI. The system is trigged by an injection of araC leading to the synthesis
LacI of DsRed. The gene coding for LacI is self-repressed and,
as a consequence, a large amount of LacI in the cell stops its
synthesis. LacI concentration decreases under a given threshold under which the repression is no more efficient. From this
point, the systems oscillate between two states: the “off state”
where the cell contains a sufficient amount of LacI to repress
the expression of the three genes and the “on state” where LacI
concentration is under a threshold value, which activates the
synthesis of the three proteins, including the reporter. This system forms a nonlinear closed-loop system which may oscillate
at a given frequency if several conditions on models parameters
are met.
This system is modeled with our software and simulation
results are reported in Figs. 10 and 11. The periodic behavior of
the three proteins is observed. In addition, the transient evolution
of the DsRed is given and compared with experimental results
extracted from [55]. Curves are in a good accordance.
The model is composed of 20 VHDL-AMS files and generates about 100 quantities. Although those figures are weaker
in comparison with the two other examples, the system complexity from a simulation viewpoint is higher. For instance, it

In this paper, a new way to model artificial biosystems developed in synthetic biology is demonstrated. Its main feature is its
full compatibility with design flow used in microelectronics.
Up to now, only the modeling/simulation stage of a future
GDA tool has been addressed and only two abstraction levels, namely digital model and conservative model, have been
described there. Nevertheless, in a near future, intermediate description might be required to take into account some specific
hallmarks of biology in comparison with electronics to reach a
good tradeoff between simulation time and accuracy. Another
approach, using stochastic equations, is also worked out. In addition, we point out that present models describing biological
mechanisms at low-level, i.e., Hill’s equation, are too rough (see
Fig. 7) and model improvements are needed.
One of the trickiest challenges might be to convince bioengineers to adopt languages and techniques they are not accustomed
to. The development of an automated model synthesizer tool is
a first step. However, we should go further. Two approaches are
being considered. The first one consists in replacing the GUI by
a plug-in in order to interpret SBML description and convert it in
a system structure which can be used directly with the generator
engine [51], [52]. Another one is to switch from VHDL-AMS to
SystemC-AMS [48]–[50], a HDL based on C++ and therefore
open source and more accessible for bioengineers.
Finally, besides modeling and simulations issues, other difficulties should be overcome: extraction of model parameters,
standardization of BioBrick library, etc. In addition, being able
to describe and simulate biology using HDLs paves the way
for the reuse and the adaptation of the very efficient synthesis
and optimization tools used in microelectronics. To our knowledge, no such tools currently exist for synthetic biology. We are
convinced that this is a very promising way to develop a GDA,
which would be a major breakthrough in the field of synthetic
biology.
VI. SUPPLEMENTAL MATERIAL
Details about the model formalism, the model generator, tutorials, and the VHDL-AMS files of some models (including
the three examples used in Section IV) can be found on the
following website:
http://icube-smh.unistra.fr/index.php/CAD_Tools_for_
Synthetic_Biology.
ACKNOWLEDGMENT
The author would like to acknowledge the support of
Stéphanie MUNIER in proofreading this paper. They would
also like to thank V. Wlotzko and M. Andraud, two students of
the 2012 promotion of Telecom Physique Strasbourg (Engineer
School of the University of Strasbourg, France), for their valuable contribution in the software development. Their work has

GENDRAULT et al.: MODELING BIOLOGY WITH HDL LANGUAGES

been presented and awarded with a bronze medal at the 2011
iGEM competition in the software track.
REFERENCES
[1] D. Endy, “Foundations for engineering biology,” Nature, vol. 438,
pp. 449–453, 2005.
[2] V. Martin, D. Pitera, S. Withers, J. Newman, and J. Keasling, “Engineering
a mevalonate pathway in Escherichia coli for production of terpenoids,”
Nature Biotechnol., vol. 21, pp. 796–802, 2003.
[3] C. Kemmer, D. A. Fluri, U. Witschi, A. Passeraub, A. Gutzwiller, and
M. Fussenegger, “A designer network coordinating bovine artificial insemination by ovulation-triggered release of implanted sperms,” J. Control. Release, vol. 150, no. 1, pp. 23–29, 2011.
[4] Z. Xie, L. Wroblewska, L. Prochazka, R. Weiss, and Y. Benenson, “Multiinput RNAi-based logic circuit for identification of specific cancer cells,”
Science, vol. 333, pp. 1307–1311, 2011.
[5] A. A. Gilad, M. T. McMahon, P. Walczak, P. T. Winnard Jr., V. Raman,
H. W. M. van Laarhoven, C. M. Skoglund, J. W. M. Bulte, and P. C. M.
van Zijl, “Artificial reporter gene providing MRI contrast based on proton
exchange,” Nature Biotechnol., vol. 25, pp. 217–219, 2007.
[6] E. K. Jaffe, M. Volin, C. R. Bronson-Mullins, R. L. Dunbrack Jr.,
J. Kervinen, J. Martins, J. F. Quinlan Jr., M. H. Sazinsky, E. M. Steinhouse, and A. T. Yeung, “An artificial gene for human porphobilinogen
synthase allows comparison of an allelic variation implicated in susceptibility to lead poisoning,” J. Biol. Chem., vol. 275, pp. 2619–2626, 2000.
[7] W. Weber, R. Schoenmakers, B. Keller, M. Gitzinger, T. Grau, M. DaoudEl Baba, P. Sander, and M. Fussenegger, “A synthetic mammalian gene circuit reveals antituberculosis compounds,” Proc. Nat. Acad. Sci., vol. 105,
pp. 9994–9998, 2008.
[8] N. Saeidi, C. K. Wong, T.-M. Lo, H. X. Nguyen, H. Ling, S. S. J. Leong,
C. L. Poh, and M. W. Chang, “Engineering microbes to sense and eradicate
pseudomonas aeruginosa, a human pathogen,” Mol. Syst. Biol., vol. 7,
p. 521, 2011. DOI: 10.1038/msb.2011.55.
[9] G. Kanter, J. Yang, A. Voloshin, S. Levy, J. R. Swartz, and R. Levy,
“Cell-free production of scFv fusion proteins: An efficient approach for
personalized lymphoma vaccines,” Blood, vol. 109, pp. 3393–3399, 2007.
[10] T. M. Lo, “Designing a synthetic genetic circuit that enables cell densitydependent auto-regulatory lysis for macromolecule release,” Chem. Eng.
Sci., vol. 103, pp. 29–35, 2013.
[11] M. S. Ferry, J. Hasty, and N. A. Cookson, “Synthetic biology approaches
to biofuel production,” Biofuels, vol. 3, no. 1, pp. 9–12, 2012.
[12] T. P. Howard, “Synthesis of customized petroleum-replica fuel molecules
by targeted modification of free fatty acid pools in Escherichia coli,” Proc.
Nat. Acad. Sci., vol. 110, no. 19, pp. 7636–7641, 2013.
[13] A. S. Khalil and J. J. Collins, “Synthetic biology: Application come to
age,” Nature Rev. Genetics, vol. 11, pp. 367–379, 2010.
[14] T. Knight. (2003). Idempotent vector design for standard assembly of
biobricks, MIT Synthetic Biology Working Group [Online]. Available:
http://web.mit.edu/synbio/release/docs/biobricks.pdf
[15] BioBrick Foundation website. (2014). [Online]. Available: http://
biobricks.org
[16] Registery of Standard Biological Parts. (2014). [Online]. Available:
http://parts.igem.org
[17] D. Gerber and M. Fussenegger, “Mammalian synthetic biology: Engineering of sophisticated gene network,” J. Biotechnol., vol. 130, pp. 329–345,
2007.
[18] S. Ausländer, D. Ausländer, M. Müller, M. Wieland, and M. Fussenegger,
“Programmable single-cell mammalian biocomputers,” Nature, vol. 487,
pp. 1–6, 2012.
[19] J. C. Anderson, C. A. Voigt, and A. P. Parkin, “Environmental signal integration by a modular AND gate,” Mol. Syst. Biol., vol. 3, p. 113, 2007.
DOI: 10.1038/msb4100173.
[20] T. S. Moon, C. Lo, A. Tasmir, B. C. Stanton, and C. A. Voigt, “Genetic
programs constructed from layered logic gates in single cells,” Nature
Lett., vol. 491, pp. 249–253, 2012.
[21] M. Madec, C. Lallement, Y. Gendrault, and J. Haiech, “Design methodology for synthetic biosystems,” in Proc. IEEE Int. Conf. Mixed Design
Integr. Circuits Syst., Wroclaw, Poland, June 24–26, 2010, pp. 621–626.
[22] R. Carlson, “The changing economics of DNA synthesis,” Nature Biotechnol., vol. 27, pp. 1091–1094, 2009.
[23] R. Reis, M. Lubaszewski, and J. A. G. Jess, Design of Systems on a Chip:
Design and Test. New York, NY, USA: Springer, 2010.

1239

[24] P. Ashenden, System-on-Chip Methodologies & Design Languages.
New York, NY, USA: Springer, 2010.
[25] L. T. Wang, Y. W. Chang, and K. T. Cheng, Electronic Design Automation: Synthesis, Verification and Test. San Mateo, CA, USA: Morgan
Kaufmann, 2009.
[26] J. Beal, R. Weiss, D. Densmore, A. Adler, E. Appleton, J. Babb, S. Bhatia,
N. Davidsohn, T. Haddock, J. Loyall, R. Schantz, V. Vasilev, and F. Yaman,
“An end-to-end workflow for engineering of biological circuits from highlevel specifications,” ACS Synthetic Biol., vol. 8, pp. 317–331, 2012.
[27] M. W. Lux, B. W. Bramlett, D. A. Ball, and J. Peccoud, “Genetic design
automation: Engineering fantasy or scientific renewal?” Trends Biotechnol., vol. 30, no. 2, pp. 120–126, 2012.
[28] R. Weiss, G. E. Homsy, and T. F. Knight Jr., “Toward in vivo digital
circuits,” in Proc. DIMACS Workshop Evol. Comput., New Brunswick,
NJ, USA, Aug. 25–27, 1999, pp. 275–295.
[29] S. Hoops, S. Sahle, R. Gauges, C. Lee, J. Pahle, N. Simus, M. Singhal,
L. Xu, P. Mendes, and U. Kummer, “COPASI—A COmplex PAthway
SImulator,” Bioinformatics, vol. 22, no. 24, pp. 3067–3074, 2006.
[30] GenoCAD website. (2014). [Online]. Available: http://www.genocad.org
[31] TinkerCell website. (2014). [Online]. Available: http://www.tinkercell.
com
[32] SynBioSS website. (2014). [Online]. Available: http://synbioss.
sourceforge.net
[33] Cell Designer website. (2014). [Online]. Available: http://www.
celldesigner.org
[34] BioJade website. (2014). [Online]. Available: http://web.mit.edu/jagoler/
www/biojade/
[35] M. J. Czar, Y. Cai, and J. Peccoud, “Writing DNA with GenoCAD,”
Nucleic Acids Res., vol. 37, no. 2, pp. W40–W47, 2009.
[36] D. Chandran, F. T. Bergmann, and H. M. Sauro, “TinkerCell: Modular
CAD tool for synthetic biology,” J. Biol. Eng., vol. 3, no. 19, 2009. DOI:
10.1186/1754-1611-3-19.
[37] A. D. Hill, J. R. Tomshine, E. M. B. Weeding, V. Sotiropoulos, and Y. N.
Kaznessis, “SynBioSS: The synthetic biology modeling suite,” Bioinformatics, vol. 24, no. 12, pp. 2551–2553, 2008.
[38] A. Funahashi, Y. Matsuoka, A. Jouraku, M. Morohashi, N. Kikuchi, and
H. Kitano, “CellDesigner 3.5: A versatile modeling tool for biochemical
networks,” Proc. IEEE, vol. 96, no. 8, pp. 1254–1265, Aug. 2008.
[39] J. A. Goler, B. W. Bramlett, and J. Peccoud, “Genetic design: Rising above
the sequence,” Trends Biotechnol., vol. 26, no. 10, pp. 538–544, 2008.
[40] J. Beal, T. Lu, and R. Weiss, “Automatic compilation from highlevel biologically-oriented programming language to genetic regulatory networks,” PLoS One, vol. 6, no. 8, 2011. DOI: 10.1371/journal.
pone.0022490.
[41] D. Densmore and S. Hassoun, “Design automation for synthetic biological
systems,” IEEE Des. Test Comput., vol. 29, no. 3, pp. 7–20, Jun. 2012.
[42] L. Bilitchenko, A. Liu, S. Cheung, E. Weeding, B. Xia, M. Leguia, J. C.
Anderson, and D. Densmore, “Eugene—A domain specific language for
specifying and constraining synthetic biological parts, devices, and systems,” PLoS One, vol. 6, no. 4, 2011. DOI: 10.1371/journal.pone.0018882.
[43] iGEM competition website. (2014). [Online]. Available: http://www.igem.
org
[44] F. Yaman, S. Bhatia, A. Adler, D. Densmore, and J. Beal, “Automated
selection of synthetic biological parts for genetic regulatory networks,”
ACS Synthetic Biol., vol. 1, no. 8, pp. 332–344, 2012.
[45] VHDL-AMS Language Reference Manual. (2014). [Online]. Available:
http://www.vhdl.org
[46] P. Ashenden, The System Designer’s Guide to VHDL-AMS: Analog,
Mixed-Signal, and Mixed-Technology Modeling. San Mateo, CA, USA:
Morgan Kaufmann, 2002.
[47] F. Pecheux, C. Lallement, and A. Vachoux, “VHDL-AMS and VerilogAMS as alternative hardware description languages for the efficient modeling of multi-disciplines systems,” IEEE Trans. Comput.-Aided Des. Integr.
Circuits, vol. 24, no. 2, pp. 204–225, Feb. 2005.
[48] SystemC-AMS Language Reference Manual. (2014). [Online]. Available:
http://www.systemc-ams.org
[49] M. Vasilevski, F. Pecheux, H. Aboushady, and L. de Lamarre, “Modeling
heterogeneous systems using systemC-AMS case study: A wireless sensor
network node,” in Proc. IEEE Int. Behav. Model. Simul. Workshop, San
Jose, CA, USA, Sep. 20–21, 2007, pp. 11–16.
[50] F. Pêcheux, M. Madec, and C. Lallement, “Is SystemC-AMS an appropriate “promoter” for the modeling and simulation of bio-compatible systems?” in Proc. IEEE Int. Symp. Circuits Syst., Paris, France, May 30–Jun.
2, 2010, pp. 1791–1794.
[51] SBML website. (2014). [Online]. Available: http://sbml.org

1240

IEEE TRANSACTIONS ON BIOMEDICAL ENGINEERING, VOL. 61, NO. 4, APRIL 2014

[52] M. Hucka, A. Finney, H. M. Sauro, H. Bolouri, J. C. Doyle, H. Kitano,
A. P. Arkin, B. J. Bornstein, D. Bray, A. Cornish-Bowden, A. A. Cuellar,
S. Dronov, E. D. Gilles, M. Ginkel, V. Gor, I. I. Goryanin, W. J. Hedley,
T. C. Hodgman, J.-H. Hofmeyr, P. J. Hunter, N. S. Juty, J. L. Kasberger, A.
Kremling, U. Kummer, N. Le Novère, L. M. Loew, D. Lucio, P. Mendes,
E. Minch, E. D. Mjolsness, Y. Nakayama, M. R. Nelson, P. F. Nielsen,
T. Sakurada, J. C. Schaff, B. E. Shapiro, T. S. Shimizu, H. D. Spence, J.
Stelling, K. Takahashi, M. Tomita, J. Wagner, and J. Wang, “The systems
biology markup language (SBML): A medium for representation and
exchange of biochemical network models,” Bioinformatics, vol. 19, no. 4,
pp. 524–531, 2003.
[53] Y. Gendrault, M. Madec, C. Lallement, F. Pecheux, and J. Haiech,
“Synthetic biology methodology and model refinement based on microelectronic modeling tools and languages,” Biotechnology J., vol. 6,
pp. 796–806, 2011.
[54] Y. Gendrault, M. Madec, C. Lallement, and J. Haiech, “Multi-abstraction
modeling in synthetic biology,” in Proc. Int. Symp. Appl. Sci. Biomed.
Commun. Technol., Rome, Italy, Nov. 7–10, 2010, pp. 1–5.
[55] J. Stricker, S. Cookson, M. R. Bennett, W. H. Mather, L. S. Tsimring, and
J. Hasty, “A fast, robust and tunable synthetic gene oscillator,” Nature,
vol. 456, pp. 516–519, 2008.
[56] Y. Gendrault et al., “Using digital electronic design flow to create a genetic
design automation tool,” in Proc. Annu. Int. Conf. IEEE Eng. Med. Biol.
Soc., San Diego, CA, USA, Aug. 28–Sep. 1, 2012, pp. 5530–5533.
[57] Z. Konkoli, “Safe uses of Hill’s model: An exact comparison with the
Adair-Klotz model,” Theor. Biol. Med. Model., vol. 8, no. 10, 2011. DOI:
10.1186/1742-4682-8-10.
[58] P. Amar et al., “A stochastic automaton shows how enzyme assemblies
may contribute to metabolic efficiency,” BMC Syst. Biol., vol. 2, no. 27,
2008. DOI: 10.1186/1752-0509-2-27.
[59] M. Madec et al., “A game-of-life like simulator for design-oriented modeling of BioBricks in synthetic biology,” in Proc. Annu. Int. Conf. IEEE Eng.
Med. Biol. Soc., San Diego, CA, USA, Aug. 28–Sep. 1, 2012, pp. 5462–
5465.
[60] Dolphin SMASH. (2014). [Online]. Available: http://www.dolphin.fr/

Yves Gendrault was born in Strasbourg, France, in
1986. He received the M.S. degree in micro- and nanoelectronics and the Ph.D. degree in engineering sciences with a specialization in microelectronics from
the University of Strasbourg, Strasbourg, in 2010 and
2013, respectively.
He is currently a Postdoctoral Student at the University of Strasbourg and in the ICube laboratory.
His research interests include biological mechanisms
modeling and their associated simulations as well as
the structuration of the synthetic biology design flow.

Morgan Madec was born in 1980. He received the
M.S. and Ph.D. degrees in microelectronics from the
Université Louis Pasteur (ULP), Strasbourg, France,
in 2003 and 2006 respectively.
From 2003 to 2006, he was with the Laboratoire
de Physique et Application des Semi-Conducteurs
(PHASE), ULP-Centre National de Recherches Scientifiques, Strasbourg, where he prepared his Ph.D.
thesis on the design, the simulation, and the characterization of optical processors in order to speed
up image reconstruction in the medical field. He is
currently an Associated Professor with the ICube Laboratory, Université de
Strasbourg (Unistra), Strasbourg, and teaches electronics in Telecom Physique
Strasbourg, Unistra, Illkirch, France. His research interests include compact
modeling and design tools for microsystems, and especially systems at the interface with biology. He started in 2009 a research activity in synthetic biology,
focusing on the adaptation of EDA tools for this emerging field.

Christophe Lallement (M’97) received the M.S. degree in engineering from the Université des Sciences
de Nancy I, Nancy, France, and the Ph.D. degree in
engineering from the Ecole Nationale Supérieure des
Télécommunications, Paris, France.
From November 1994 to September 1997, he was
a Postdoctoral Research Scientist with the Laboratory
of Electronics of the Ecole Polytechnique Fédérale de
Lausanne (EPFL), Lausanne, Switzerland, working
on the characterization and modeling of the metaloxide-semiconductor field effect transistor (MOSFET)
in the development team of the Enz-Krummenacher-Vittoz MOSFET model.
In September 1997, he was an Associate Professor with the Université de
Strasbourg (UdS), Strasbourg, France, and the Laboratoire de Physique et Application des Semi-Conducteurs, Centre National de la Recherche Scientifique
(CNRS). Since September 2003, he has been a Professor with the Telecom
Physique Strasbourg, Illkirch, France. He is currently with ICube Laboratory,
UdS-CNRS, working on the study and the modeling of advanced devices, veryhigh-speed integrated-circuit hardware description language analog and mixedsignal systems, and biosynthetic systems. He is the responsible for the group
“Heterogeneous Systems and Microsystems” at ICube Laboratory.

Jacques Haiech received the M.S. degree from the
Computer Mathematics Department, Ecole Normale
Supérieure de Cachan, Cachan, France, and the Ph.D.
degree in biology from the University of Montpellier,
Montpellier, France.
He was a Postdoctoral Research Scientist at
Bethesda at the National Institute against Cancer.
He returned to Monpellier in 1981 and created the
Biochemistry and Pharmacology of arterial muscle
and cofounded in 1985 the research group Applications of artificial intelligence in robotics and biology.
He became the Director of Research at the Centre National de la Recherche
Scientifique (CNRS) and became Manager of the CNRS National Platform
fermentation and production of recombinant proteins in Marseille (Campus
Joseph Aiguier) in 1987. From 1986 to 1994, he was an Invited Professor
at Vanderbilt University, Nashville Tennessee. In 1991, he became a Professor at the University of Marseille-Luminy and in 1994 a Visiting Professor at
Northwestern University, Chicago. In 1997, he came to the University of Strasbourg (Faculty of Pharmacy in 1997 and Ecole Supérieure de Biotechnologie de
Strasbourg in 2003) where he created and directed the Federative Research
Institute Gilbert Laustriat from 1999 to 2005. He is Cofounder of the French
academic Chimiothèque and the first platform of academic screening. He coauthored more than 140 publications in biology, chemistry, and computer science
dealing mainly various aspects of intracellular calcium signaling.

